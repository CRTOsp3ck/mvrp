// Code generated by MVRP Codegen Util. DO NOT EDIT.

package purchase

import (
	"context"
	"database/sql"
	"mvrp/data/model/purchase"
	"mvrp/domain/dto"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

func (r *PurchaseRepository) ListAllPurchaseOrders(ctx context.Context, exec boil.ContextExecutor) (purchase.PurchaseOrderSlice, error) {
	return purchase.PurchaseOrders().All(ctx, exec)
}
func (r *PurchaseRepository) SearchPurchaseOrders(ctx context.Context, exec boil.ContextExecutor, dto dto.SearchPurchaseOrderDTO) (purchase.PurchaseOrderSlice, error) {
	return purchase.PurchaseOrders(
		qm.Limit(dto.ItemsPerPage),
		qm.Offset((dto.ItemsPerPage*dto.Page)-dto.ItemsPerPage),
		qm.GroupBy("id"),
		qm.OrderBy(dto.OrderBy+" "+"ASC"),
	).All(ctx, exec)
}

func (r *PurchaseRepository) GetPurchaseOrderByID(ctx context.Context, exec boil.ContextExecutor, id int) (*purchase.PurchaseOrder, error) {
	return purchase.FindPurchaseOrder(ctx, exec, id)
}

func (r *PurchaseRepository) CreatePurchaseOrder(ctx context.Context, exec boil.ContextExecutor, m *purchase.PurchaseOrder) error {
	id, err := r.GetNextEntryPurchaseOrderID(ctx, exec)
	if err != nil {
		return err
	}
	m.ID = id
	return m.Insert(ctx, exec, boil.Infer())
}

func (r *PurchaseRepository) UpdatePurchaseOrder(ctx context.Context, exec boil.ContextExecutor, m *purchase.PurchaseOrder) error {
	_, err := m.Update(ctx, exec, boil.Infer())
	return err
}

func (r *PurchaseRepository) UpsertPurchaseOrder(ctx context.Context, exec boil.ContextExecutor, m *purchase.PurchaseOrder) error {
	return m.Upsert(ctx, exec, true, nil, boil.Infer(), boil.Infer())
}

func (r *PurchaseRepository) DeletePurchaseOrder(ctx context.Context, exec boil.ContextExecutor, m *purchase.PurchaseOrder) error {
	_, err := m.Delete(ctx, exec)
	return err
}

func (r *PurchaseRepository) PurchaseOrderExists(ctx context.Context, exec boil.ContextExecutor, id int) (bool, error) {
	return purchase.PurchaseOrderExists(ctx, exec, id)
}

func (r *PurchaseRepository) GetPurchaseOrderRowsCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := purchase.PurchaseOrders().Count(ctx, exec)
	return int(count), err
}

func (r *PurchaseRepository) GetMostRecentPurchaseOrder(ctx context.Context, exec boil.ContextExecutor) (*purchase.PurchaseOrder, error) {
	return purchase.PurchaseOrders(qm.OrderBy("created_at DESC")).One(ctx, exec)
}

func (r *PurchaseRepository) GetNextEntryPurchaseOrderID(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	currID, err := r.GetMostRecentPurchaseOrder(ctx, exec)
	if err != nil {
		if err == sql.ErrNoRows {
			return 1, nil
		}
		return 0, err
	}
	return currID.ID + 1, nil
}