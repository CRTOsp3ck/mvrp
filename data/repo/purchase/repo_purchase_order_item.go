// Code generated by MVRP Codegen Util. DO NOT EDIT.

package purchase

import (
	"context"
	"database/sql"
	"mvrp/data/model/purchase"
	"mvrp/domain/dto"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

func (r *PurchaseRepository) ListAllPurchaseOrderItems(ctx context.Context, exec boil.ContextExecutor) (purchase.PurchaseOrderItemSlice, error) {
	return purchase.PurchaseOrderItems().All(ctx, exec)
}
func (r *PurchaseRepository) SearchPurchaseOrderItems(ctx context.Context, exec boil.ContextExecutor, dto dto.SearchPurchaseOrderItemDTO) (purchase.PurchaseOrderItemSlice, error) {
	return purchase.PurchaseOrderItems(
		qm.Limit(dto.ItemsPerPage),
		qm.Offset((dto.ItemsPerPage*dto.Page)-dto.ItemsPerPage),
		// qm.GroupBy("id"),
		qm.OrderBy(dto.OrderBy+" "+"ASC"),
	).All(ctx, exec)
}

func (r *PurchaseRepository) GetPurchaseOrderItemByID(ctx context.Context, exec boil.ContextExecutor, id int) (*purchase.PurchaseOrderItem, error) {
	return purchase.FindPurchaseOrderItem(ctx, exec, id)
}

func (r *PurchaseRepository) CreatePurchaseOrderItem(ctx context.Context, exec boil.ContextExecutor, m *purchase.PurchaseOrderItem) error {
	/*
		id, err := r.GetNextEntryPurchaseOrderItemID(ctx, exec)
		if err != nil {
			return err
		}
		m.ID = id
	*/
	return m.Insert(ctx, exec, boil.Infer())
}

func (r *PurchaseRepository) UpdatePurchaseOrderItem(ctx context.Context, exec boil.ContextExecutor, m *purchase.PurchaseOrderItem) error {
	_, err := m.Update(ctx, exec, boil.Infer())
	return err
}

func (r *PurchaseRepository) UpsertPurchaseOrderItem(ctx context.Context, exec boil.ContextExecutor, m *purchase.PurchaseOrderItem) error {
	return m.Upsert(ctx, exec, true, nil, boil.Infer(), boil.Infer())
}

func (r *PurchaseRepository) DeletePurchaseOrderItem(ctx context.Context, exec boil.ContextExecutor, m *purchase.PurchaseOrderItem) error {
	_, err := m.Delete(ctx, exec)
	return err
}

func (r *PurchaseRepository) PurchaseOrderItemExists(ctx context.Context, exec boil.ContextExecutor, id int) (bool, error) {
	return purchase.PurchaseOrderItemExists(ctx, exec, id)
}

func (r *PurchaseRepository) GetPurchaseOrderItemRowsCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := purchase.PurchaseOrderItems().Count(ctx, exec)
	return int(count), err
}

func (r *PurchaseRepository) GetMostRecentPurchaseOrderItem(ctx context.Context, exec boil.ContextExecutor) (*purchase.PurchaseOrderItem, error) {
	return purchase.PurchaseOrderItems(qm.OrderBy("created_at DESC")).One(ctx, exec)
}

func (r *PurchaseRepository) GetNextEntryPurchaseOrderItemID(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	var maxID sql.NullInt64
	err := purchase.PurchaseOrderItems(qm.Select("MAX(id)")).QueryRow(exec).Scan(&maxID)
	if err != nil {
		return 0, err
	}

	// Check if maxID is valid (non-NULL), otherwise return 1
	if !maxID.Valid {
		return 1, nil
	}
	return int(maxID.Int64) + 1, nil

	/*
		currID, err := r.GetMostRecentPurchaseOrderItem(ctx, exec)
		if err != nil {
			if err == sql.ErrNoRows {
				return 1, nil
			}
			return 0, err
		}
		return currID.ID + 1, nil
	*/
}

func (r *PurchaseRepository) GetPurchaseOrderItemTotalCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := purchase.PurchaseOrderItems().Count(ctx, exec)
	return int(count), err
}