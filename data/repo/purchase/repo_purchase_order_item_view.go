// Code generated by ZERP Codegen Util. DO NOT EDIT.

package purchase

import (
	"context"
	"mvrp/data/model/purchase"
	
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

func (r *PurchaseRepository) ListAllPurchaseOrderItemViews(ctx context.Context, exec boil.ContextExecutor) (purchase.PurchaseOrderItemViewSlice, error) {
	return purchase.PurchaseOrderItemViews().All(ctx, exec)
}

func (r *PurchaseRepository) GetPurchaseOrderItemViewByID(ctx context.Context, exec boil.ContextExecutor, id int) (*purchase.PurchaseOrderItemView, error) {
	return purchase.PurchaseOrderItemViews(qm.Where(purchase.PurchaseOrderItemViewColumns.ID+"=?", id)).One(ctx, exec)
}

func (r *PurchaseRepository) PurchaseOrderItemViewExists(ctx context.Context, exec boil.ContextExecutor, id int) (bool, error) {
	return purchase.PurchaseOrderItemViews(qm.Where(purchase.PurchaseOrderItemViewColumns.ID+"=?", id)).Exists(ctx, exec)
}

func (r *PurchaseRepository) GetPurchaseOrderItemViewRowsCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := purchase.PurchaseOrderItemViews().Count(ctx, exec)
	return int(count), err
}

func (r *PurchaseRepository) GetMostRecentPurchaseOrderItemView(ctx context.Context, exec boil.ContextExecutor) (*purchase.PurchaseOrderItemView, error) {
	return purchase.PurchaseOrderItemViews(qm.OrderBy("created_at DESC")).One(ctx, exec)
}