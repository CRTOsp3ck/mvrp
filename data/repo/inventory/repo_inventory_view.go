// Code generated by MVRP Codegen Util. DO NOT EDIT.

package inventory

import (
	"context"
	"mvrp/data/model/inventory"
	"mvrp/domain/dto"
	
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

func (r *InventoryRepository) ListAllInventoryViews(ctx context.Context, exec boil.ContextExecutor) (inventory.InventoryViewSlice, error) {
	return inventory.InventoryViews().All(ctx, exec)
}
func (r *InventoryRepository) SearchInventoryViews(ctx context.Context, exec boil.ContextExecutor, dto dto.SearchInventoryDTO) (inventory.InventoryViewSlice, error) {
	return inventory.InventoryViews(
		qm.Limit(dto.ItemsPerPage),
		qm.Offset((dto.ItemsPerPage*dto.Page)-dto.ItemsPerPage),
		// qm.GroupBy("id"),
		qm.OrderBy(dto.OrderBy+" "+"ASC"),
	).All(ctx, exec)
}

func (r *InventoryRepository) GetInventoryViewByID(ctx context.Context, exec boil.ContextExecutor, id int) (*inventory.InventoryView, error) {
	return inventory.InventoryViews(qm.Where(inventory.InventoryViewColumns.ID+"=?", id)).One(ctx, exec)
}

func (r *InventoryRepository) InventoryViewExists(ctx context.Context, exec boil.ContextExecutor, id int) (bool, error) {
	return inventory.InventoryViews(qm.Where(inventory.InventoryViewColumns.ID+"=?", id)).Exists(ctx, exec)
}

func (r *InventoryRepository) GetInventoryViewRowsCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := inventory.InventoryViews().Count(ctx, exec)
	return int(count), err
}

func (r *InventoryRepository) GetMostRecentInventoryView(ctx context.Context, exec boil.ContextExecutor) (*inventory.InventoryView, error) {
	return inventory.InventoryViews(qm.OrderBy("created_at DESC")).One(ctx, exec)
}