// Code generated by ZERP Codegen Util. DO NOT EDIT.

package inventory

import (
	"context"
	"database/sql"
	"mvrp/data/model/inventory"
	"mvrp/domain/dto"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

func (r *InventoryRepository) ListAllStockCountSheets(ctx context.Context, exec boil.ContextExecutor) (inventory.StockCountSheetSlice, error) {
	return inventory.StockCountSheets().All(ctx, exec)
}
func (r *InventoryRepository) SearchStockCountSheets(ctx context.Context, exec boil.ContextExecutor, dto dto.SearchStockCountSheetDTO) (inventory.StockCountSheetSlice, error) {
	return inventory.StockCountSheets(
		qm.Limit(dto.ItemsPerPage),
		qm.Offset((dto.ItemsPerPage*dto.Page)-dto.ItemsPerPage),
		qm.GroupBy("id"),
		qm.OrderBy(dto.OrderBy+" "+"ASC"),
	).All(ctx, exec)
}

func (r *InventoryRepository) GetStockCountSheetByID(ctx context.Context, exec boil.ContextExecutor, id int) (*inventory.StockCountSheet, error) {
	return inventory.FindStockCountSheet(ctx, exec, id)
}

func (r *InventoryRepository) CreateStockCountSheet(ctx context.Context, exec boil.ContextExecutor, m *inventory.StockCountSheet) error {
	id, err := r.GetNextEntryStockCountSheetID(ctx, exec)
	if err != nil {
		return err
	}
	m.ID = id
	return m.Insert(ctx, exec, boil.Infer())
}

func (r *InventoryRepository) UpdateStockCountSheet(ctx context.Context, exec boil.ContextExecutor, m *inventory.StockCountSheet) error {
	_, err := m.Update(ctx, exec, boil.Infer())
	return err
}

func (r *InventoryRepository) UpsertStockCountSheet(ctx context.Context, exec boil.ContextExecutor, m *inventory.StockCountSheet) error {
	return m.Upsert(ctx, exec, true, nil, boil.Infer(), boil.Infer())
}

func (r *InventoryRepository) DeleteStockCountSheet(ctx context.Context, exec boil.ContextExecutor, m *inventory.StockCountSheet) error {
	_, err := m.Delete(ctx, exec)
	return err
}

func (r *InventoryRepository) StockCountSheetExists(ctx context.Context, exec boil.ContextExecutor, id int) (bool, error) {
	return inventory.StockCountSheetExists(ctx, exec, id)
}

func (r *InventoryRepository) GetStockCountSheetRowsCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := inventory.StockCountSheets().Count(ctx, exec)
	return int(count), err
}

func (r *InventoryRepository) GetMostRecentStockCountSheet(ctx context.Context, exec boil.ContextExecutor) (*inventory.StockCountSheet, error) {
	return inventory.StockCountSheets(qm.OrderBy("created_at DESC")).One(ctx, exec)
}

func (r *InventoryRepository) GetNextEntryStockCountSheetID(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	currID, err := r.GetMostRecentStockCountSheet(ctx, exec)
	if err != nil {
		if err == sql.ErrNoRows {
			return 1, nil
		}
		return 0, err
	}
	return currID.ID + 1, nil
}