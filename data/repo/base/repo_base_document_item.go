// Code generated by MVRP Codegen Util. DO NOT EDIT.

package base

import (
	"context"
	"database/sql"
	"mvrp/data/model/base"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

func (r *BaseRepository) ListAllBaseDocumentItems(ctx context.Context, exec boil.ContextExecutor) (base.BaseDocumentItemSlice, error) {
	return base.BaseDocumentItems().All(ctx, exec)
}

func (r *BaseRepository) GetBaseDocumentItemByID(ctx context.Context, exec boil.ContextExecutor, id int) (*base.BaseDocumentItem, error) {
	return base.FindBaseDocumentItem(ctx, exec, id)
}

func (r *BaseRepository) CreateBaseDocumentItem(ctx context.Context, exec boil.ContextExecutor, m *base.BaseDocumentItem) error {
	return m.Insert(ctx, exec, boil.Infer())
}

func (r *BaseRepository) UpdateBaseDocumentItem(ctx context.Context, exec boil.ContextExecutor, m *base.BaseDocumentItem) error {
	_, err := m.Update(ctx, exec, boil.Infer())
	return err
}

func (r *BaseRepository) UpsertBaseDocumentItem(ctx context.Context, exec boil.ContextExecutor, m *base.BaseDocumentItem) error {
	return m.Upsert(ctx, exec, true, nil, boil.Infer(), boil.Infer())
}

func (r *BaseRepository) DeleteBaseDocumentItem(ctx context.Context, exec boil.ContextExecutor, m *base.BaseDocumentItem) error {
	_, err := m.Delete(ctx, exec)
	return err
}

func (r *BaseRepository) BaseDocumentItemExists(ctx context.Context, exec boil.ContextExecutor, id int) (bool, error) {
	return base.BaseDocumentItemExists(ctx, exec, id)
}

func (r *BaseRepository) GetBaseDocumentItemRowsCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := base.BaseDocumentItems().Count(ctx, exec)
	return int(count), err
}

func (r *BaseRepository) GetMostRecentBaseDocumentItem(ctx context.Context, exec boil.ContextExecutor) (*base.BaseDocumentItem, error) {
	return base.BaseDocumentItems(qm.OrderBy("created_at DESC")).One(ctx, exec)
}

func (r *BaseRepository) GetNextEntryBaseDocumentItemID(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	var maxID sql.NullInt64
	err := base.BaseDocumentItems(qm.Select("MAX(id)")).QueryRow(exec).Scan(&maxID)
	if err != nil {
		return 0, err
	}

	// Check if maxID is valid (non-NULL), otherwise return 1
	if !maxID.Valid {
		return 1, nil
	}
	return int(maxID.Int64) + 1, nil
}

func (r *BaseRepository) GetBaseDocumentItemTotalCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := base.BaseDocumentItems().Count(ctx, exec)
	return int(count), err
}