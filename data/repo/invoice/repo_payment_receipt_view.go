// Code generated by ZERP Codegen Util. DO NOT EDIT.

package invoice

import (
	"context"
	"mvrp/data/model/invoice"
	
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

func (r *InvoiceRepository) ListAllPaymentReceiptViews(ctx context.Context, exec boil.ContextExecutor) (invoice.PaymentReceiptViewSlice, error) {
	return invoice.PaymentReceiptViews().All(ctx, exec)
}

func (r *InvoiceRepository) GetPaymentReceiptViewByID(ctx context.Context, exec boil.ContextExecutor, id int) (*invoice.PaymentReceiptView, error) {
	return invoice.PaymentReceiptViews(qm.Where(invoice.PaymentReceiptViewColumns.ID+"=?", id)).One(ctx, exec)
}

func (r *InvoiceRepository) PaymentReceiptViewExists(ctx context.Context, exec boil.ContextExecutor, id int) (bool, error) {
	return invoice.PaymentReceiptViews(qm.Where(invoice.PaymentReceiptViewColumns.ID+"=?", id)).Exists(ctx, exec)
}

func (r *InvoiceRepository) GetPaymentReceiptViewRowsCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := invoice.PaymentReceiptViews().Count(ctx, exec)
	return int(count), err
}

func (r *InvoiceRepository) GetMostRecentPaymentReceiptView(ctx context.Context, exec boil.ContextExecutor) (*invoice.PaymentReceiptView, error) {
	return invoice.PaymentReceiptViews(qm.OrderBy("created_at DESC")).One(ctx, exec)
}