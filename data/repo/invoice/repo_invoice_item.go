// Code generated by MVRP Codegen Util. DO NOT EDIT.

package invoice

import (
	"context"
	"database/sql"
	"mvrp/data/model/invoice"
	"mvrp/domain/dto"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

func (r *InvoiceRepository) ListAllInvoiceItems(ctx context.Context, exec boil.ContextExecutor) (invoice.InvoiceItemSlice, error) {
	return invoice.InvoiceItems().All(ctx, exec)
}

/*
func (r *InvoiceRepository) SearchInvoiceItems(ctx context.Context, exec boil.ContextExecutor, dto dto.SearchInvoiceItemDTO) (invoice.InvoiceItemSlice, error) {
	return invoice.InvoiceItems(
		qm.Limit(dto.ItemsPerPage),
		qm.Offset((dto.ItemsPerPage*dto.Page)-dto.ItemsPerPage),
		// qm.GroupBy("id"),
		qm.OrderBy(dto.OrderBy+" "+"ASC"),
	).All(ctx, exec)
}
*/
func (r *InvoiceRepository) SearchInvoiceItems(ctx context.Context, exec boil.ContextExecutor, dto dto.SearchInvoiceItemDTO) (invoice.InvoiceItemSlice, error) {
	var queryMods []qm.QueryMod

	queryMods = append(queryMods,
		qm.Limit(dto.ItemsPerPage),
		qm.Offset((dto.ItemsPerPage*dto.Page)-dto.ItemsPerPage),
		// qm.GroupBy("id"),
		qm.OrderBy(dto.OrderBy+" "+"ASC"),
	)

	return invoice.InvoiceItems(queryMods...).All(ctx, exec)
}

func (r *InvoiceRepository) GetInvoiceItemByID(ctx context.Context, exec boil.ContextExecutor, id int) (*invoice.InvoiceItem, error) {
	return invoice.FindInvoiceItem(ctx, exec, id)
}

func (r *InvoiceRepository) CreateInvoiceItem(ctx context.Context, exec boil.ContextExecutor, m *invoice.InvoiceItem) error {
	/*
		id, err := r.GetNextEntryInvoiceItemID(ctx, exec)
		if err != nil {
			return err
		}
		m.ID = id
	*/
	return m.Insert(ctx, exec, boil.Infer())
}

func (r *InvoiceRepository) UpdateInvoiceItem(ctx context.Context, exec boil.ContextExecutor, m *invoice.InvoiceItem) error {
	_, err := m.Update(ctx, exec, boil.Infer())
	return err
}

func (r *InvoiceRepository) UpsertInvoiceItem(ctx context.Context, exec boil.ContextExecutor, m *invoice.InvoiceItem) error {
	return m.Upsert(ctx, exec, true, nil, boil.Infer(), boil.Infer())
}

func (r *InvoiceRepository) DeleteInvoiceItem(ctx context.Context, exec boil.ContextExecutor, m *invoice.InvoiceItem) error {
	_, err := m.Delete(ctx, exec)
	return err
}

func (r *InvoiceRepository) InvoiceItemExists(ctx context.Context, exec boil.ContextExecutor, id int) (bool, error) {
	return invoice.InvoiceItemExists(ctx, exec, id)
}

func (r *InvoiceRepository) GetInvoiceItemRowsCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := invoice.InvoiceItems().Count(ctx, exec)
	return int(count), err
}

func (r *InvoiceRepository) GetMostRecentInvoiceItem(ctx context.Context, exec boil.ContextExecutor) (*invoice.InvoiceItem, error) {
	return invoice.InvoiceItems(qm.OrderBy("created_at DESC")).One(ctx, exec)
}

func (r *InvoiceRepository) GetNextEntryInvoiceItemID(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	var maxID sql.NullInt64
	err := invoice.InvoiceItems(qm.Select("MAX(id)")).QueryRow(exec).Scan(&maxID)
	if err != nil {
		return 0, err
	}

	// Check if maxID is valid (non-NULL), otherwise return 1
	if !maxID.Valid {
		return 1, nil
	}
	return int(maxID.Int64) + 1, nil

	/*
		currID, err := r.GetMostRecentInvoiceItem(ctx, exec)
		if err != nil {
			if err == sql.ErrNoRows {
				return 1, nil
			}
			return 0, err
		}
		return currID.ID + 1, nil
	*/
}

func (r *InvoiceRepository) GetInvoiceItemTotalCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := invoice.InvoiceItems().Count(ctx, exec)
	return int(count), err
}