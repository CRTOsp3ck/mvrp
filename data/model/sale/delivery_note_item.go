// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sale

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeliveryNoteItem is an object representing the database table.
type DeliveryNoteItem struct {
	ID                 int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentItemID int    `boil:"base_document_item_id" json:"base_document_item_id" toml:"base_document_item_id" yaml:"base_document_item_id"`
	DeliveryNoteID     int    `boil:"delivery_note_id" json:"delivery_note_id" toml:"delivery_note_id" yaml:"delivery_note_id"`
	GoodsCondition     string `boil:"goods_condition" json:"goods_condition" toml:"goods_condition" yaml:"goods_condition"`

	R *deliveryNoteItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deliveryNoteItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeliveryNoteItemColumns = struct {
	ID                 string
	BaseDocumentItemID string
	DeliveryNoteID     string
	GoodsCondition     string
}{
	ID:                 "id",
	BaseDocumentItemID: "base_document_item_id",
	DeliveryNoteID:     "delivery_note_id",
	GoodsCondition:     "goods_condition",
}

var DeliveryNoteItemTableColumns = struct {
	ID                 string
	BaseDocumentItemID string
	DeliveryNoteID     string
	GoodsCondition     string
}{
	ID:                 "delivery_note_item.id",
	BaseDocumentItemID: "delivery_note_item.base_document_item_id",
	DeliveryNoteID:     "delivery_note_item.delivery_note_id",
	GoodsCondition:     "delivery_note_item.goods_condition",
}

// Generated where

var DeliveryNoteItemWhere = struct {
	ID                 whereHelperint
	BaseDocumentItemID whereHelperint
	DeliveryNoteID     whereHelperint
	GoodsCondition     whereHelperstring
}{
	ID:                 whereHelperint{field: "\"sale\".\"delivery_note_item\".\"id\""},
	BaseDocumentItemID: whereHelperint{field: "\"sale\".\"delivery_note_item\".\"base_document_item_id\""},
	DeliveryNoteID:     whereHelperint{field: "\"sale\".\"delivery_note_item\".\"delivery_note_id\""},
	GoodsCondition:     whereHelperstring{field: "\"sale\".\"delivery_note_item\".\"goods_condition\""},
}

// DeliveryNoteItemRels is where relationship names are stored.
var DeliveryNoteItemRels = struct {
	DeliveryNote string
}{
	DeliveryNote: "DeliveryNote",
}

// deliveryNoteItemR is where relationships are stored.
type deliveryNoteItemR struct {
	DeliveryNote *DeliveryNote `boil:"DeliveryNote" json:"DeliveryNote" toml:"DeliveryNote" yaml:"DeliveryNote"`
}

// NewStruct creates a new relationship struct
func (*deliveryNoteItemR) NewStruct() *deliveryNoteItemR {
	return &deliveryNoteItemR{}
}

func (r *deliveryNoteItemR) GetDeliveryNote() *DeliveryNote {
	if r == nil {
		return nil
	}
	return r.DeliveryNote
}

// deliveryNoteItemL is where Load methods for each relationship are stored.
type deliveryNoteItemL struct{}

var (
	deliveryNoteItemAllColumns            = []string{"id", "base_document_item_id", "delivery_note_id", "goods_condition"}
	deliveryNoteItemColumnsWithoutDefault = []string{"id", "base_document_item_id", "delivery_note_id", "goods_condition"}
	deliveryNoteItemColumnsWithDefault    = []string{}
	deliveryNoteItemPrimaryKeyColumns     = []string{"id"}
	deliveryNoteItemGeneratedColumns      = []string{}
)

type (
	// DeliveryNoteItemSlice is an alias for a slice of pointers to DeliveryNoteItem.
	// This should almost always be used instead of []DeliveryNoteItem.
	DeliveryNoteItemSlice []*DeliveryNoteItem
	// DeliveryNoteItemHook is the signature for custom DeliveryNoteItem hook methods
	DeliveryNoteItemHook func(context.Context, boil.ContextExecutor, *DeliveryNoteItem) error

	deliveryNoteItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deliveryNoteItemType                 = reflect.TypeOf(&DeliveryNoteItem{})
	deliveryNoteItemMapping              = queries.MakeStructMapping(deliveryNoteItemType)
	deliveryNoteItemPrimaryKeyMapping, _ = queries.BindMapping(deliveryNoteItemType, deliveryNoteItemMapping, deliveryNoteItemPrimaryKeyColumns)
	deliveryNoteItemInsertCacheMut       sync.RWMutex
	deliveryNoteItemInsertCache          = make(map[string]insertCache)
	deliveryNoteItemUpdateCacheMut       sync.RWMutex
	deliveryNoteItemUpdateCache          = make(map[string]updateCache)
	deliveryNoteItemUpsertCacheMut       sync.RWMutex
	deliveryNoteItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deliveryNoteItemAfterSelectMu sync.Mutex
var deliveryNoteItemAfterSelectHooks []DeliveryNoteItemHook

var deliveryNoteItemBeforeInsertMu sync.Mutex
var deliveryNoteItemBeforeInsertHooks []DeliveryNoteItemHook
var deliveryNoteItemAfterInsertMu sync.Mutex
var deliveryNoteItemAfterInsertHooks []DeliveryNoteItemHook

var deliveryNoteItemBeforeUpdateMu sync.Mutex
var deliveryNoteItemBeforeUpdateHooks []DeliveryNoteItemHook
var deliveryNoteItemAfterUpdateMu sync.Mutex
var deliveryNoteItemAfterUpdateHooks []DeliveryNoteItemHook

var deliveryNoteItemBeforeDeleteMu sync.Mutex
var deliveryNoteItemBeforeDeleteHooks []DeliveryNoteItemHook
var deliveryNoteItemAfterDeleteMu sync.Mutex
var deliveryNoteItemAfterDeleteHooks []DeliveryNoteItemHook

var deliveryNoteItemBeforeUpsertMu sync.Mutex
var deliveryNoteItemBeforeUpsertHooks []DeliveryNoteItemHook
var deliveryNoteItemAfterUpsertMu sync.Mutex
var deliveryNoteItemAfterUpsertHooks []DeliveryNoteItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeliveryNoteItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeliveryNoteItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeliveryNoteItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeliveryNoteItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeliveryNoteItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeliveryNoteItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeliveryNoteItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeliveryNoteItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeliveryNoteItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeliveryNoteItemHook registers your hook function for all future operations.
func AddDeliveryNoteItemHook(hookPoint boil.HookPoint, deliveryNoteItemHook DeliveryNoteItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deliveryNoteItemAfterSelectMu.Lock()
		deliveryNoteItemAfterSelectHooks = append(deliveryNoteItemAfterSelectHooks, deliveryNoteItemHook)
		deliveryNoteItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		deliveryNoteItemBeforeInsertMu.Lock()
		deliveryNoteItemBeforeInsertHooks = append(deliveryNoteItemBeforeInsertHooks, deliveryNoteItemHook)
		deliveryNoteItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		deliveryNoteItemAfterInsertMu.Lock()
		deliveryNoteItemAfterInsertHooks = append(deliveryNoteItemAfterInsertHooks, deliveryNoteItemHook)
		deliveryNoteItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		deliveryNoteItemBeforeUpdateMu.Lock()
		deliveryNoteItemBeforeUpdateHooks = append(deliveryNoteItemBeforeUpdateHooks, deliveryNoteItemHook)
		deliveryNoteItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		deliveryNoteItemAfterUpdateMu.Lock()
		deliveryNoteItemAfterUpdateHooks = append(deliveryNoteItemAfterUpdateHooks, deliveryNoteItemHook)
		deliveryNoteItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		deliveryNoteItemBeforeDeleteMu.Lock()
		deliveryNoteItemBeforeDeleteHooks = append(deliveryNoteItemBeforeDeleteHooks, deliveryNoteItemHook)
		deliveryNoteItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		deliveryNoteItemAfterDeleteMu.Lock()
		deliveryNoteItemAfterDeleteHooks = append(deliveryNoteItemAfterDeleteHooks, deliveryNoteItemHook)
		deliveryNoteItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		deliveryNoteItemBeforeUpsertMu.Lock()
		deliveryNoteItemBeforeUpsertHooks = append(deliveryNoteItemBeforeUpsertHooks, deliveryNoteItemHook)
		deliveryNoteItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		deliveryNoteItemAfterUpsertMu.Lock()
		deliveryNoteItemAfterUpsertHooks = append(deliveryNoteItemAfterUpsertHooks, deliveryNoteItemHook)
		deliveryNoteItemAfterUpsertMu.Unlock()
	}
}

// One returns a single deliveryNoteItem record from the query.
func (q deliveryNoteItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeliveryNoteItem, error) {
	o := &DeliveryNoteItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: failed to execute a one query for delivery_note_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeliveryNoteItem records from the query.
func (q deliveryNoteItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeliveryNoteItemSlice, error) {
	var o []*DeliveryNoteItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sale: failed to assign all query results to DeliveryNoteItem slice")
	}

	if len(deliveryNoteItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeliveryNoteItem records in the query.
func (q deliveryNoteItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to count delivery_note_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deliveryNoteItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sale: failed to check if delivery_note_item exists")
	}

	return count > 0, nil
}

// DeliveryNote pointed to by the foreign key.
func (o *DeliveryNoteItem) DeliveryNote(mods ...qm.QueryMod) deliveryNoteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DeliveryNoteID),
	}

	queryMods = append(queryMods, mods...)

	return DeliveryNotes(queryMods...)
}

// LoadDeliveryNote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryNoteItemL) LoadDeliveryNote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeliveryNoteItem interface{}, mods queries.Applicator) error {
	var slice []*DeliveryNoteItem
	var object *DeliveryNoteItem

	if singular {
		var ok bool
		object, ok = maybeDeliveryNoteItem.(*DeliveryNoteItem)
		if !ok {
			object = new(DeliveryNoteItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeliveryNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeliveryNoteItem))
			}
		}
	} else {
		s, ok := maybeDeliveryNoteItem.(*[]*DeliveryNoteItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeliveryNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeliveryNoteItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryNoteItemR{}
		}
		args[object.DeliveryNoteID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryNoteItemR{}
			}

			args[obj.DeliveryNoteID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.delivery_note`),
		qm.WhereIn(`sale.delivery_note.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeliveryNote")
	}

	var resultSlice []*DeliveryNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeliveryNote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for delivery_note")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delivery_note")
	}

	if len(deliveryNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliveryNote = foreign
		if foreign.R == nil {
			foreign.R = &deliveryNoteR{}
		}
		foreign.R.DeliveryNoteItems = append(foreign.R.DeliveryNoteItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliveryNoteID == foreign.ID {
				local.R.DeliveryNote = foreign
				if foreign.R == nil {
					foreign.R = &deliveryNoteR{}
				}
				foreign.R.DeliveryNoteItems = append(foreign.R.DeliveryNoteItems, local)
				break
			}
		}
	}

	return nil
}

// SetDeliveryNote of the deliveryNoteItem to the related item.
// Sets o.R.DeliveryNote to related.
// Adds o to related.R.DeliveryNoteItems.
func (o *DeliveryNoteItem) SetDeliveryNote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DeliveryNote) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale\".\"delivery_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"delivery_note_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryNoteItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliveryNoteID = related.ID
	if o.R == nil {
		o.R = &deliveryNoteItemR{
			DeliveryNote: related,
		}
	} else {
		o.R.DeliveryNote = related
	}

	if related.R == nil {
		related.R = &deliveryNoteR{
			DeliveryNoteItems: DeliveryNoteItemSlice{o},
		}
	} else {
		related.R.DeliveryNoteItems = append(related.R.DeliveryNoteItems, o)
	}

	return nil
}

// DeliveryNoteItems retrieves all the records using an executor.
func DeliveryNoteItems(mods ...qm.QueryMod) deliveryNoteItemQuery {
	mods = append(mods, qm.From("\"sale\".\"delivery_note_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale\".\"delivery_note_item\".*"})
	}

	return deliveryNoteItemQuery{q}
}

// FindDeliveryNoteItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeliveryNoteItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeliveryNoteItem, error) {
	deliveryNoteItemObj := &DeliveryNoteItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sale\".\"delivery_note_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deliveryNoteItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: unable to select from delivery_note_item")
	}

	if err = deliveryNoteItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deliveryNoteItemObj, err
	}

	return deliveryNoteItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeliveryNoteItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sale: no delivery_note_item provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryNoteItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deliveryNoteItemInsertCacheMut.RLock()
	cache, cached := deliveryNoteItemInsertCache[key]
	deliveryNoteItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deliveryNoteItemAllColumns,
			deliveryNoteItemColumnsWithDefault,
			deliveryNoteItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deliveryNoteItemType, deliveryNoteItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deliveryNoteItemType, deliveryNoteItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\".\"delivery_note_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\".\"delivery_note_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sale: unable to insert into delivery_note_item")
	}

	if !cached {
		deliveryNoteItemInsertCacheMut.Lock()
		deliveryNoteItemInsertCache[key] = cache
		deliveryNoteItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeliveryNoteItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeliveryNoteItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deliveryNoteItemUpdateCacheMut.RLock()
	cache, cached := deliveryNoteItemUpdateCache[key]
	deliveryNoteItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deliveryNoteItemAllColumns,
			deliveryNoteItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sale: unable to update delivery_note_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sale\".\"delivery_note_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deliveryNoteItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deliveryNoteItemType, deliveryNoteItemMapping, append(wl, deliveryNoteItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update delivery_note_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by update for delivery_note_item")
	}

	if !cached {
		deliveryNoteItemUpdateCacheMut.Lock()
		deliveryNoteItemUpdateCache[key] = cache
		deliveryNoteItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deliveryNoteItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all for delivery_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected for delivery_note_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeliveryNoteItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sale: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sale\".\"delivery_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deliveryNoteItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all in deliveryNoteItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected all in update all deliveryNoteItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeliveryNoteItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sale: no delivery_note_item provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryNoteItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deliveryNoteItemUpsertCacheMut.RLock()
	cache, cached := deliveryNoteItemUpsertCache[key]
	deliveryNoteItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			deliveryNoteItemAllColumns,
			deliveryNoteItemColumnsWithDefault,
			deliveryNoteItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deliveryNoteItemAllColumns,
			deliveryNoteItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sale: unable to upsert delivery_note_item, could not build update column list")
		}

		ret := strmangle.SetComplement(deliveryNoteItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(deliveryNoteItemPrimaryKeyColumns) == 0 {
				return errors.New("sale: unable to upsert delivery_note_item, could not build conflict column list")
			}

			conflict = make([]string, len(deliveryNoteItemPrimaryKeyColumns))
			copy(conflict, deliveryNoteItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\".\"delivery_note_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(deliveryNoteItemType, deliveryNoteItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deliveryNoteItemType, deliveryNoteItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sale: unable to upsert delivery_note_item")
	}

	if !cached {
		deliveryNoteItemUpsertCacheMut.Lock()
		deliveryNoteItemUpsertCache[key] = cache
		deliveryNoteItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeliveryNoteItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeliveryNoteItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sale: no DeliveryNoteItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deliveryNoteItemPrimaryKeyMapping)
	sql := "DELETE FROM \"sale\".\"delivery_note_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete from delivery_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by delete for delivery_note_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deliveryNoteItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sale: no deliveryNoteItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from delivery_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for delivery_note_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeliveryNoteItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deliveryNoteItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sale\".\"delivery_note_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryNoteItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from deliveryNoteItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for delivery_note_item")
	}

	if len(deliveryNoteItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeliveryNoteItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeliveryNoteItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliveryNoteItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeliveryNoteItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sale\".\"delivery_note_item\".* FROM \"sale\".\"delivery_note_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryNoteItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sale: unable to reload all in DeliveryNoteItemSlice")
	}

	*o = slice

	return nil
}

// DeliveryNoteItemExists checks if the DeliveryNoteItem row exists.
func DeliveryNoteItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sale\".\"delivery_note_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sale: unable to check if delivery_note_item exists")
	}

	return exists, nil
}

// Exists checks if the DeliveryNoteItem row exists.
func (o *DeliveryNoteItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeliveryNoteItemExists(ctx, exec, o.ID)
}
