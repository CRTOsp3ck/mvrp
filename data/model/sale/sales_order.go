// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sale

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SalesOrder is an object representing the database table.
type SalesOrder struct {
	ID                             int              `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentID                 int              `boil:"base_document_id" json:"base_document_id" toml:"base_document_id" yaml:"base_document_id"`
	SalesOrderNumber               string           `boil:"sales_order_number" json:"sales_order_number" toml:"sales_order_number" yaml:"sales_order_number"`
	VendorID                       null.Int         `boil:"vendor_id" json:"vendor_id,omitempty" toml:"vendor_id" yaml:"vendor_id,omitempty"`
	CustomerID                     null.Int         `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	SalesRepresentativeInformation null.String      `boil:"sales_representative_information" json:"sales_representative_information,omitempty" toml:"sales_representative_information" yaml:"sales_representative_information,omitempty"`
	ShipToInformation              null.String      `boil:"ship_to_information" json:"ship_to_information,omitempty" toml:"ship_to_information" yaml:"ship_to_information,omitempty"`
	ShipFromInformation            null.String      `boil:"ship_from_information" json:"ship_from_information,omitempty" toml:"ship_from_information" yaml:"ship_from_information,omitempty"`
	PaymentDueDate                 null.Time        `boil:"payment_due_date" json:"payment_due_date,omitempty" toml:"payment_due_date" yaml:"payment_due_date,omitempty"`
	OrderStatus                    SalesOrderStatus `boil:"order_status" json:"order_status" toml:"order_status" yaml:"order_status"`

	R *salesOrderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L salesOrderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SalesOrderColumns = struct {
	ID                             string
	BaseDocumentID                 string
	SalesOrderNumber               string
	VendorID                       string
	CustomerID                     string
	SalesRepresentativeInformation string
	ShipToInformation              string
	ShipFromInformation            string
	PaymentDueDate                 string
	OrderStatus                    string
}{
	ID:                             "id",
	BaseDocumentID:                 "base_document_id",
	SalesOrderNumber:               "sales_order_number",
	VendorID:                       "vendor_id",
	CustomerID:                     "customer_id",
	SalesRepresentativeInformation: "sales_representative_information",
	ShipToInformation:              "ship_to_information",
	ShipFromInformation:            "ship_from_information",
	PaymentDueDate:                 "payment_due_date",
	OrderStatus:                    "order_status",
}

var SalesOrderTableColumns = struct {
	ID                             string
	BaseDocumentID                 string
	SalesOrderNumber               string
	VendorID                       string
	CustomerID                     string
	SalesRepresentativeInformation string
	ShipToInformation              string
	ShipFromInformation            string
	PaymentDueDate                 string
	OrderStatus                    string
}{
	ID:                             "sales_order.id",
	BaseDocumentID:                 "sales_order.base_document_id",
	SalesOrderNumber:               "sales_order.sales_order_number",
	VendorID:                       "sales_order.vendor_id",
	CustomerID:                     "sales_order.customer_id",
	SalesRepresentativeInformation: "sales_order.sales_representative_information",
	ShipToInformation:              "sales_order.ship_to_information",
	ShipFromInformation:            "sales_order.ship_from_information",
	PaymentDueDate:                 "sales_order.payment_due_date",
	OrderStatus:                    "sales_order.order_status",
}

// Generated where

type whereHelperSalesOrderStatus struct{ field string }

func (w whereHelperSalesOrderStatus) EQ(x SalesOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperSalesOrderStatus) NEQ(x SalesOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperSalesOrderStatus) LT(x SalesOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperSalesOrderStatus) LTE(x SalesOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperSalesOrderStatus) GT(x SalesOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperSalesOrderStatus) GTE(x SalesOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperSalesOrderStatus) IN(slice []SalesOrderStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperSalesOrderStatus) NIN(slice []SalesOrderStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SalesOrderWhere = struct {
	ID                             whereHelperint
	BaseDocumentID                 whereHelperint
	SalesOrderNumber               whereHelperstring
	VendorID                       whereHelpernull_Int
	CustomerID                     whereHelpernull_Int
	SalesRepresentativeInformation whereHelpernull_String
	ShipToInformation              whereHelpernull_String
	ShipFromInformation            whereHelpernull_String
	PaymentDueDate                 whereHelpernull_Time
	OrderStatus                    whereHelperSalesOrderStatus
}{
	ID:                             whereHelperint{field: "\"sale\".\"sales_order\".\"id\""},
	BaseDocumentID:                 whereHelperint{field: "\"sale\".\"sales_order\".\"base_document_id\""},
	SalesOrderNumber:               whereHelperstring{field: "\"sale\".\"sales_order\".\"sales_order_number\""},
	VendorID:                       whereHelpernull_Int{field: "\"sale\".\"sales_order\".\"vendor_id\""},
	CustomerID:                     whereHelpernull_Int{field: "\"sale\".\"sales_order\".\"customer_id\""},
	SalesRepresentativeInformation: whereHelpernull_String{field: "\"sale\".\"sales_order\".\"sales_representative_information\""},
	ShipToInformation:              whereHelpernull_String{field: "\"sale\".\"sales_order\".\"ship_to_information\""},
	ShipFromInformation:            whereHelpernull_String{field: "\"sale\".\"sales_order\".\"ship_from_information\""},
	PaymentDueDate:                 whereHelpernull_Time{field: "\"sale\".\"sales_order\".\"payment_due_date\""},
	OrderStatus:                    whereHelperSalesOrderStatus{field: "\"sale\".\"sales_order\".\"order_status\""},
}

// SalesOrderRels is where relationship names are stored.
var SalesOrderRels = struct {
	DeliveryNotes      string
	GoodsReturnNotes   string
	OrderConfirmations string
	SalesOrderItems    string
}{
	DeliveryNotes:      "DeliveryNotes",
	GoodsReturnNotes:   "GoodsReturnNotes",
	OrderConfirmations: "OrderConfirmations",
	SalesOrderItems:    "SalesOrderItems",
}

// salesOrderR is where relationships are stored.
type salesOrderR struct {
	DeliveryNotes      DeliveryNoteSlice      `boil:"DeliveryNotes" json:"DeliveryNotes" toml:"DeliveryNotes" yaml:"DeliveryNotes"`
	GoodsReturnNotes   GoodsReturnNoteSlice   `boil:"GoodsReturnNotes" json:"GoodsReturnNotes" toml:"GoodsReturnNotes" yaml:"GoodsReturnNotes"`
	OrderConfirmations OrderConfirmationSlice `boil:"OrderConfirmations" json:"OrderConfirmations" toml:"OrderConfirmations" yaml:"OrderConfirmations"`
	SalesOrderItems    SalesOrderItemSlice    `boil:"SalesOrderItems" json:"SalesOrderItems" toml:"SalesOrderItems" yaml:"SalesOrderItems"`
}

// NewStruct creates a new relationship struct
func (*salesOrderR) NewStruct() *salesOrderR {
	return &salesOrderR{}
}

func (r *salesOrderR) GetDeliveryNotes() DeliveryNoteSlice {
	if r == nil {
		return nil
	}
	return r.DeliveryNotes
}

func (r *salesOrderR) GetGoodsReturnNotes() GoodsReturnNoteSlice {
	if r == nil {
		return nil
	}
	return r.GoodsReturnNotes
}

func (r *salesOrderR) GetOrderConfirmations() OrderConfirmationSlice {
	if r == nil {
		return nil
	}
	return r.OrderConfirmations
}

func (r *salesOrderR) GetSalesOrderItems() SalesOrderItemSlice {
	if r == nil {
		return nil
	}
	return r.SalesOrderItems
}

// salesOrderL is where Load methods for each relationship are stored.
type salesOrderL struct{}

var (
	salesOrderAllColumns            = []string{"id", "base_document_id", "sales_order_number", "vendor_id", "customer_id", "sales_representative_information", "ship_to_information", "ship_from_information", "payment_due_date", "order_status"}
	salesOrderColumnsWithoutDefault = []string{"id", "base_document_id", "sales_order_number", "order_status"}
	salesOrderColumnsWithDefault    = []string{"vendor_id", "customer_id", "sales_representative_information", "ship_to_information", "ship_from_information", "payment_due_date"}
	salesOrderPrimaryKeyColumns     = []string{"id"}
	salesOrderGeneratedColumns      = []string{}
)

type (
	// SalesOrderSlice is an alias for a slice of pointers to SalesOrder.
	// This should almost always be used instead of []SalesOrder.
	SalesOrderSlice []*SalesOrder
	// SalesOrderHook is the signature for custom SalesOrder hook methods
	SalesOrderHook func(context.Context, boil.ContextExecutor, *SalesOrder) error

	salesOrderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	salesOrderType                 = reflect.TypeOf(&SalesOrder{})
	salesOrderMapping              = queries.MakeStructMapping(salesOrderType)
	salesOrderPrimaryKeyMapping, _ = queries.BindMapping(salesOrderType, salesOrderMapping, salesOrderPrimaryKeyColumns)
	salesOrderInsertCacheMut       sync.RWMutex
	salesOrderInsertCache          = make(map[string]insertCache)
	salesOrderUpdateCacheMut       sync.RWMutex
	salesOrderUpdateCache          = make(map[string]updateCache)
	salesOrderUpsertCacheMut       sync.RWMutex
	salesOrderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var salesOrderAfterSelectMu sync.Mutex
var salesOrderAfterSelectHooks []SalesOrderHook

var salesOrderBeforeInsertMu sync.Mutex
var salesOrderBeforeInsertHooks []SalesOrderHook
var salesOrderAfterInsertMu sync.Mutex
var salesOrderAfterInsertHooks []SalesOrderHook

var salesOrderBeforeUpdateMu sync.Mutex
var salesOrderBeforeUpdateHooks []SalesOrderHook
var salesOrderAfterUpdateMu sync.Mutex
var salesOrderAfterUpdateHooks []SalesOrderHook

var salesOrderBeforeDeleteMu sync.Mutex
var salesOrderBeforeDeleteHooks []SalesOrderHook
var salesOrderAfterDeleteMu sync.Mutex
var salesOrderAfterDeleteHooks []SalesOrderHook

var salesOrderBeforeUpsertMu sync.Mutex
var salesOrderBeforeUpsertHooks []SalesOrderHook
var salesOrderAfterUpsertMu sync.Mutex
var salesOrderAfterUpsertHooks []SalesOrderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SalesOrder) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesOrderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SalesOrder) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesOrderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SalesOrder) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesOrderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SalesOrder) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesOrderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SalesOrder) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesOrderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SalesOrder) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesOrderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SalesOrder) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesOrderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SalesOrder) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesOrderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SalesOrder) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesOrderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSalesOrderHook registers your hook function for all future operations.
func AddSalesOrderHook(hookPoint boil.HookPoint, salesOrderHook SalesOrderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		salesOrderAfterSelectMu.Lock()
		salesOrderAfterSelectHooks = append(salesOrderAfterSelectHooks, salesOrderHook)
		salesOrderAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		salesOrderBeforeInsertMu.Lock()
		salesOrderBeforeInsertHooks = append(salesOrderBeforeInsertHooks, salesOrderHook)
		salesOrderBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		salesOrderAfterInsertMu.Lock()
		salesOrderAfterInsertHooks = append(salesOrderAfterInsertHooks, salesOrderHook)
		salesOrderAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		salesOrderBeforeUpdateMu.Lock()
		salesOrderBeforeUpdateHooks = append(salesOrderBeforeUpdateHooks, salesOrderHook)
		salesOrderBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		salesOrderAfterUpdateMu.Lock()
		salesOrderAfterUpdateHooks = append(salesOrderAfterUpdateHooks, salesOrderHook)
		salesOrderAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		salesOrderBeforeDeleteMu.Lock()
		salesOrderBeforeDeleteHooks = append(salesOrderBeforeDeleteHooks, salesOrderHook)
		salesOrderBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		salesOrderAfterDeleteMu.Lock()
		salesOrderAfterDeleteHooks = append(salesOrderAfterDeleteHooks, salesOrderHook)
		salesOrderAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		salesOrderBeforeUpsertMu.Lock()
		salesOrderBeforeUpsertHooks = append(salesOrderBeforeUpsertHooks, salesOrderHook)
		salesOrderBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		salesOrderAfterUpsertMu.Lock()
		salesOrderAfterUpsertHooks = append(salesOrderAfterUpsertHooks, salesOrderHook)
		salesOrderAfterUpsertMu.Unlock()
	}
}

// One returns a single salesOrder record from the query.
func (q salesOrderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SalesOrder, error) {
	o := &SalesOrder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: failed to execute a one query for sales_order")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SalesOrder records from the query.
func (q salesOrderQuery) All(ctx context.Context, exec boil.ContextExecutor) (SalesOrderSlice, error) {
	var o []*SalesOrder

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sale: failed to assign all query results to SalesOrder slice")
	}

	if len(salesOrderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SalesOrder records in the query.
func (q salesOrderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to count sales_order rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q salesOrderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sale: failed to check if sales_order exists")
	}

	return count > 0, nil
}

// DeliveryNotes retrieves all the delivery_note's DeliveryNotes with an executor.
func (o *SalesOrder) DeliveryNotes(mods ...qm.QueryMod) deliveryNoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale\".\"delivery_note\".\"sales_order_id\"=?", o.ID),
	)

	return DeliveryNotes(queryMods...)
}

// GoodsReturnNotes retrieves all the goods_return_note's GoodsReturnNotes with an executor.
func (o *SalesOrder) GoodsReturnNotes(mods ...qm.QueryMod) goodsReturnNoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale\".\"goods_return_note\".\"sales_order_id\"=?", o.ID),
	)

	return GoodsReturnNotes(queryMods...)
}

// OrderConfirmations retrieves all the order_confirmation's OrderConfirmations with an executor.
func (o *SalesOrder) OrderConfirmations(mods ...qm.QueryMod) orderConfirmationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale\".\"order_confirmation\".\"sales_order_id\"=?", o.ID),
	)

	return OrderConfirmations(queryMods...)
}

// SalesOrderItems retrieves all the sales_order_item's SalesOrderItems with an executor.
func (o *SalesOrder) SalesOrderItems(mods ...qm.QueryMod) salesOrderItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale\".\"sales_order_item\".\"sales_order_id\"=?", o.ID),
	)

	return SalesOrderItems(queryMods...)
}

// LoadDeliveryNotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (salesOrderL) LoadDeliveryNotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalesOrder interface{}, mods queries.Applicator) error {
	var slice []*SalesOrder
	var object *SalesOrder

	if singular {
		var ok bool
		object, ok = maybeSalesOrder.(*SalesOrder)
		if !ok {
			object = new(SalesOrder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSalesOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSalesOrder))
			}
		}
	} else {
		s, ok := maybeSalesOrder.(*[]*SalesOrder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSalesOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSalesOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &salesOrderR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salesOrderR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.delivery_note`),
		qm.WhereIn(`sale.delivery_note.sales_order_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load delivery_note")
	}

	var resultSlice []*DeliveryNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice delivery_note")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on delivery_note")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delivery_note")
	}

	if len(deliveryNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeliveryNotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryNoteR{}
			}
			foreign.R.SalesOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SalesOrderID {
				local.R.DeliveryNotes = append(local.R.DeliveryNotes, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryNoteR{}
				}
				foreign.R.SalesOrder = local
				break
			}
		}
	}

	return nil
}

// LoadGoodsReturnNotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (salesOrderL) LoadGoodsReturnNotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalesOrder interface{}, mods queries.Applicator) error {
	var slice []*SalesOrder
	var object *SalesOrder

	if singular {
		var ok bool
		object, ok = maybeSalesOrder.(*SalesOrder)
		if !ok {
			object = new(SalesOrder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSalesOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSalesOrder))
			}
		}
	} else {
		s, ok := maybeSalesOrder.(*[]*SalesOrder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSalesOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSalesOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &salesOrderR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salesOrderR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.goods_return_note`),
		qm.WhereIn(`sale.goods_return_note.sales_order_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load goods_return_note")
	}

	var resultSlice []*GoodsReturnNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice goods_return_note")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on goods_return_note")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for goods_return_note")
	}

	if len(goodsReturnNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GoodsReturnNotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &goodsReturnNoteR{}
			}
			foreign.R.SalesOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SalesOrderID) {
				local.R.GoodsReturnNotes = append(local.R.GoodsReturnNotes, foreign)
				if foreign.R == nil {
					foreign.R = &goodsReturnNoteR{}
				}
				foreign.R.SalesOrder = local
				break
			}
		}
	}

	return nil
}

// LoadOrderConfirmations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (salesOrderL) LoadOrderConfirmations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalesOrder interface{}, mods queries.Applicator) error {
	var slice []*SalesOrder
	var object *SalesOrder

	if singular {
		var ok bool
		object, ok = maybeSalesOrder.(*SalesOrder)
		if !ok {
			object = new(SalesOrder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSalesOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSalesOrder))
			}
		}
	} else {
		s, ok := maybeSalesOrder.(*[]*SalesOrder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSalesOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSalesOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &salesOrderR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salesOrderR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.order_confirmation`),
		qm.WhereIn(`sale.order_confirmation.sales_order_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_confirmation")
	}

	var resultSlice []*OrderConfirmation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_confirmation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_confirmation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_confirmation")
	}

	if len(orderConfirmationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderConfirmations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderConfirmationR{}
			}
			foreign.R.SalesOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SalesOrderID {
				local.R.OrderConfirmations = append(local.R.OrderConfirmations, foreign)
				if foreign.R == nil {
					foreign.R = &orderConfirmationR{}
				}
				foreign.R.SalesOrder = local
				break
			}
		}
	}

	return nil
}

// LoadSalesOrderItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (salesOrderL) LoadSalesOrderItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalesOrder interface{}, mods queries.Applicator) error {
	var slice []*SalesOrder
	var object *SalesOrder

	if singular {
		var ok bool
		object, ok = maybeSalesOrder.(*SalesOrder)
		if !ok {
			object = new(SalesOrder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSalesOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSalesOrder))
			}
		}
	} else {
		s, ok := maybeSalesOrder.(*[]*SalesOrder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSalesOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSalesOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &salesOrderR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salesOrderR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.sales_order_item`),
		qm.WhereIn(`sale.sales_order_item.sales_order_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sales_order_item")
	}

	var resultSlice []*SalesOrderItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sales_order_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sales_order_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sales_order_item")
	}

	if len(salesOrderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesOrderItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &salesOrderItemR{}
			}
			foreign.R.SalesOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SalesOrderID {
				local.R.SalesOrderItems = append(local.R.SalesOrderItems, foreign)
				if foreign.R == nil {
					foreign.R = &salesOrderItemR{}
				}
				foreign.R.SalesOrder = local
				break
			}
		}
	}

	return nil
}

// AddDeliveryNotes adds the given related objects to the existing relationships
// of the sales_order, optionally inserting them as new records.
// Appends related to o.R.DeliveryNotes.
// Sets related.R.SalesOrder appropriately.
func (o *SalesOrder) AddDeliveryNotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeliveryNote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesOrderID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale\".\"delivery_note\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sales_order_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryNotePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesOrderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &salesOrderR{
			DeliveryNotes: related,
		}
	} else {
		o.R.DeliveryNotes = append(o.R.DeliveryNotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryNoteR{
				SalesOrder: o,
			}
		} else {
			rel.R.SalesOrder = o
		}
	}
	return nil
}

// AddGoodsReturnNotes adds the given related objects to the existing relationships
// of the sales_order, optionally inserting them as new records.
// Appends related to o.R.GoodsReturnNotes.
// Sets related.R.SalesOrder appropriately.
func (o *SalesOrder) AddGoodsReturnNotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GoodsReturnNote) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SalesOrderID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale\".\"goods_return_note\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sales_order_id"}),
				strmangle.WhereClause("\"", "\"", 2, goodsReturnNotePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SalesOrderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &salesOrderR{
			GoodsReturnNotes: related,
		}
	} else {
		o.R.GoodsReturnNotes = append(o.R.GoodsReturnNotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &goodsReturnNoteR{
				SalesOrder: o,
			}
		} else {
			rel.R.SalesOrder = o
		}
	}
	return nil
}

// SetGoodsReturnNotes removes all previously related items of the
// sales_order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SalesOrder's GoodsReturnNotes accordingly.
// Replaces o.R.GoodsReturnNotes with related.
// Sets related.R.SalesOrder's GoodsReturnNotes accordingly.
func (o *SalesOrder) SetGoodsReturnNotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GoodsReturnNote) error {
	query := "update \"sale\".\"goods_return_note\" set \"sales_order_id\" = null where \"sales_order_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GoodsReturnNotes {
			queries.SetScanner(&rel.SalesOrderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SalesOrder = nil
		}
		o.R.GoodsReturnNotes = nil
	}

	return o.AddGoodsReturnNotes(ctx, exec, insert, related...)
}

// RemoveGoodsReturnNotes relationships from objects passed in.
// Removes related items from R.GoodsReturnNotes (uses pointer comparison, removal does not keep order)
// Sets related.R.SalesOrder.
func (o *SalesOrder) RemoveGoodsReturnNotes(ctx context.Context, exec boil.ContextExecutor, related ...*GoodsReturnNote) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SalesOrderID, nil)
		if rel.R != nil {
			rel.R.SalesOrder = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("sales_order_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GoodsReturnNotes {
			if rel != ri {
				continue
			}

			ln := len(o.R.GoodsReturnNotes)
			if ln > 1 && i < ln-1 {
				o.R.GoodsReturnNotes[i] = o.R.GoodsReturnNotes[ln-1]
			}
			o.R.GoodsReturnNotes = o.R.GoodsReturnNotes[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderConfirmations adds the given related objects to the existing relationships
// of the sales_order, optionally inserting them as new records.
// Appends related to o.R.OrderConfirmations.
// Sets related.R.SalesOrder appropriately.
func (o *SalesOrder) AddOrderConfirmations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderConfirmation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesOrderID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale\".\"order_confirmation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sales_order_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderConfirmationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesOrderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &salesOrderR{
			OrderConfirmations: related,
		}
	} else {
		o.R.OrderConfirmations = append(o.R.OrderConfirmations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderConfirmationR{
				SalesOrder: o,
			}
		} else {
			rel.R.SalesOrder = o
		}
	}
	return nil
}

// AddSalesOrderItems adds the given related objects to the existing relationships
// of the sales_order, optionally inserting them as new records.
// Appends related to o.R.SalesOrderItems.
// Sets related.R.SalesOrder appropriately.
func (o *SalesOrder) AddSalesOrderItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SalesOrderItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesOrderID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale\".\"sales_order_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sales_order_id"}),
				strmangle.WhereClause("\"", "\"", 2, salesOrderItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesOrderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &salesOrderR{
			SalesOrderItems: related,
		}
	} else {
		o.R.SalesOrderItems = append(o.R.SalesOrderItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &salesOrderItemR{
				SalesOrder: o,
			}
		} else {
			rel.R.SalesOrder = o
		}
	}
	return nil
}

// SalesOrders retrieves all the records using an executor.
func SalesOrders(mods ...qm.QueryMod) salesOrderQuery {
	mods = append(mods, qm.From("\"sale\".\"sales_order\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale\".\"sales_order\".*"})
	}

	return salesOrderQuery{q}
}

// FindSalesOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSalesOrder(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SalesOrder, error) {
	salesOrderObj := &SalesOrder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sale\".\"sales_order\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, salesOrderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: unable to select from sales_order")
	}

	if err = salesOrderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return salesOrderObj, err
	}

	return salesOrderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SalesOrder) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sale: no sales_order provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salesOrderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	salesOrderInsertCacheMut.RLock()
	cache, cached := salesOrderInsertCache[key]
	salesOrderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			salesOrderAllColumns,
			salesOrderColumnsWithDefault,
			salesOrderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(salesOrderType, salesOrderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(salesOrderType, salesOrderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\".\"sales_order\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\".\"sales_order\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sale: unable to insert into sales_order")
	}

	if !cached {
		salesOrderInsertCacheMut.Lock()
		salesOrderInsertCache[key] = cache
		salesOrderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SalesOrder.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SalesOrder) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	salesOrderUpdateCacheMut.RLock()
	cache, cached := salesOrderUpdateCache[key]
	salesOrderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			salesOrderAllColumns,
			salesOrderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sale: unable to update sales_order, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sale\".\"sales_order\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, salesOrderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(salesOrderType, salesOrderMapping, append(wl, salesOrderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update sales_order row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by update for sales_order")
	}

	if !cached {
		salesOrderUpdateCacheMut.Lock()
		salesOrderUpdateCache[key] = cache
		salesOrderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q salesOrderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all for sales_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected for sales_order")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SalesOrderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sale: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salesOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sale\".\"sales_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, salesOrderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all in salesOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected all in update all salesOrder")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SalesOrder) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sale: no sales_order provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salesOrderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	salesOrderUpsertCacheMut.RLock()
	cache, cached := salesOrderUpsertCache[key]
	salesOrderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			salesOrderAllColumns,
			salesOrderColumnsWithDefault,
			salesOrderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			salesOrderAllColumns,
			salesOrderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sale: unable to upsert sales_order, could not build update column list")
		}

		ret := strmangle.SetComplement(salesOrderAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(salesOrderPrimaryKeyColumns) == 0 {
				return errors.New("sale: unable to upsert sales_order, could not build conflict column list")
			}

			conflict = make([]string, len(salesOrderPrimaryKeyColumns))
			copy(conflict, salesOrderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\".\"sales_order\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(salesOrderType, salesOrderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(salesOrderType, salesOrderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sale: unable to upsert sales_order")
	}

	if !cached {
		salesOrderUpsertCacheMut.Lock()
		salesOrderUpsertCache[key] = cache
		salesOrderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SalesOrder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SalesOrder) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sale: no SalesOrder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), salesOrderPrimaryKeyMapping)
	sql := "DELETE FROM \"sale\".\"sales_order\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete from sales_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by delete for sales_order")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q salesOrderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sale: no salesOrderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from sales_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for sales_order")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SalesOrderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(salesOrderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salesOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sale\".\"sales_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, salesOrderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from salesOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for sales_order")
	}

	if len(salesOrderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SalesOrder) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSalesOrder(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SalesOrderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SalesOrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salesOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sale\".\"sales_order\".* FROM \"sale\".\"sales_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, salesOrderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sale: unable to reload all in SalesOrderSlice")
	}

	*o = slice

	return nil
}

// SalesOrderExists checks if the SalesOrder row exists.
func SalesOrderExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sale\".\"sales_order\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sale: unable to check if sales_order exists")
	}

	return exists, nil
}

// Exists checks if the SalesOrder row exists.
func (o *SalesOrder) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SalesOrderExists(ctx, exec, o.ID)
}
