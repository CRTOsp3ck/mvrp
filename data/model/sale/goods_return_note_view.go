// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sale

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GoodsReturnNoteView is an object representing the database table.
type GoodsReturnNoteView struct {
	ID                           null.Int    `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	BaseDocumentID               null.Int    `boil:"base_document_id" json:"base_document_id,omitempty" toml:"base_document_id" yaml:"base_document_id,omitempty"`
	GoodsReturnNoteNumber        null.String `boil:"goods_return_note_number" json:"goods_return_note_number,omitempty" toml:"goods_return_note_number" yaml:"goods_return_note_number,omitempty"`
	SalesOrderID                 null.Int    `boil:"sales_order_id" json:"sales_order_id,omitempty" toml:"sales_order_id" yaml:"sales_order_id,omitempty"`
	InvoiceID                    null.Int    `boil:"invoice_id" json:"invoice_id,omitempty" toml:"invoice_id" yaml:"invoice_id,omitempty"`
	CreditNoteID                 null.Int    `boil:"credit_note_id" json:"credit_note_id,omitempty" toml:"credit_note_id" yaml:"credit_note_id,omitempty"`
	RmaID                        null.Int    `boil:"rma_id" json:"rma_id,omitempty" toml:"rma_id" yaml:"rma_id,omitempty"`
	ReturnDate                   null.Time   `boil:"return_date" json:"return_date,omitempty" toml:"return_date" yaml:"return_date,omitempty"`
	ReturnedByCustomerID         null.Int    `boil:"returned_by_customer_id" json:"returned_by_customer_id,omitempty" toml:"returned_by_customer_id" yaml:"returned_by_customer_id,omitempty"`
	ReceivingLocationInformation null.JSON   `boil:"receiving_location_information" json:"receiving_location_information,omitempty" toml:"receiving_location_information" yaml:"receiving_location_information,omitempty"`
	ReceivedByEmployeeID         null.Int    `boil:"received_by_employee_id" json:"received_by_employee_id,omitempty" toml:"received_by_employee_id" yaml:"received_by_employee_id,omitempty"`
	OverallGoodsCondition        null.String `boil:"overall_goods_condition" json:"overall_goods_condition,omitempty" toml:"overall_goods_condition" yaml:"overall_goods_condition,omitempty"`
	BaseDocument                 null.JSON   `boil:"base_document" json:"base_document,omitempty" toml:"base_document" yaml:"base_document,omitempty"`
	GoodsReturnNoteItems         null.JSON   `boil:"goods_return_note_items" json:"goods_return_note_items,omitempty" toml:"goods_return_note_items" yaml:"goods_return_note_items,omitempty"`
}

var GoodsReturnNoteViewColumns = struct {
	ID                           string
	BaseDocumentID               string
	GoodsReturnNoteNumber        string
	SalesOrderID                 string
	InvoiceID                    string
	CreditNoteID                 string
	RmaID                        string
	ReturnDate                   string
	ReturnedByCustomerID         string
	ReceivingLocationInformation string
	ReceivedByEmployeeID         string
	OverallGoodsCondition        string
	BaseDocument                 string
	GoodsReturnNoteItems         string
}{
	ID:                           "id",
	BaseDocumentID:               "base_document_id",
	GoodsReturnNoteNumber:        "goods_return_note_number",
	SalesOrderID:                 "sales_order_id",
	InvoiceID:                    "invoice_id",
	CreditNoteID:                 "credit_note_id",
	RmaID:                        "rma_id",
	ReturnDate:                   "return_date",
	ReturnedByCustomerID:         "returned_by_customer_id",
	ReceivingLocationInformation: "receiving_location_information",
	ReceivedByEmployeeID:         "received_by_employee_id",
	OverallGoodsCondition:        "overall_goods_condition",
	BaseDocument:                 "base_document",
	GoodsReturnNoteItems:         "goods_return_note_items",
}

var GoodsReturnNoteViewTableColumns = struct {
	ID                           string
	BaseDocumentID               string
	GoodsReturnNoteNumber        string
	SalesOrderID                 string
	InvoiceID                    string
	CreditNoteID                 string
	RmaID                        string
	ReturnDate                   string
	ReturnedByCustomerID         string
	ReceivingLocationInformation string
	ReceivedByEmployeeID         string
	OverallGoodsCondition        string
	BaseDocument                 string
	GoodsReturnNoteItems         string
}{
	ID:                           "goods_return_note_view.id",
	BaseDocumentID:               "goods_return_note_view.base_document_id",
	GoodsReturnNoteNumber:        "goods_return_note_view.goods_return_note_number",
	SalesOrderID:                 "goods_return_note_view.sales_order_id",
	InvoiceID:                    "goods_return_note_view.invoice_id",
	CreditNoteID:                 "goods_return_note_view.credit_note_id",
	RmaID:                        "goods_return_note_view.rma_id",
	ReturnDate:                   "goods_return_note_view.return_date",
	ReturnedByCustomerID:         "goods_return_note_view.returned_by_customer_id",
	ReceivingLocationInformation: "goods_return_note_view.receiving_location_information",
	ReceivedByEmployeeID:         "goods_return_note_view.received_by_employee_id",
	OverallGoodsCondition:        "goods_return_note_view.overall_goods_condition",
	BaseDocument:                 "goods_return_note_view.base_document",
	GoodsReturnNoteItems:         "goods_return_note_view.goods_return_note_items",
}

// Generated where

var GoodsReturnNoteViewWhere = struct {
	ID                           whereHelpernull_Int
	BaseDocumentID               whereHelpernull_Int
	GoodsReturnNoteNumber        whereHelpernull_String
	SalesOrderID                 whereHelpernull_Int
	InvoiceID                    whereHelpernull_Int
	CreditNoteID                 whereHelpernull_Int
	RmaID                        whereHelpernull_Int
	ReturnDate                   whereHelpernull_Time
	ReturnedByCustomerID         whereHelpernull_Int
	ReceivingLocationInformation whereHelpernull_JSON
	ReceivedByEmployeeID         whereHelpernull_Int
	OverallGoodsCondition        whereHelpernull_String
	BaseDocument                 whereHelpernull_JSON
	GoodsReturnNoteItems         whereHelpernull_JSON
}{
	ID:                           whereHelpernull_Int{field: "\"sale\".\"goods_return_note_view\".\"id\""},
	BaseDocumentID:               whereHelpernull_Int{field: "\"sale\".\"goods_return_note_view\".\"base_document_id\""},
	GoodsReturnNoteNumber:        whereHelpernull_String{field: "\"sale\".\"goods_return_note_view\".\"goods_return_note_number\""},
	SalesOrderID:                 whereHelpernull_Int{field: "\"sale\".\"goods_return_note_view\".\"sales_order_id\""},
	InvoiceID:                    whereHelpernull_Int{field: "\"sale\".\"goods_return_note_view\".\"invoice_id\""},
	CreditNoteID:                 whereHelpernull_Int{field: "\"sale\".\"goods_return_note_view\".\"credit_note_id\""},
	RmaID:                        whereHelpernull_Int{field: "\"sale\".\"goods_return_note_view\".\"rma_id\""},
	ReturnDate:                   whereHelpernull_Time{field: "\"sale\".\"goods_return_note_view\".\"return_date\""},
	ReturnedByCustomerID:         whereHelpernull_Int{field: "\"sale\".\"goods_return_note_view\".\"returned_by_customer_id\""},
	ReceivingLocationInformation: whereHelpernull_JSON{field: "\"sale\".\"goods_return_note_view\".\"receiving_location_information\""},
	ReceivedByEmployeeID:         whereHelpernull_Int{field: "\"sale\".\"goods_return_note_view\".\"received_by_employee_id\""},
	OverallGoodsCondition:        whereHelpernull_String{field: "\"sale\".\"goods_return_note_view\".\"overall_goods_condition\""},
	BaseDocument:                 whereHelpernull_JSON{field: "\"sale\".\"goods_return_note_view\".\"base_document\""},
	GoodsReturnNoteItems:         whereHelpernull_JSON{field: "\"sale\".\"goods_return_note_view\".\"goods_return_note_items\""},
}

var (
	goodsReturnNoteViewAllColumns            = []string{"id", "base_document_id", "goods_return_note_number", "sales_order_id", "invoice_id", "credit_note_id", "rma_id", "return_date", "returned_by_customer_id", "receiving_location_information", "received_by_employee_id", "overall_goods_condition", "base_document", "goods_return_note_items"}
	goodsReturnNoteViewColumnsWithoutDefault = []string{}
	goodsReturnNoteViewColumnsWithDefault    = []string{"id", "base_document_id", "goods_return_note_number", "sales_order_id", "invoice_id", "credit_note_id", "rma_id", "return_date", "returned_by_customer_id", "receiving_location_information", "received_by_employee_id", "overall_goods_condition", "base_document", "goods_return_note_items"}
	goodsReturnNoteViewPrimaryKeyColumns     = []string{}
	goodsReturnNoteViewGeneratedColumns      = []string{}
)

type (
	// GoodsReturnNoteViewSlice is an alias for a slice of pointers to GoodsReturnNoteView.
	// This should almost always be used instead of []GoodsReturnNoteView.
	GoodsReturnNoteViewSlice []*GoodsReturnNoteView
	// GoodsReturnNoteViewHook is the signature for custom GoodsReturnNoteView hook methods
	GoodsReturnNoteViewHook func(context.Context, boil.ContextExecutor, *GoodsReturnNoteView) error

	goodsReturnNoteViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goodsReturnNoteViewType           = reflect.TypeOf(&GoodsReturnNoteView{})
	goodsReturnNoteViewMapping        = queries.MakeStructMapping(goodsReturnNoteViewType)
	goodsReturnNoteViewInsertCacheMut sync.RWMutex
	goodsReturnNoteViewInsertCache    = make(map[string]insertCache)
	goodsReturnNoteViewUpdateCacheMut sync.RWMutex
	goodsReturnNoteViewUpdateCache    = make(map[string]updateCache)
	goodsReturnNoteViewUpsertCacheMut sync.RWMutex
	goodsReturnNoteViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var goodsReturnNoteViewAfterSelectMu sync.Mutex
var goodsReturnNoteViewAfterSelectHooks []GoodsReturnNoteViewHook

var goodsReturnNoteViewBeforeInsertMu sync.Mutex
var goodsReturnNoteViewBeforeInsertHooks []GoodsReturnNoteViewHook
var goodsReturnNoteViewAfterInsertMu sync.Mutex
var goodsReturnNoteViewAfterInsertHooks []GoodsReturnNoteViewHook

var goodsReturnNoteViewBeforeUpsertMu sync.Mutex
var goodsReturnNoteViewBeforeUpsertHooks []GoodsReturnNoteViewHook
var goodsReturnNoteViewAfterUpsertMu sync.Mutex
var goodsReturnNoteViewAfterUpsertHooks []GoodsReturnNoteViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoodsReturnNoteView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoodsReturnNoteView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoodsReturnNoteView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoodsReturnNoteView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoodsReturnNoteView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoodsReturnNoteViewHook registers your hook function for all future operations.
func AddGoodsReturnNoteViewHook(hookPoint boil.HookPoint, goodsReturnNoteViewHook GoodsReturnNoteViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goodsReturnNoteViewAfterSelectMu.Lock()
		goodsReturnNoteViewAfterSelectHooks = append(goodsReturnNoteViewAfterSelectHooks, goodsReturnNoteViewHook)
		goodsReturnNoteViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goodsReturnNoteViewBeforeInsertMu.Lock()
		goodsReturnNoteViewBeforeInsertHooks = append(goodsReturnNoteViewBeforeInsertHooks, goodsReturnNoteViewHook)
		goodsReturnNoteViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goodsReturnNoteViewAfterInsertMu.Lock()
		goodsReturnNoteViewAfterInsertHooks = append(goodsReturnNoteViewAfterInsertHooks, goodsReturnNoteViewHook)
		goodsReturnNoteViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		goodsReturnNoteViewBeforeUpsertMu.Lock()
		goodsReturnNoteViewBeforeUpsertHooks = append(goodsReturnNoteViewBeforeUpsertHooks, goodsReturnNoteViewHook)
		goodsReturnNoteViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goodsReturnNoteViewAfterUpsertMu.Lock()
		goodsReturnNoteViewAfterUpsertHooks = append(goodsReturnNoteViewAfterUpsertHooks, goodsReturnNoteViewHook)
		goodsReturnNoteViewAfterUpsertMu.Unlock()
	}
}

// One returns a single goodsReturnNoteView record from the query.
func (q goodsReturnNoteViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoodsReturnNoteView, error) {
	o := &GoodsReturnNoteView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: failed to execute a one query for goods_return_note_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoodsReturnNoteView records from the query.
func (q goodsReturnNoteViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoodsReturnNoteViewSlice, error) {
	var o []*GoodsReturnNoteView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sale: failed to assign all query results to GoodsReturnNoteView slice")
	}

	if len(goodsReturnNoteViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoodsReturnNoteView records in the query.
func (q goodsReturnNoteViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to count goods_return_note_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goodsReturnNoteViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sale: failed to check if goods_return_note_view exists")
	}

	return count > 0, nil
}

// GoodsReturnNoteViews retrieves all the records using an executor.
func GoodsReturnNoteViews(mods ...qm.QueryMod) goodsReturnNoteViewQuery {
	mods = append(mods, qm.From("\"sale\".\"goods_return_note_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale\".\"goods_return_note_view\".*"})
	}

	return goodsReturnNoteViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoodsReturnNoteView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sale: no goods_return_note_view provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReturnNoteViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goodsReturnNoteViewInsertCacheMut.RLock()
	cache, cached := goodsReturnNoteViewInsertCache[key]
	goodsReturnNoteViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goodsReturnNoteViewAllColumns,
			goodsReturnNoteViewColumnsWithDefault,
			goodsReturnNoteViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goodsReturnNoteViewType, goodsReturnNoteViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goodsReturnNoteViewType, goodsReturnNoteViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\".\"goods_return_note_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\".\"goods_return_note_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sale: unable to insert into goods_return_note_view")
	}

	if !cached {
		goodsReturnNoteViewInsertCacheMut.Lock()
		goodsReturnNoteViewInsertCache[key] = cache
		goodsReturnNoteViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoodsReturnNoteView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sale: no goods_return_note_view provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReturnNoteViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goodsReturnNoteViewUpsertCacheMut.RLock()
	cache, cached := goodsReturnNoteViewUpsertCache[key]
	goodsReturnNoteViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goodsReturnNoteViewAllColumns,
			goodsReturnNoteViewColumnsWithDefault,
			goodsReturnNoteViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goodsReturnNoteViewAllColumns,
			goodsReturnNoteViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sale: unable to upsert goods_return_note_view, could not build update column list")
		}

		ret := strmangle.SetComplement(goodsReturnNoteViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goodsReturnNoteViewPrimaryKeyColumns) == 0 {
				return errors.New("sale: unable to upsert goods_return_note_view, could not build conflict column list")
			}

			conflict = make([]string, len(goodsReturnNoteViewPrimaryKeyColumns))
			copy(conflict, goodsReturnNoteViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\".\"goods_return_note_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goodsReturnNoteViewType, goodsReturnNoteViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goodsReturnNoteViewType, goodsReturnNoteViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sale: unable to upsert goods_return_note_view")
	}

	if !cached {
		goodsReturnNoteViewUpsertCacheMut.Lock()
		goodsReturnNoteViewUpsertCache[key] = cache
		goodsReturnNoteViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
