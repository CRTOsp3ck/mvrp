// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sale

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SalesQuotationItemView is an object representing the database table.
type SalesQuotationItemView struct {
	ID                 null.Int  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	BaseDocumentItemID null.Int  `boil:"base_document_item_id" json:"base_document_item_id,omitempty" toml:"base_document_item_id" yaml:"base_document_item_id,omitempty"`
	SalesQuotationID   null.Int  `boil:"sales_quotation_id" json:"sales_quotation_id,omitempty" toml:"sales_quotation_id" yaml:"sales_quotation_id,omitempty"`
	BaseDocumentItem   null.JSON `boil:"base_document_item" json:"base_document_item,omitempty" toml:"base_document_item" yaml:"base_document_item,omitempty"`
}

var SalesQuotationItemViewColumns = struct {
	ID                 string
	BaseDocumentItemID string
	SalesQuotationID   string
	BaseDocumentItem   string
}{
	ID:                 "id",
	BaseDocumentItemID: "base_document_item_id",
	SalesQuotationID:   "sales_quotation_id",
	BaseDocumentItem:   "base_document_item",
}

var SalesQuotationItemViewTableColumns = struct {
	ID                 string
	BaseDocumentItemID string
	SalesQuotationID   string
	BaseDocumentItem   string
}{
	ID:                 "sales_quotation_item_view.id",
	BaseDocumentItemID: "sales_quotation_item_view.base_document_item_id",
	SalesQuotationID:   "sales_quotation_item_view.sales_quotation_id",
	BaseDocumentItem:   "sales_quotation_item_view.base_document_item",
}

// Generated where

var SalesQuotationItemViewWhere = struct {
	ID                 whereHelpernull_Int
	BaseDocumentItemID whereHelpernull_Int
	SalesQuotationID   whereHelpernull_Int
	BaseDocumentItem   whereHelpernull_JSON
}{
	ID:                 whereHelpernull_Int{field: "\"sale\".\"sales_quotation_item_view\".\"id\""},
	BaseDocumentItemID: whereHelpernull_Int{field: "\"sale\".\"sales_quotation_item_view\".\"base_document_item_id\""},
	SalesQuotationID:   whereHelpernull_Int{field: "\"sale\".\"sales_quotation_item_view\".\"sales_quotation_id\""},
	BaseDocumentItem:   whereHelpernull_JSON{field: "\"sale\".\"sales_quotation_item_view\".\"base_document_item\""},
}

var (
	salesQuotationItemViewAllColumns            = []string{"id", "base_document_item_id", "sales_quotation_id", "base_document_item"}
	salesQuotationItemViewColumnsWithoutDefault = []string{}
	salesQuotationItemViewColumnsWithDefault    = []string{"id", "base_document_item_id", "sales_quotation_id", "base_document_item"}
	salesQuotationItemViewPrimaryKeyColumns     = []string{}
	salesQuotationItemViewGeneratedColumns      = []string{}
)

type (
	// SalesQuotationItemViewSlice is an alias for a slice of pointers to SalesQuotationItemView.
	// This should almost always be used instead of []SalesQuotationItemView.
	SalesQuotationItemViewSlice []*SalesQuotationItemView
	// SalesQuotationItemViewHook is the signature for custom SalesQuotationItemView hook methods
	SalesQuotationItemViewHook func(context.Context, boil.ContextExecutor, *SalesQuotationItemView) error

	salesQuotationItemViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	salesQuotationItemViewType           = reflect.TypeOf(&SalesQuotationItemView{})
	salesQuotationItemViewMapping        = queries.MakeStructMapping(salesQuotationItemViewType)
	salesQuotationItemViewInsertCacheMut sync.RWMutex
	salesQuotationItemViewInsertCache    = make(map[string]insertCache)
	salesQuotationItemViewUpdateCacheMut sync.RWMutex
	salesQuotationItemViewUpdateCache    = make(map[string]updateCache)
	salesQuotationItemViewUpsertCacheMut sync.RWMutex
	salesQuotationItemViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var salesQuotationItemViewAfterSelectMu sync.Mutex
var salesQuotationItemViewAfterSelectHooks []SalesQuotationItemViewHook

var salesQuotationItemViewBeforeInsertMu sync.Mutex
var salesQuotationItemViewBeforeInsertHooks []SalesQuotationItemViewHook
var salesQuotationItemViewAfterInsertMu sync.Mutex
var salesQuotationItemViewAfterInsertHooks []SalesQuotationItemViewHook

var salesQuotationItemViewBeforeUpsertMu sync.Mutex
var salesQuotationItemViewBeforeUpsertHooks []SalesQuotationItemViewHook
var salesQuotationItemViewAfterUpsertMu sync.Mutex
var salesQuotationItemViewAfterUpsertHooks []SalesQuotationItemViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SalesQuotationItemView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SalesQuotationItemView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SalesQuotationItemView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SalesQuotationItemView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SalesQuotationItemView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSalesQuotationItemViewHook registers your hook function for all future operations.
func AddSalesQuotationItemViewHook(hookPoint boil.HookPoint, salesQuotationItemViewHook SalesQuotationItemViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		salesQuotationItemViewAfterSelectMu.Lock()
		salesQuotationItemViewAfterSelectHooks = append(salesQuotationItemViewAfterSelectHooks, salesQuotationItemViewHook)
		salesQuotationItemViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		salesQuotationItemViewBeforeInsertMu.Lock()
		salesQuotationItemViewBeforeInsertHooks = append(salesQuotationItemViewBeforeInsertHooks, salesQuotationItemViewHook)
		salesQuotationItemViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		salesQuotationItemViewAfterInsertMu.Lock()
		salesQuotationItemViewAfterInsertHooks = append(salesQuotationItemViewAfterInsertHooks, salesQuotationItemViewHook)
		salesQuotationItemViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		salesQuotationItemViewBeforeUpsertMu.Lock()
		salesQuotationItemViewBeforeUpsertHooks = append(salesQuotationItemViewBeforeUpsertHooks, salesQuotationItemViewHook)
		salesQuotationItemViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		salesQuotationItemViewAfterUpsertMu.Lock()
		salesQuotationItemViewAfterUpsertHooks = append(salesQuotationItemViewAfterUpsertHooks, salesQuotationItemViewHook)
		salesQuotationItemViewAfterUpsertMu.Unlock()
	}
}

// One returns a single salesQuotationItemView record from the query.
func (q salesQuotationItemViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SalesQuotationItemView, error) {
	o := &SalesQuotationItemView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: failed to execute a one query for sales_quotation_item_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SalesQuotationItemView records from the query.
func (q salesQuotationItemViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (SalesQuotationItemViewSlice, error) {
	var o []*SalesQuotationItemView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sale: failed to assign all query results to SalesQuotationItemView slice")
	}

	if len(salesQuotationItemViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SalesQuotationItemView records in the query.
func (q salesQuotationItemViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to count sales_quotation_item_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q salesQuotationItemViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sale: failed to check if sales_quotation_item_view exists")
	}

	return count > 0, nil
}

// SalesQuotationItemViews retrieves all the records using an executor.
func SalesQuotationItemViews(mods ...qm.QueryMod) salesQuotationItemViewQuery {
	mods = append(mods, qm.From("\"sale\".\"sales_quotation_item_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale\".\"sales_quotation_item_view\".*"})
	}

	return salesQuotationItemViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SalesQuotationItemView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sale: no sales_quotation_item_view provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salesQuotationItemViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	salesQuotationItemViewInsertCacheMut.RLock()
	cache, cached := salesQuotationItemViewInsertCache[key]
	salesQuotationItemViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			salesQuotationItemViewAllColumns,
			salesQuotationItemViewColumnsWithDefault,
			salesQuotationItemViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(salesQuotationItemViewType, salesQuotationItemViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(salesQuotationItemViewType, salesQuotationItemViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\".\"sales_quotation_item_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\".\"sales_quotation_item_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sale: unable to insert into sales_quotation_item_view")
	}

	if !cached {
		salesQuotationItemViewInsertCacheMut.Lock()
		salesQuotationItemViewInsertCache[key] = cache
		salesQuotationItemViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SalesQuotationItemView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sale: no sales_quotation_item_view provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salesQuotationItemViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	salesQuotationItemViewUpsertCacheMut.RLock()
	cache, cached := salesQuotationItemViewUpsertCache[key]
	salesQuotationItemViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			salesQuotationItemViewAllColumns,
			salesQuotationItemViewColumnsWithDefault,
			salesQuotationItemViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			salesQuotationItemViewAllColumns,
			salesQuotationItemViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sale: unable to upsert sales_quotation_item_view, could not build update column list")
		}

		ret := strmangle.SetComplement(salesQuotationItemViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(salesQuotationItemViewPrimaryKeyColumns) == 0 {
				return errors.New("sale: unable to upsert sales_quotation_item_view, could not build conflict column list")
			}

			conflict = make([]string, len(salesQuotationItemViewPrimaryKeyColumns))
			copy(conflict, salesQuotationItemViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\".\"sales_quotation_item_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(salesQuotationItemViewType, salesQuotationItemViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(salesQuotationItemViewType, salesQuotationItemViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sale: unable to upsert sales_quotation_item_view")
	}

	if !cached {
		salesQuotationItemViewUpsertCacheMut.Lock()
		salesQuotationItemViewUpsertCache[key] = cache
		salesQuotationItemViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
