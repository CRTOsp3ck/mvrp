// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sale

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// DeliveryNote is an object representing the database table.
type DeliveryNote struct {
	ID                           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentID               int         `boil:"base_document_id" json:"base_document_id" toml:"base_document_id" yaml:"base_document_id"`
	DeliveryNoteNumber           string      `boil:"delivery_note_number" json:"delivery_note_number" toml:"delivery_note_number" yaml:"delivery_note_number"`
	SalesOrderID                 int         `boil:"sales_order_id" json:"sales_order_id" toml:"sales_order_id" yaml:"sales_order_id"`
	VendorID                     null.Int    `boil:"vendor_id" json:"vendor_id,omitempty" toml:"vendor_id" yaml:"vendor_id,omitempty"`
	CustomerID                   null.Int    `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	ShipToInformation            types.JSON  `boil:"ship_to_information" json:"ship_to_information" toml:"ship_to_information" yaml:"ship_to_information"`
	ShipFromInformation          types.JSON  `boil:"ship_from_information" json:"ship_from_information" toml:"ship_from_information" yaml:"ship_from_information"`
	BillToInformation            types.JSON  `boil:"bill_to_information" json:"bill_to_information" toml:"bill_to_information" yaml:"bill_to_information"`
	DeliveryDate                 time.Time   `boil:"delivery_date" json:"delivery_date" toml:"delivery_date" yaml:"delivery_date"`
	ShippingPersonnelInformation null.JSON   `boil:"shipping_personnel_information" json:"shipping_personnel_information,omitempty" toml:"shipping_personnel_information" yaml:"shipping_personnel_information,omitempty"`
	ReceivedBy                   null.JSON   `boil:"received_by" json:"received_by,omitempty" toml:"received_by" yaml:"received_by,omitempty"`
	OverallGoodsCondition        null.String `boil:"overall_goods_condition" json:"overall_goods_condition,omitempty" toml:"overall_goods_condition" yaml:"overall_goods_condition,omitempty"`
	CreatedAt                    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt                    null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *deliveryNoteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deliveryNoteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeliveryNoteColumns = struct {
	ID                           string
	BaseDocumentID               string
	DeliveryNoteNumber           string
	SalesOrderID                 string
	VendorID                     string
	CustomerID                   string
	ShipToInformation            string
	ShipFromInformation          string
	BillToInformation            string
	DeliveryDate                 string
	ShippingPersonnelInformation string
	ReceivedBy                   string
	OverallGoodsCondition        string
	CreatedAt                    string
	UpdatedAt                    string
	DeletedAt                    string
}{
	ID:                           "id",
	BaseDocumentID:               "base_document_id",
	DeliveryNoteNumber:           "delivery_note_number",
	SalesOrderID:                 "sales_order_id",
	VendorID:                     "vendor_id",
	CustomerID:                   "customer_id",
	ShipToInformation:            "ship_to_information",
	ShipFromInformation:          "ship_from_information",
	BillToInformation:            "bill_to_information",
	DeliveryDate:                 "delivery_date",
	ShippingPersonnelInformation: "shipping_personnel_information",
	ReceivedBy:                   "received_by",
	OverallGoodsCondition:        "overall_goods_condition",
	CreatedAt:                    "created_at",
	UpdatedAt:                    "updated_at",
	DeletedAt:                    "deleted_at",
}

var DeliveryNoteTableColumns = struct {
	ID                           string
	BaseDocumentID               string
	DeliveryNoteNumber           string
	SalesOrderID                 string
	VendorID                     string
	CustomerID                   string
	ShipToInformation            string
	ShipFromInformation          string
	BillToInformation            string
	DeliveryDate                 string
	ShippingPersonnelInformation string
	ReceivedBy                   string
	OverallGoodsCondition        string
	CreatedAt                    string
	UpdatedAt                    string
	DeletedAt                    string
}{
	ID:                           "delivery_note.id",
	BaseDocumentID:               "delivery_note.base_document_id",
	DeliveryNoteNumber:           "delivery_note.delivery_note_number",
	SalesOrderID:                 "delivery_note.sales_order_id",
	VendorID:                     "delivery_note.vendor_id",
	CustomerID:                   "delivery_note.customer_id",
	ShipToInformation:            "delivery_note.ship_to_information",
	ShipFromInformation:          "delivery_note.ship_from_information",
	BillToInformation:            "delivery_note.bill_to_information",
	DeliveryDate:                 "delivery_note.delivery_date",
	ShippingPersonnelInformation: "delivery_note.shipping_personnel_information",
	ReceivedBy:                   "delivery_note.received_by",
	OverallGoodsCondition:        "delivery_note.overall_goods_condition",
	CreatedAt:                    "delivery_note.created_at",
	UpdatedAt:                    "delivery_note.updated_at",
	DeletedAt:                    "delivery_note.deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DeliveryNoteWhere = struct {
	ID                           whereHelperint
	BaseDocumentID               whereHelperint
	DeliveryNoteNumber           whereHelperstring
	SalesOrderID                 whereHelperint
	VendorID                     whereHelpernull_Int
	CustomerID                   whereHelpernull_Int
	ShipToInformation            whereHelpertypes_JSON
	ShipFromInformation          whereHelpertypes_JSON
	BillToInformation            whereHelpertypes_JSON
	DeliveryDate                 whereHelpertime_Time
	ShippingPersonnelInformation whereHelpernull_JSON
	ReceivedBy                   whereHelpernull_JSON
	OverallGoodsCondition        whereHelpernull_String
	CreatedAt                    whereHelpertime_Time
	UpdatedAt                    whereHelpertime_Time
	DeletedAt                    whereHelpernull_Time
}{
	ID:                           whereHelperint{field: "\"sale\".\"delivery_note\".\"id\""},
	BaseDocumentID:               whereHelperint{field: "\"sale\".\"delivery_note\".\"base_document_id\""},
	DeliveryNoteNumber:           whereHelperstring{field: "\"sale\".\"delivery_note\".\"delivery_note_number\""},
	SalesOrderID:                 whereHelperint{field: "\"sale\".\"delivery_note\".\"sales_order_id\""},
	VendorID:                     whereHelpernull_Int{field: "\"sale\".\"delivery_note\".\"vendor_id\""},
	CustomerID:                   whereHelpernull_Int{field: "\"sale\".\"delivery_note\".\"customer_id\""},
	ShipToInformation:            whereHelpertypes_JSON{field: "\"sale\".\"delivery_note\".\"ship_to_information\""},
	ShipFromInformation:          whereHelpertypes_JSON{field: "\"sale\".\"delivery_note\".\"ship_from_information\""},
	BillToInformation:            whereHelpertypes_JSON{field: "\"sale\".\"delivery_note\".\"bill_to_information\""},
	DeliveryDate:                 whereHelpertime_Time{field: "\"sale\".\"delivery_note\".\"delivery_date\""},
	ShippingPersonnelInformation: whereHelpernull_JSON{field: "\"sale\".\"delivery_note\".\"shipping_personnel_information\""},
	ReceivedBy:                   whereHelpernull_JSON{field: "\"sale\".\"delivery_note\".\"received_by\""},
	OverallGoodsCondition:        whereHelpernull_String{field: "\"sale\".\"delivery_note\".\"overall_goods_condition\""},
	CreatedAt:                    whereHelpertime_Time{field: "\"sale\".\"delivery_note\".\"created_at\""},
	UpdatedAt:                    whereHelpertime_Time{field: "\"sale\".\"delivery_note\".\"updated_at\""},
	DeletedAt:                    whereHelpernull_Time{field: "\"sale\".\"delivery_note\".\"deleted_at\""},
}

// DeliveryNoteRels is where relationship names are stored.
var DeliveryNoteRels = struct {
	SalesOrder        string
	DeliveryNoteItems string
}{
	SalesOrder:        "SalesOrder",
	DeliveryNoteItems: "DeliveryNoteItems",
}

// deliveryNoteR is where relationships are stored.
type deliveryNoteR struct {
	SalesOrder        *SalesOrder           `boil:"SalesOrder" json:"SalesOrder" toml:"SalesOrder" yaml:"SalesOrder"`
	DeliveryNoteItems DeliveryNoteItemSlice `boil:"DeliveryNoteItems" json:"DeliveryNoteItems" toml:"DeliveryNoteItems" yaml:"DeliveryNoteItems"`
}

// NewStruct creates a new relationship struct
func (*deliveryNoteR) NewStruct() *deliveryNoteR {
	return &deliveryNoteR{}
}

func (r *deliveryNoteR) GetSalesOrder() *SalesOrder {
	if r == nil {
		return nil
	}
	return r.SalesOrder
}

func (r *deliveryNoteR) GetDeliveryNoteItems() DeliveryNoteItemSlice {
	if r == nil {
		return nil
	}
	return r.DeliveryNoteItems
}

// deliveryNoteL is where Load methods for each relationship are stored.
type deliveryNoteL struct{}

var (
	deliveryNoteAllColumns            = []string{"id", "base_document_id", "delivery_note_number", "sales_order_id", "vendor_id", "customer_id", "ship_to_information", "ship_from_information", "bill_to_information", "delivery_date", "shipping_personnel_information", "received_by", "overall_goods_condition", "created_at", "updated_at", "deleted_at"}
	deliveryNoteColumnsWithoutDefault = []string{"id", "base_document_id", "delivery_note_number", "sales_order_id", "ship_to_information", "ship_from_information", "bill_to_information", "delivery_date", "created_at", "updated_at"}
	deliveryNoteColumnsWithDefault    = []string{"vendor_id", "customer_id", "shipping_personnel_information", "received_by", "overall_goods_condition", "deleted_at"}
	deliveryNotePrimaryKeyColumns     = []string{"id"}
	deliveryNoteGeneratedColumns      = []string{}
)

type (
	// DeliveryNoteSlice is an alias for a slice of pointers to DeliveryNote.
	// This should almost always be used instead of []DeliveryNote.
	DeliveryNoteSlice []*DeliveryNote
	// DeliveryNoteHook is the signature for custom DeliveryNote hook methods
	DeliveryNoteHook func(context.Context, boil.ContextExecutor, *DeliveryNote) error

	deliveryNoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deliveryNoteType                 = reflect.TypeOf(&DeliveryNote{})
	deliveryNoteMapping              = queries.MakeStructMapping(deliveryNoteType)
	deliveryNotePrimaryKeyMapping, _ = queries.BindMapping(deliveryNoteType, deliveryNoteMapping, deliveryNotePrimaryKeyColumns)
	deliveryNoteInsertCacheMut       sync.RWMutex
	deliveryNoteInsertCache          = make(map[string]insertCache)
	deliveryNoteUpdateCacheMut       sync.RWMutex
	deliveryNoteUpdateCache          = make(map[string]updateCache)
	deliveryNoteUpsertCacheMut       sync.RWMutex
	deliveryNoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deliveryNoteAfterSelectMu sync.Mutex
var deliveryNoteAfterSelectHooks []DeliveryNoteHook

var deliveryNoteBeforeInsertMu sync.Mutex
var deliveryNoteBeforeInsertHooks []DeliveryNoteHook
var deliveryNoteAfterInsertMu sync.Mutex
var deliveryNoteAfterInsertHooks []DeliveryNoteHook

var deliveryNoteBeforeUpdateMu sync.Mutex
var deliveryNoteBeforeUpdateHooks []DeliveryNoteHook
var deliveryNoteAfterUpdateMu sync.Mutex
var deliveryNoteAfterUpdateHooks []DeliveryNoteHook

var deliveryNoteBeforeDeleteMu sync.Mutex
var deliveryNoteBeforeDeleteHooks []DeliveryNoteHook
var deliveryNoteAfterDeleteMu sync.Mutex
var deliveryNoteAfterDeleteHooks []DeliveryNoteHook

var deliveryNoteBeforeUpsertMu sync.Mutex
var deliveryNoteBeforeUpsertHooks []DeliveryNoteHook
var deliveryNoteAfterUpsertMu sync.Mutex
var deliveryNoteAfterUpsertHooks []DeliveryNoteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeliveryNote) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeliveryNote) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeliveryNote) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeliveryNote) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeliveryNote) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeliveryNote) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeliveryNote) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeliveryNote) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeliveryNote) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deliveryNoteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeliveryNoteHook registers your hook function for all future operations.
func AddDeliveryNoteHook(hookPoint boil.HookPoint, deliveryNoteHook DeliveryNoteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deliveryNoteAfterSelectMu.Lock()
		deliveryNoteAfterSelectHooks = append(deliveryNoteAfterSelectHooks, deliveryNoteHook)
		deliveryNoteAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		deliveryNoteBeforeInsertMu.Lock()
		deliveryNoteBeforeInsertHooks = append(deliveryNoteBeforeInsertHooks, deliveryNoteHook)
		deliveryNoteBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		deliveryNoteAfterInsertMu.Lock()
		deliveryNoteAfterInsertHooks = append(deliveryNoteAfterInsertHooks, deliveryNoteHook)
		deliveryNoteAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		deliveryNoteBeforeUpdateMu.Lock()
		deliveryNoteBeforeUpdateHooks = append(deliveryNoteBeforeUpdateHooks, deliveryNoteHook)
		deliveryNoteBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		deliveryNoteAfterUpdateMu.Lock()
		deliveryNoteAfterUpdateHooks = append(deliveryNoteAfterUpdateHooks, deliveryNoteHook)
		deliveryNoteAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		deliveryNoteBeforeDeleteMu.Lock()
		deliveryNoteBeforeDeleteHooks = append(deliveryNoteBeforeDeleteHooks, deliveryNoteHook)
		deliveryNoteBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		deliveryNoteAfterDeleteMu.Lock()
		deliveryNoteAfterDeleteHooks = append(deliveryNoteAfterDeleteHooks, deliveryNoteHook)
		deliveryNoteAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		deliveryNoteBeforeUpsertMu.Lock()
		deliveryNoteBeforeUpsertHooks = append(deliveryNoteBeforeUpsertHooks, deliveryNoteHook)
		deliveryNoteBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		deliveryNoteAfterUpsertMu.Lock()
		deliveryNoteAfterUpsertHooks = append(deliveryNoteAfterUpsertHooks, deliveryNoteHook)
		deliveryNoteAfterUpsertMu.Unlock()
	}
}

// One returns a single deliveryNote record from the query.
func (q deliveryNoteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeliveryNote, error) {
	o := &DeliveryNote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: failed to execute a one query for delivery_note")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeliveryNote records from the query.
func (q deliveryNoteQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeliveryNoteSlice, error) {
	var o []*DeliveryNote

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sale: failed to assign all query results to DeliveryNote slice")
	}

	if len(deliveryNoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeliveryNote records in the query.
func (q deliveryNoteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to count delivery_note rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deliveryNoteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sale: failed to check if delivery_note exists")
	}

	return count > 0, nil
}

// SalesOrder pointed to by the foreign key.
func (o *DeliveryNote) SalesOrder(mods ...qm.QueryMod) salesOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SalesOrderID),
	}

	queryMods = append(queryMods, mods...)

	return SalesOrders(queryMods...)
}

// DeliveryNoteItems retrieves all the delivery_note_item's DeliveryNoteItems with an executor.
func (o *DeliveryNote) DeliveryNoteItems(mods ...qm.QueryMod) deliveryNoteItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale\".\"delivery_note_item\".\"delivery_note_id\"=?", o.ID),
	)

	return DeliveryNoteItems(queryMods...)
}

// LoadSalesOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deliveryNoteL) LoadSalesOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeliveryNote interface{}, mods queries.Applicator) error {
	var slice []*DeliveryNote
	var object *DeliveryNote

	if singular {
		var ok bool
		object, ok = maybeDeliveryNote.(*DeliveryNote)
		if !ok {
			object = new(DeliveryNote)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeliveryNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeliveryNote))
			}
		}
	} else {
		s, ok := maybeDeliveryNote.(*[]*DeliveryNote)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeliveryNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeliveryNote))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryNoteR{}
		}
		args[object.SalesOrderID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryNoteR{}
			}

			args[obj.SalesOrderID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.sales_order`),
		qm.WhereIn(`sale.sales_order.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SalesOrder")
	}

	var resultSlice []*SalesOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SalesOrder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sales_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sales_order")
	}

	if len(salesOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesOrder = foreign
		if foreign.R == nil {
			foreign.R = &salesOrderR{}
		}
		foreign.R.DeliveryNotes = append(foreign.R.DeliveryNotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesOrderID == foreign.ID {
				local.R.SalesOrder = foreign
				if foreign.R == nil {
					foreign.R = &salesOrderR{}
				}
				foreign.R.DeliveryNotes = append(foreign.R.DeliveryNotes, local)
				break
			}
		}
	}

	return nil
}

// LoadDeliveryNoteItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (deliveryNoteL) LoadDeliveryNoteItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeliveryNote interface{}, mods queries.Applicator) error {
	var slice []*DeliveryNote
	var object *DeliveryNote

	if singular {
		var ok bool
		object, ok = maybeDeliveryNote.(*DeliveryNote)
		if !ok {
			object = new(DeliveryNote)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeliveryNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeliveryNote))
			}
		}
	} else {
		s, ok := maybeDeliveryNote.(*[]*DeliveryNote)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeliveryNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeliveryNote))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deliveryNoteR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deliveryNoteR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.delivery_note_item`),
		qm.WhereIn(`sale.delivery_note_item.delivery_note_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load delivery_note_item")
	}

	var resultSlice []*DeliveryNoteItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice delivery_note_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on delivery_note_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for delivery_note_item")
	}

	if len(deliveryNoteItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeliveryNoteItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryNoteItemR{}
			}
			foreign.R.DeliveryNote = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DeliveryNoteID {
				local.R.DeliveryNoteItems = append(local.R.DeliveryNoteItems, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryNoteItemR{}
				}
				foreign.R.DeliveryNote = local
				break
			}
		}
	}

	return nil
}

// SetSalesOrder of the deliveryNote to the related item.
// Sets o.R.SalesOrder to related.
// Adds o to related.R.DeliveryNotes.
func (o *DeliveryNote) SetSalesOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SalesOrder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale\".\"delivery_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sales_order_id"}),
		strmangle.WhereClause("\"", "\"", 2, deliveryNotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesOrderID = related.ID
	if o.R == nil {
		o.R = &deliveryNoteR{
			SalesOrder: related,
		}
	} else {
		o.R.SalesOrder = related
	}

	if related.R == nil {
		related.R = &salesOrderR{
			DeliveryNotes: DeliveryNoteSlice{o},
		}
	} else {
		related.R.DeliveryNotes = append(related.R.DeliveryNotes, o)
	}

	return nil
}

// AddDeliveryNoteItems adds the given related objects to the existing relationships
// of the delivery_note, optionally inserting them as new records.
// Appends related to o.R.DeliveryNoteItems.
// Sets related.R.DeliveryNote appropriately.
func (o *DeliveryNote) AddDeliveryNoteItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeliveryNoteItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliveryNoteID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale\".\"delivery_note_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"delivery_note_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryNoteItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliveryNoteID = o.ID
		}
	}

	if o.R == nil {
		o.R = &deliveryNoteR{
			DeliveryNoteItems: related,
		}
	} else {
		o.R.DeliveryNoteItems = append(o.R.DeliveryNoteItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryNoteItemR{
				DeliveryNote: o,
			}
		} else {
			rel.R.DeliveryNote = o
		}
	}
	return nil
}

// DeliveryNotes retrieves all the records using an executor.
func DeliveryNotes(mods ...qm.QueryMod) deliveryNoteQuery {
	mods = append(mods, qm.From("\"sale\".\"delivery_note\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale\".\"delivery_note\".*"})
	}

	return deliveryNoteQuery{q}
}

// FindDeliveryNote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeliveryNote(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DeliveryNote, error) {
	deliveryNoteObj := &DeliveryNote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sale\".\"delivery_note\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deliveryNoteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: unable to select from delivery_note")
	}

	if err = deliveryNoteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deliveryNoteObj, err
	}

	return deliveryNoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeliveryNote) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sale: no delivery_note provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryNoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deliveryNoteInsertCacheMut.RLock()
	cache, cached := deliveryNoteInsertCache[key]
	deliveryNoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deliveryNoteAllColumns,
			deliveryNoteColumnsWithDefault,
			deliveryNoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deliveryNoteType, deliveryNoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deliveryNoteType, deliveryNoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\".\"delivery_note\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\".\"delivery_note\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sale: unable to insert into delivery_note")
	}

	if !cached {
		deliveryNoteInsertCacheMut.Lock()
		deliveryNoteInsertCache[key] = cache
		deliveryNoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeliveryNote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeliveryNote) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deliveryNoteUpdateCacheMut.RLock()
	cache, cached := deliveryNoteUpdateCache[key]
	deliveryNoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deliveryNoteAllColumns,
			deliveryNotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sale: unable to update delivery_note, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sale\".\"delivery_note\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deliveryNotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deliveryNoteType, deliveryNoteMapping, append(wl, deliveryNotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update delivery_note row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by update for delivery_note")
	}

	if !cached {
		deliveryNoteUpdateCacheMut.Lock()
		deliveryNoteUpdateCache[key] = cache
		deliveryNoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deliveryNoteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all for delivery_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected for delivery_note")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeliveryNoteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sale: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sale\".\"delivery_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deliveryNotePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all in deliveryNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected all in update all deliveryNote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeliveryNote) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sale: no delivery_note provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deliveryNoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deliveryNoteUpsertCacheMut.RLock()
	cache, cached := deliveryNoteUpsertCache[key]
	deliveryNoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			deliveryNoteAllColumns,
			deliveryNoteColumnsWithDefault,
			deliveryNoteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deliveryNoteAllColumns,
			deliveryNotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sale: unable to upsert delivery_note, could not build update column list")
		}

		ret := strmangle.SetComplement(deliveryNoteAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(deliveryNotePrimaryKeyColumns) == 0 {
				return errors.New("sale: unable to upsert delivery_note, could not build conflict column list")
			}

			conflict = make([]string, len(deliveryNotePrimaryKeyColumns))
			copy(conflict, deliveryNotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\".\"delivery_note\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(deliveryNoteType, deliveryNoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deliveryNoteType, deliveryNoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sale: unable to upsert delivery_note")
	}

	if !cached {
		deliveryNoteUpsertCacheMut.Lock()
		deliveryNoteUpsertCache[key] = cache
		deliveryNoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeliveryNote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeliveryNote) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sale: no DeliveryNote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deliveryNotePrimaryKeyMapping)
	sql := "DELETE FROM \"sale\".\"delivery_note\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete from delivery_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by delete for delivery_note")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deliveryNoteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sale: no deliveryNoteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from delivery_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for delivery_note")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeliveryNoteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deliveryNoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sale\".\"delivery_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryNotePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from deliveryNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for delivery_note")
	}

	if len(deliveryNoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeliveryNote) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeliveryNote(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeliveryNoteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeliveryNoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deliveryNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sale\".\"delivery_note\".* FROM \"sale\".\"delivery_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deliveryNotePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sale: unable to reload all in DeliveryNoteSlice")
	}

	*o = slice

	return nil
}

// DeliveryNoteExists checks if the DeliveryNote row exists.
func DeliveryNoteExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sale\".\"delivery_note\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sale: unable to check if delivery_note exists")
	}

	return exists, nil
}

// Exists checks if the DeliveryNote row exists.
func (o *DeliveryNote) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeliveryNoteExists(ctx, exec, o.ID)
}
