// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sale

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderConfirmationItem is an object representing the database table.
type OrderConfirmationItem struct {
	ID                  int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentItemID  int       `boil:"base_document_item_id" json:"base_document_item_id" toml:"base_document_item_id" yaml:"base_document_item_id"`
	OrderConfirmationID int       `boil:"order_confirmation_id" json:"order_confirmation_id" toml:"order_confirmation_id" yaml:"order_confirmation_id"`
	CreatedAt           time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt           null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *orderConfirmationItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderConfirmationItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderConfirmationItemColumns = struct {
	ID                  string
	BaseDocumentItemID  string
	OrderConfirmationID string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	ID:                  "id",
	BaseDocumentItemID:  "base_document_item_id",
	OrderConfirmationID: "order_confirmation_id",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
}

var OrderConfirmationItemTableColumns = struct {
	ID                  string
	BaseDocumentItemID  string
	OrderConfirmationID string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	ID:                  "order_confirmation_item.id",
	BaseDocumentItemID:  "order_confirmation_item.base_document_item_id",
	OrderConfirmationID: "order_confirmation_item.order_confirmation_id",
	CreatedAt:           "order_confirmation_item.created_at",
	UpdatedAt:           "order_confirmation_item.updated_at",
	DeletedAt:           "order_confirmation_item.deleted_at",
}

// Generated where

var OrderConfirmationItemWhere = struct {
	ID                  whereHelperint
	BaseDocumentItemID  whereHelperint
	OrderConfirmationID whereHelperint
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
	DeletedAt           whereHelpernull_Time
}{
	ID:                  whereHelperint{field: "\"sale\".\"order_confirmation_item\".\"id\""},
	BaseDocumentItemID:  whereHelperint{field: "\"sale\".\"order_confirmation_item\".\"base_document_item_id\""},
	OrderConfirmationID: whereHelperint{field: "\"sale\".\"order_confirmation_item\".\"order_confirmation_id\""},
	CreatedAt:           whereHelpertime_Time{field: "\"sale\".\"order_confirmation_item\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"sale\".\"order_confirmation_item\".\"updated_at\""},
	DeletedAt:           whereHelpernull_Time{field: "\"sale\".\"order_confirmation_item\".\"deleted_at\""},
}

// OrderConfirmationItemRels is where relationship names are stored.
var OrderConfirmationItemRels = struct {
	OrderConfirmation string
}{
	OrderConfirmation: "OrderConfirmation",
}

// orderConfirmationItemR is where relationships are stored.
type orderConfirmationItemR struct {
	OrderConfirmation *OrderConfirmation `boil:"OrderConfirmation" json:"OrderConfirmation" toml:"OrderConfirmation" yaml:"OrderConfirmation"`
}

// NewStruct creates a new relationship struct
func (*orderConfirmationItemR) NewStruct() *orderConfirmationItemR {
	return &orderConfirmationItemR{}
}

func (r *orderConfirmationItemR) GetOrderConfirmation() *OrderConfirmation {
	if r == nil {
		return nil
	}
	return r.OrderConfirmation
}

// orderConfirmationItemL is where Load methods for each relationship are stored.
type orderConfirmationItemL struct{}

var (
	orderConfirmationItemAllColumns            = []string{"id", "base_document_item_id", "order_confirmation_id", "created_at", "updated_at", "deleted_at"}
	orderConfirmationItemColumnsWithoutDefault = []string{"id", "base_document_item_id", "order_confirmation_id", "created_at", "updated_at"}
	orderConfirmationItemColumnsWithDefault    = []string{"deleted_at"}
	orderConfirmationItemPrimaryKeyColumns     = []string{"id"}
	orderConfirmationItemGeneratedColumns      = []string{}
)

type (
	// OrderConfirmationItemSlice is an alias for a slice of pointers to OrderConfirmationItem.
	// This should almost always be used instead of []OrderConfirmationItem.
	OrderConfirmationItemSlice []*OrderConfirmationItem
	// OrderConfirmationItemHook is the signature for custom OrderConfirmationItem hook methods
	OrderConfirmationItemHook func(context.Context, boil.ContextExecutor, *OrderConfirmationItem) error

	orderConfirmationItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderConfirmationItemType                 = reflect.TypeOf(&OrderConfirmationItem{})
	orderConfirmationItemMapping              = queries.MakeStructMapping(orderConfirmationItemType)
	orderConfirmationItemPrimaryKeyMapping, _ = queries.BindMapping(orderConfirmationItemType, orderConfirmationItemMapping, orderConfirmationItemPrimaryKeyColumns)
	orderConfirmationItemInsertCacheMut       sync.RWMutex
	orderConfirmationItemInsertCache          = make(map[string]insertCache)
	orderConfirmationItemUpdateCacheMut       sync.RWMutex
	orderConfirmationItemUpdateCache          = make(map[string]updateCache)
	orderConfirmationItemUpsertCacheMut       sync.RWMutex
	orderConfirmationItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderConfirmationItemAfterSelectMu sync.Mutex
var orderConfirmationItemAfterSelectHooks []OrderConfirmationItemHook

var orderConfirmationItemBeforeInsertMu sync.Mutex
var orderConfirmationItemBeforeInsertHooks []OrderConfirmationItemHook
var orderConfirmationItemAfterInsertMu sync.Mutex
var orderConfirmationItemAfterInsertHooks []OrderConfirmationItemHook

var orderConfirmationItemBeforeUpdateMu sync.Mutex
var orderConfirmationItemBeforeUpdateHooks []OrderConfirmationItemHook
var orderConfirmationItemAfterUpdateMu sync.Mutex
var orderConfirmationItemAfterUpdateHooks []OrderConfirmationItemHook

var orderConfirmationItemBeforeDeleteMu sync.Mutex
var orderConfirmationItemBeforeDeleteHooks []OrderConfirmationItemHook
var orderConfirmationItemAfterDeleteMu sync.Mutex
var orderConfirmationItemAfterDeleteHooks []OrderConfirmationItemHook

var orderConfirmationItemBeforeUpsertMu sync.Mutex
var orderConfirmationItemBeforeUpsertHooks []OrderConfirmationItemHook
var orderConfirmationItemAfterUpsertMu sync.Mutex
var orderConfirmationItemAfterUpsertHooks []OrderConfirmationItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderConfirmationItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderConfirmationItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderConfirmationItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderConfirmationItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderConfirmationItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderConfirmationItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderConfirmationItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderConfirmationItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderConfirmationItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderConfirmationItemHook registers your hook function for all future operations.
func AddOrderConfirmationItemHook(hookPoint boil.HookPoint, orderConfirmationItemHook OrderConfirmationItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderConfirmationItemAfterSelectMu.Lock()
		orderConfirmationItemAfterSelectHooks = append(orderConfirmationItemAfterSelectHooks, orderConfirmationItemHook)
		orderConfirmationItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderConfirmationItemBeforeInsertMu.Lock()
		orderConfirmationItemBeforeInsertHooks = append(orderConfirmationItemBeforeInsertHooks, orderConfirmationItemHook)
		orderConfirmationItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderConfirmationItemAfterInsertMu.Lock()
		orderConfirmationItemAfterInsertHooks = append(orderConfirmationItemAfterInsertHooks, orderConfirmationItemHook)
		orderConfirmationItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderConfirmationItemBeforeUpdateMu.Lock()
		orderConfirmationItemBeforeUpdateHooks = append(orderConfirmationItemBeforeUpdateHooks, orderConfirmationItemHook)
		orderConfirmationItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderConfirmationItemAfterUpdateMu.Lock()
		orderConfirmationItemAfterUpdateHooks = append(orderConfirmationItemAfterUpdateHooks, orderConfirmationItemHook)
		orderConfirmationItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderConfirmationItemBeforeDeleteMu.Lock()
		orderConfirmationItemBeforeDeleteHooks = append(orderConfirmationItemBeforeDeleteHooks, orderConfirmationItemHook)
		orderConfirmationItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderConfirmationItemAfterDeleteMu.Lock()
		orderConfirmationItemAfterDeleteHooks = append(orderConfirmationItemAfterDeleteHooks, orderConfirmationItemHook)
		orderConfirmationItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderConfirmationItemBeforeUpsertMu.Lock()
		orderConfirmationItemBeforeUpsertHooks = append(orderConfirmationItemBeforeUpsertHooks, orderConfirmationItemHook)
		orderConfirmationItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderConfirmationItemAfterUpsertMu.Lock()
		orderConfirmationItemAfterUpsertHooks = append(orderConfirmationItemAfterUpsertHooks, orderConfirmationItemHook)
		orderConfirmationItemAfterUpsertMu.Unlock()
	}
}

// One returns a single orderConfirmationItem record from the query.
func (q orderConfirmationItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderConfirmationItem, error) {
	o := &OrderConfirmationItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: failed to execute a one query for order_confirmation_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrderConfirmationItem records from the query.
func (q orderConfirmationItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderConfirmationItemSlice, error) {
	var o []*OrderConfirmationItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sale: failed to assign all query results to OrderConfirmationItem slice")
	}

	if len(orderConfirmationItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrderConfirmationItem records in the query.
func (q orderConfirmationItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to count order_confirmation_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderConfirmationItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sale: failed to check if order_confirmation_item exists")
	}

	return count > 0, nil
}

// OrderConfirmation pointed to by the foreign key.
func (o *OrderConfirmationItem) OrderConfirmation(mods ...qm.QueryMod) orderConfirmationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderConfirmationID),
	}

	queryMods = append(queryMods, mods...)

	return OrderConfirmations(queryMods...)
}

// LoadOrderConfirmation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderConfirmationItemL) LoadOrderConfirmation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderConfirmationItem interface{}, mods queries.Applicator) error {
	var slice []*OrderConfirmationItem
	var object *OrderConfirmationItem

	if singular {
		var ok bool
		object, ok = maybeOrderConfirmationItem.(*OrderConfirmationItem)
		if !ok {
			object = new(OrderConfirmationItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderConfirmationItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderConfirmationItem))
			}
		}
	} else {
		s, ok := maybeOrderConfirmationItem.(*[]*OrderConfirmationItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderConfirmationItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderConfirmationItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderConfirmationItemR{}
		}
		args[object.OrderConfirmationID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderConfirmationItemR{}
			}

			args[obj.OrderConfirmationID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.order_confirmation`),
		qm.WhereIn(`sale.order_confirmation.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrderConfirmation")
	}

	var resultSlice []*OrderConfirmation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrderConfirmation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for order_confirmation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_confirmation")
	}

	if len(orderConfirmationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderConfirmation = foreign
		if foreign.R == nil {
			foreign.R = &orderConfirmationR{}
		}
		foreign.R.OrderConfirmationItems = append(foreign.R.OrderConfirmationItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderConfirmationID == foreign.ID {
				local.R.OrderConfirmation = foreign
				if foreign.R == nil {
					foreign.R = &orderConfirmationR{}
				}
				foreign.R.OrderConfirmationItems = append(foreign.R.OrderConfirmationItems, local)
				break
			}
		}
	}

	return nil
}

// SetOrderConfirmation of the orderConfirmationItem to the related item.
// Sets o.R.OrderConfirmation to related.
// Adds o to related.R.OrderConfirmationItems.
func (o *OrderConfirmationItem) SetOrderConfirmation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrderConfirmation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale\".\"order_confirmation_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_confirmation_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderConfirmationItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderConfirmationID = related.ID
	if o.R == nil {
		o.R = &orderConfirmationItemR{
			OrderConfirmation: related,
		}
	} else {
		o.R.OrderConfirmation = related
	}

	if related.R == nil {
		related.R = &orderConfirmationR{
			OrderConfirmationItems: OrderConfirmationItemSlice{o},
		}
	} else {
		related.R.OrderConfirmationItems = append(related.R.OrderConfirmationItems, o)
	}

	return nil
}

// OrderConfirmationItems retrieves all the records using an executor.
func OrderConfirmationItems(mods ...qm.QueryMod) orderConfirmationItemQuery {
	mods = append(mods, qm.From("\"sale\".\"order_confirmation_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale\".\"order_confirmation_item\".*"})
	}

	return orderConfirmationItemQuery{q}
}

// FindOrderConfirmationItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderConfirmationItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrderConfirmationItem, error) {
	orderConfirmationItemObj := &OrderConfirmationItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sale\".\"order_confirmation_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderConfirmationItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: unable to select from order_confirmation_item")
	}

	if err = orderConfirmationItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderConfirmationItemObj, err
	}

	return orderConfirmationItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderConfirmationItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sale: no order_confirmation_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderConfirmationItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderConfirmationItemInsertCacheMut.RLock()
	cache, cached := orderConfirmationItemInsertCache[key]
	orderConfirmationItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderConfirmationItemAllColumns,
			orderConfirmationItemColumnsWithDefault,
			orderConfirmationItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderConfirmationItemType, orderConfirmationItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderConfirmationItemType, orderConfirmationItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\".\"order_confirmation_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\".\"order_confirmation_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sale: unable to insert into order_confirmation_item")
	}

	if !cached {
		orderConfirmationItemInsertCacheMut.Lock()
		orderConfirmationItemInsertCache[key] = cache
		orderConfirmationItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrderConfirmationItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderConfirmationItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderConfirmationItemUpdateCacheMut.RLock()
	cache, cached := orderConfirmationItemUpdateCache[key]
	orderConfirmationItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderConfirmationItemAllColumns,
			orderConfirmationItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sale: unable to update order_confirmation_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sale\".\"order_confirmation_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderConfirmationItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderConfirmationItemType, orderConfirmationItemMapping, append(wl, orderConfirmationItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update order_confirmation_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by update for order_confirmation_item")
	}

	if !cached {
		orderConfirmationItemUpdateCacheMut.Lock()
		orderConfirmationItemUpdateCache[key] = cache
		orderConfirmationItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderConfirmationItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all for order_confirmation_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected for order_confirmation_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderConfirmationItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sale: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderConfirmationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sale\".\"order_confirmation_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderConfirmationItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all in orderConfirmationItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected all in update all orderConfirmationItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderConfirmationItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sale: no order_confirmation_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderConfirmationItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderConfirmationItemUpsertCacheMut.RLock()
	cache, cached := orderConfirmationItemUpsertCache[key]
	orderConfirmationItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderConfirmationItemAllColumns,
			orderConfirmationItemColumnsWithDefault,
			orderConfirmationItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderConfirmationItemAllColumns,
			orderConfirmationItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sale: unable to upsert order_confirmation_item, could not build update column list")
		}

		ret := strmangle.SetComplement(orderConfirmationItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(orderConfirmationItemPrimaryKeyColumns) == 0 {
				return errors.New("sale: unable to upsert order_confirmation_item, could not build conflict column list")
			}

			conflict = make([]string, len(orderConfirmationItemPrimaryKeyColumns))
			copy(conflict, orderConfirmationItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\".\"order_confirmation_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(orderConfirmationItemType, orderConfirmationItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderConfirmationItemType, orderConfirmationItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sale: unable to upsert order_confirmation_item")
	}

	if !cached {
		orderConfirmationItemUpsertCacheMut.Lock()
		orderConfirmationItemUpsertCache[key] = cache
		orderConfirmationItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrderConfirmationItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderConfirmationItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sale: no OrderConfirmationItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderConfirmationItemPrimaryKeyMapping)
	sql := "DELETE FROM \"sale\".\"order_confirmation_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete from order_confirmation_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by delete for order_confirmation_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderConfirmationItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sale: no orderConfirmationItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from order_confirmation_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for order_confirmation_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderConfirmationItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderConfirmationItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderConfirmationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sale\".\"order_confirmation_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderConfirmationItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from orderConfirmationItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for order_confirmation_item")
	}

	if len(orderConfirmationItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderConfirmationItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderConfirmationItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderConfirmationItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderConfirmationItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderConfirmationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sale\".\"order_confirmation_item\".* FROM \"sale\".\"order_confirmation_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderConfirmationItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sale: unable to reload all in OrderConfirmationItemSlice")
	}

	*o = slice

	return nil
}

// OrderConfirmationItemExists checks if the OrderConfirmationItem row exists.
func OrderConfirmationItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sale\".\"order_confirmation_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sale: unable to check if order_confirmation_item exists")
	}

	return exists, nil
}

// Exists checks if the OrderConfirmationItem row exists.
func (o *OrderConfirmationItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderConfirmationItemExists(ctx, exec, o.ID)
}
