// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sale

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GoodsReturnNote is an object representing the database table.
type GoodsReturnNote struct {
	ID                           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentID               int         `boil:"base_document_id" json:"base_document_id" toml:"base_document_id" yaml:"base_document_id"`
	GoodsReturnNoteNumber        string      `boil:"goods_return_note_number" json:"goods_return_note_number" toml:"goods_return_note_number" yaml:"goods_return_note_number"`
	SalesOrderID                 null.Int    `boil:"sales_order_id" json:"sales_order_id,omitempty" toml:"sales_order_id" yaml:"sales_order_id,omitempty"`
	InvoiceID                    null.Int    `boil:"invoice_id" json:"invoice_id,omitempty" toml:"invoice_id" yaml:"invoice_id,omitempty"`
	CreditNoteID                 null.Int    `boil:"credit_note_id" json:"credit_note_id,omitempty" toml:"credit_note_id" yaml:"credit_note_id,omitempty"`
	RmaID                        null.Int    `boil:"rma_id" json:"rma_id,omitempty" toml:"rma_id" yaml:"rma_id,omitempty"`
	ReturnDate                   time.Time   `boil:"return_date" json:"return_date" toml:"return_date" yaml:"return_date"`
	ReturnedByCustomerID         null.Int    `boil:"returned_by_customer_id" json:"returned_by_customer_id,omitempty" toml:"returned_by_customer_id" yaml:"returned_by_customer_id,omitempty"`
	ReceivingLocationInformation null.JSON   `boil:"receiving_location_information" json:"receiving_location_information,omitempty" toml:"receiving_location_information" yaml:"receiving_location_information,omitempty"`
	ReceivedByEmployeeID         null.Int    `boil:"received_by_employee_id" json:"received_by_employee_id,omitempty" toml:"received_by_employee_id" yaml:"received_by_employee_id,omitempty"`
	OverallGoodsCondition        null.String `boil:"overall_goods_condition" json:"overall_goods_condition,omitempty" toml:"overall_goods_condition" yaml:"overall_goods_condition,omitempty"`
	CreatedAt                    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt                    null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *goodsReturnNoteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L goodsReturnNoteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoodsReturnNoteColumns = struct {
	ID                           string
	BaseDocumentID               string
	GoodsReturnNoteNumber        string
	SalesOrderID                 string
	InvoiceID                    string
	CreditNoteID                 string
	RmaID                        string
	ReturnDate                   string
	ReturnedByCustomerID         string
	ReceivingLocationInformation string
	ReceivedByEmployeeID         string
	OverallGoodsCondition        string
	CreatedAt                    string
	UpdatedAt                    string
	DeletedAt                    string
}{
	ID:                           "id",
	BaseDocumentID:               "base_document_id",
	GoodsReturnNoteNumber:        "goods_return_note_number",
	SalesOrderID:                 "sales_order_id",
	InvoiceID:                    "invoice_id",
	CreditNoteID:                 "credit_note_id",
	RmaID:                        "rma_id",
	ReturnDate:                   "return_date",
	ReturnedByCustomerID:         "returned_by_customer_id",
	ReceivingLocationInformation: "receiving_location_information",
	ReceivedByEmployeeID:         "received_by_employee_id",
	OverallGoodsCondition:        "overall_goods_condition",
	CreatedAt:                    "created_at",
	UpdatedAt:                    "updated_at",
	DeletedAt:                    "deleted_at",
}

var GoodsReturnNoteTableColumns = struct {
	ID                           string
	BaseDocumentID               string
	GoodsReturnNoteNumber        string
	SalesOrderID                 string
	InvoiceID                    string
	CreditNoteID                 string
	RmaID                        string
	ReturnDate                   string
	ReturnedByCustomerID         string
	ReceivingLocationInformation string
	ReceivedByEmployeeID         string
	OverallGoodsCondition        string
	CreatedAt                    string
	UpdatedAt                    string
	DeletedAt                    string
}{
	ID:                           "goods_return_note.id",
	BaseDocumentID:               "goods_return_note.base_document_id",
	GoodsReturnNoteNumber:        "goods_return_note.goods_return_note_number",
	SalesOrderID:                 "goods_return_note.sales_order_id",
	InvoiceID:                    "goods_return_note.invoice_id",
	CreditNoteID:                 "goods_return_note.credit_note_id",
	RmaID:                        "goods_return_note.rma_id",
	ReturnDate:                   "goods_return_note.return_date",
	ReturnedByCustomerID:         "goods_return_note.returned_by_customer_id",
	ReceivingLocationInformation: "goods_return_note.receiving_location_information",
	ReceivedByEmployeeID:         "goods_return_note.received_by_employee_id",
	OverallGoodsCondition:        "goods_return_note.overall_goods_condition",
	CreatedAt:                    "goods_return_note.created_at",
	UpdatedAt:                    "goods_return_note.updated_at",
	DeletedAt:                    "goods_return_note.deleted_at",
}

// Generated where

var GoodsReturnNoteWhere = struct {
	ID                           whereHelperint
	BaseDocumentID               whereHelperint
	GoodsReturnNoteNumber        whereHelperstring
	SalesOrderID                 whereHelpernull_Int
	InvoiceID                    whereHelpernull_Int
	CreditNoteID                 whereHelpernull_Int
	RmaID                        whereHelpernull_Int
	ReturnDate                   whereHelpertime_Time
	ReturnedByCustomerID         whereHelpernull_Int
	ReceivingLocationInformation whereHelpernull_JSON
	ReceivedByEmployeeID         whereHelpernull_Int
	OverallGoodsCondition        whereHelpernull_String
	CreatedAt                    whereHelpertime_Time
	UpdatedAt                    whereHelpertime_Time
	DeletedAt                    whereHelpernull_Time
}{
	ID:                           whereHelperint{field: "\"sale\".\"goods_return_note\".\"id\""},
	BaseDocumentID:               whereHelperint{field: "\"sale\".\"goods_return_note\".\"base_document_id\""},
	GoodsReturnNoteNumber:        whereHelperstring{field: "\"sale\".\"goods_return_note\".\"goods_return_note_number\""},
	SalesOrderID:                 whereHelpernull_Int{field: "\"sale\".\"goods_return_note\".\"sales_order_id\""},
	InvoiceID:                    whereHelpernull_Int{field: "\"sale\".\"goods_return_note\".\"invoice_id\""},
	CreditNoteID:                 whereHelpernull_Int{field: "\"sale\".\"goods_return_note\".\"credit_note_id\""},
	RmaID:                        whereHelpernull_Int{field: "\"sale\".\"goods_return_note\".\"rma_id\""},
	ReturnDate:                   whereHelpertime_Time{field: "\"sale\".\"goods_return_note\".\"return_date\""},
	ReturnedByCustomerID:         whereHelpernull_Int{field: "\"sale\".\"goods_return_note\".\"returned_by_customer_id\""},
	ReceivingLocationInformation: whereHelpernull_JSON{field: "\"sale\".\"goods_return_note\".\"receiving_location_information\""},
	ReceivedByEmployeeID:         whereHelpernull_Int{field: "\"sale\".\"goods_return_note\".\"received_by_employee_id\""},
	OverallGoodsCondition:        whereHelpernull_String{field: "\"sale\".\"goods_return_note\".\"overall_goods_condition\""},
	CreatedAt:                    whereHelpertime_Time{field: "\"sale\".\"goods_return_note\".\"created_at\""},
	UpdatedAt:                    whereHelpertime_Time{field: "\"sale\".\"goods_return_note\".\"updated_at\""},
	DeletedAt:                    whereHelpernull_Time{field: "\"sale\".\"goods_return_note\".\"deleted_at\""},
}

// GoodsReturnNoteRels is where relationship names are stored.
var GoodsReturnNoteRels = struct {
	SalesOrder           string
	GoodsReturnNoteItems string
}{
	SalesOrder:           "SalesOrder",
	GoodsReturnNoteItems: "GoodsReturnNoteItems",
}

// goodsReturnNoteR is where relationships are stored.
type goodsReturnNoteR struct {
	SalesOrder           *SalesOrder              `boil:"SalesOrder" json:"SalesOrder" toml:"SalesOrder" yaml:"SalesOrder"`
	GoodsReturnNoteItems GoodsReturnNoteItemSlice `boil:"GoodsReturnNoteItems" json:"GoodsReturnNoteItems" toml:"GoodsReturnNoteItems" yaml:"GoodsReturnNoteItems"`
}

// NewStruct creates a new relationship struct
func (*goodsReturnNoteR) NewStruct() *goodsReturnNoteR {
	return &goodsReturnNoteR{}
}

func (r *goodsReturnNoteR) GetSalesOrder() *SalesOrder {
	if r == nil {
		return nil
	}
	return r.SalesOrder
}

func (r *goodsReturnNoteR) GetGoodsReturnNoteItems() GoodsReturnNoteItemSlice {
	if r == nil {
		return nil
	}
	return r.GoodsReturnNoteItems
}

// goodsReturnNoteL is where Load methods for each relationship are stored.
type goodsReturnNoteL struct{}

var (
	goodsReturnNoteAllColumns            = []string{"id", "base_document_id", "goods_return_note_number", "sales_order_id", "invoice_id", "credit_note_id", "rma_id", "return_date", "returned_by_customer_id", "receiving_location_information", "received_by_employee_id", "overall_goods_condition", "created_at", "updated_at", "deleted_at"}
	goodsReturnNoteColumnsWithoutDefault = []string{"id", "base_document_id", "goods_return_note_number", "return_date", "created_at", "updated_at"}
	goodsReturnNoteColumnsWithDefault    = []string{"sales_order_id", "invoice_id", "credit_note_id", "rma_id", "returned_by_customer_id", "receiving_location_information", "received_by_employee_id", "overall_goods_condition", "deleted_at"}
	goodsReturnNotePrimaryKeyColumns     = []string{"id"}
	goodsReturnNoteGeneratedColumns      = []string{}
)

type (
	// GoodsReturnNoteSlice is an alias for a slice of pointers to GoodsReturnNote.
	// This should almost always be used instead of []GoodsReturnNote.
	GoodsReturnNoteSlice []*GoodsReturnNote
	// GoodsReturnNoteHook is the signature for custom GoodsReturnNote hook methods
	GoodsReturnNoteHook func(context.Context, boil.ContextExecutor, *GoodsReturnNote) error

	goodsReturnNoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goodsReturnNoteType                 = reflect.TypeOf(&GoodsReturnNote{})
	goodsReturnNoteMapping              = queries.MakeStructMapping(goodsReturnNoteType)
	goodsReturnNotePrimaryKeyMapping, _ = queries.BindMapping(goodsReturnNoteType, goodsReturnNoteMapping, goodsReturnNotePrimaryKeyColumns)
	goodsReturnNoteInsertCacheMut       sync.RWMutex
	goodsReturnNoteInsertCache          = make(map[string]insertCache)
	goodsReturnNoteUpdateCacheMut       sync.RWMutex
	goodsReturnNoteUpdateCache          = make(map[string]updateCache)
	goodsReturnNoteUpsertCacheMut       sync.RWMutex
	goodsReturnNoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var goodsReturnNoteAfterSelectMu sync.Mutex
var goodsReturnNoteAfterSelectHooks []GoodsReturnNoteHook

var goodsReturnNoteBeforeInsertMu sync.Mutex
var goodsReturnNoteBeforeInsertHooks []GoodsReturnNoteHook
var goodsReturnNoteAfterInsertMu sync.Mutex
var goodsReturnNoteAfterInsertHooks []GoodsReturnNoteHook

var goodsReturnNoteBeforeUpdateMu sync.Mutex
var goodsReturnNoteBeforeUpdateHooks []GoodsReturnNoteHook
var goodsReturnNoteAfterUpdateMu sync.Mutex
var goodsReturnNoteAfterUpdateHooks []GoodsReturnNoteHook

var goodsReturnNoteBeforeDeleteMu sync.Mutex
var goodsReturnNoteBeforeDeleteHooks []GoodsReturnNoteHook
var goodsReturnNoteAfterDeleteMu sync.Mutex
var goodsReturnNoteAfterDeleteHooks []GoodsReturnNoteHook

var goodsReturnNoteBeforeUpsertMu sync.Mutex
var goodsReturnNoteBeforeUpsertHooks []GoodsReturnNoteHook
var goodsReturnNoteAfterUpsertMu sync.Mutex
var goodsReturnNoteAfterUpsertHooks []GoodsReturnNoteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoodsReturnNote) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoodsReturnNote) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoodsReturnNote) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GoodsReturnNote) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GoodsReturnNote) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GoodsReturnNote) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GoodsReturnNote) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoodsReturnNote) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoodsReturnNote) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoodsReturnNoteHook registers your hook function for all future operations.
func AddGoodsReturnNoteHook(hookPoint boil.HookPoint, goodsReturnNoteHook GoodsReturnNoteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goodsReturnNoteAfterSelectMu.Lock()
		goodsReturnNoteAfterSelectHooks = append(goodsReturnNoteAfterSelectHooks, goodsReturnNoteHook)
		goodsReturnNoteAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goodsReturnNoteBeforeInsertMu.Lock()
		goodsReturnNoteBeforeInsertHooks = append(goodsReturnNoteBeforeInsertHooks, goodsReturnNoteHook)
		goodsReturnNoteBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goodsReturnNoteAfterInsertMu.Lock()
		goodsReturnNoteAfterInsertHooks = append(goodsReturnNoteAfterInsertHooks, goodsReturnNoteHook)
		goodsReturnNoteAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		goodsReturnNoteBeforeUpdateMu.Lock()
		goodsReturnNoteBeforeUpdateHooks = append(goodsReturnNoteBeforeUpdateHooks, goodsReturnNoteHook)
		goodsReturnNoteBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		goodsReturnNoteAfterUpdateMu.Lock()
		goodsReturnNoteAfterUpdateHooks = append(goodsReturnNoteAfterUpdateHooks, goodsReturnNoteHook)
		goodsReturnNoteAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		goodsReturnNoteBeforeDeleteMu.Lock()
		goodsReturnNoteBeforeDeleteHooks = append(goodsReturnNoteBeforeDeleteHooks, goodsReturnNoteHook)
		goodsReturnNoteBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		goodsReturnNoteAfterDeleteMu.Lock()
		goodsReturnNoteAfterDeleteHooks = append(goodsReturnNoteAfterDeleteHooks, goodsReturnNoteHook)
		goodsReturnNoteAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		goodsReturnNoteBeforeUpsertMu.Lock()
		goodsReturnNoteBeforeUpsertHooks = append(goodsReturnNoteBeforeUpsertHooks, goodsReturnNoteHook)
		goodsReturnNoteBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goodsReturnNoteAfterUpsertMu.Lock()
		goodsReturnNoteAfterUpsertHooks = append(goodsReturnNoteAfterUpsertHooks, goodsReturnNoteHook)
		goodsReturnNoteAfterUpsertMu.Unlock()
	}
}

// One returns a single goodsReturnNote record from the query.
func (q goodsReturnNoteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoodsReturnNote, error) {
	o := &GoodsReturnNote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: failed to execute a one query for goods_return_note")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoodsReturnNote records from the query.
func (q goodsReturnNoteQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoodsReturnNoteSlice, error) {
	var o []*GoodsReturnNote

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sale: failed to assign all query results to GoodsReturnNote slice")
	}

	if len(goodsReturnNoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoodsReturnNote records in the query.
func (q goodsReturnNoteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to count goods_return_note rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goodsReturnNoteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sale: failed to check if goods_return_note exists")
	}

	return count > 0, nil
}

// SalesOrder pointed to by the foreign key.
func (o *GoodsReturnNote) SalesOrder(mods ...qm.QueryMod) salesOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SalesOrderID),
	}

	queryMods = append(queryMods, mods...)

	return SalesOrders(queryMods...)
}

// GoodsReturnNoteItems retrieves all the goods_return_note_item's GoodsReturnNoteItems with an executor.
func (o *GoodsReturnNote) GoodsReturnNoteItems(mods ...qm.QueryMod) goodsReturnNoteItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale\".\"goods_return_note_item\".\"goods_return_note_id\"=?", o.ID),
	)

	return GoodsReturnNoteItems(queryMods...)
}

// LoadSalesOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (goodsReturnNoteL) LoadSalesOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoodsReturnNote interface{}, mods queries.Applicator) error {
	var slice []*GoodsReturnNote
	var object *GoodsReturnNote

	if singular {
		var ok bool
		object, ok = maybeGoodsReturnNote.(*GoodsReturnNote)
		if !ok {
			object = new(GoodsReturnNote)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGoodsReturnNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGoodsReturnNote))
			}
		}
	} else {
		s, ok := maybeGoodsReturnNote.(*[]*GoodsReturnNote)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGoodsReturnNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGoodsReturnNote))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &goodsReturnNoteR{}
		}
		if !queries.IsNil(object.SalesOrderID) {
			args[object.SalesOrderID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goodsReturnNoteR{}
			}

			if !queries.IsNil(obj.SalesOrderID) {
				args[obj.SalesOrderID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.sales_order`),
		qm.WhereIn(`sale.sales_order.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SalesOrder")
	}

	var resultSlice []*SalesOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SalesOrder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sales_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sales_order")
	}

	if len(salesOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesOrder = foreign
		if foreign.R == nil {
			foreign.R = &salesOrderR{}
		}
		foreign.R.GoodsReturnNotes = append(foreign.R.GoodsReturnNotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SalesOrderID, foreign.ID) {
				local.R.SalesOrder = foreign
				if foreign.R == nil {
					foreign.R = &salesOrderR{}
				}
				foreign.R.GoodsReturnNotes = append(foreign.R.GoodsReturnNotes, local)
				break
			}
		}
	}

	return nil
}

// LoadGoodsReturnNoteItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (goodsReturnNoteL) LoadGoodsReturnNoteItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoodsReturnNote interface{}, mods queries.Applicator) error {
	var slice []*GoodsReturnNote
	var object *GoodsReturnNote

	if singular {
		var ok bool
		object, ok = maybeGoodsReturnNote.(*GoodsReturnNote)
		if !ok {
			object = new(GoodsReturnNote)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGoodsReturnNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGoodsReturnNote))
			}
		}
	} else {
		s, ok := maybeGoodsReturnNote.(*[]*GoodsReturnNote)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGoodsReturnNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGoodsReturnNote))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &goodsReturnNoteR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goodsReturnNoteR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.goods_return_note_item`),
		qm.WhereIn(`sale.goods_return_note_item.goods_return_note_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load goods_return_note_item")
	}

	var resultSlice []*GoodsReturnNoteItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice goods_return_note_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on goods_return_note_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for goods_return_note_item")
	}

	if len(goodsReturnNoteItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GoodsReturnNoteItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &goodsReturnNoteItemR{}
			}
			foreign.R.GoodsReturnNote = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GoodsReturnNoteID {
				local.R.GoodsReturnNoteItems = append(local.R.GoodsReturnNoteItems, foreign)
				if foreign.R == nil {
					foreign.R = &goodsReturnNoteItemR{}
				}
				foreign.R.GoodsReturnNote = local
				break
			}
		}
	}

	return nil
}

// SetSalesOrder of the goodsReturnNote to the related item.
// Sets o.R.SalesOrder to related.
// Adds o to related.R.GoodsReturnNotes.
func (o *GoodsReturnNote) SetSalesOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SalesOrder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale\".\"goods_return_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sales_order_id"}),
		strmangle.WhereClause("\"", "\"", 2, goodsReturnNotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SalesOrderID, related.ID)
	if o.R == nil {
		o.R = &goodsReturnNoteR{
			SalesOrder: related,
		}
	} else {
		o.R.SalesOrder = related
	}

	if related.R == nil {
		related.R = &salesOrderR{
			GoodsReturnNotes: GoodsReturnNoteSlice{o},
		}
	} else {
		related.R.GoodsReturnNotes = append(related.R.GoodsReturnNotes, o)
	}

	return nil
}

// RemoveSalesOrder relationship.
// Sets o.R.SalesOrder to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GoodsReturnNote) RemoveSalesOrder(ctx context.Context, exec boil.ContextExecutor, related *SalesOrder) error {
	var err error

	queries.SetScanner(&o.SalesOrderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("sales_order_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SalesOrder = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GoodsReturnNotes {
		if queries.Equal(o.SalesOrderID, ri.SalesOrderID) {
			continue
		}

		ln := len(related.R.GoodsReturnNotes)
		if ln > 1 && i < ln-1 {
			related.R.GoodsReturnNotes[i] = related.R.GoodsReturnNotes[ln-1]
		}
		related.R.GoodsReturnNotes = related.R.GoodsReturnNotes[:ln-1]
		break
	}
	return nil
}

// AddGoodsReturnNoteItems adds the given related objects to the existing relationships
// of the goods_return_note, optionally inserting them as new records.
// Appends related to o.R.GoodsReturnNoteItems.
// Sets related.R.GoodsReturnNote appropriately.
func (o *GoodsReturnNote) AddGoodsReturnNoteItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GoodsReturnNoteItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GoodsReturnNoteID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale\".\"goods_return_note_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"goods_return_note_id"}),
				strmangle.WhereClause("\"", "\"", 2, goodsReturnNoteItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GoodsReturnNoteID = o.ID
		}
	}

	if o.R == nil {
		o.R = &goodsReturnNoteR{
			GoodsReturnNoteItems: related,
		}
	} else {
		o.R.GoodsReturnNoteItems = append(o.R.GoodsReturnNoteItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &goodsReturnNoteItemR{
				GoodsReturnNote: o,
			}
		} else {
			rel.R.GoodsReturnNote = o
		}
	}
	return nil
}

// GoodsReturnNotes retrieves all the records using an executor.
func GoodsReturnNotes(mods ...qm.QueryMod) goodsReturnNoteQuery {
	mods = append(mods, qm.From("\"sale\".\"goods_return_note\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale\".\"goods_return_note\".*"})
	}

	return goodsReturnNoteQuery{q}
}

// FindGoodsReturnNote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoodsReturnNote(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*GoodsReturnNote, error) {
	goodsReturnNoteObj := &GoodsReturnNote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sale\".\"goods_return_note\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, goodsReturnNoteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: unable to select from goods_return_note")
	}

	if err = goodsReturnNoteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return goodsReturnNoteObj, err
	}

	return goodsReturnNoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoodsReturnNote) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sale: no goods_return_note provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReturnNoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goodsReturnNoteInsertCacheMut.RLock()
	cache, cached := goodsReturnNoteInsertCache[key]
	goodsReturnNoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goodsReturnNoteAllColumns,
			goodsReturnNoteColumnsWithDefault,
			goodsReturnNoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goodsReturnNoteType, goodsReturnNoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goodsReturnNoteType, goodsReturnNoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\".\"goods_return_note\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\".\"goods_return_note\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sale: unable to insert into goods_return_note")
	}

	if !cached {
		goodsReturnNoteInsertCacheMut.Lock()
		goodsReturnNoteInsertCache[key] = cache
		goodsReturnNoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GoodsReturnNote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GoodsReturnNote) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	goodsReturnNoteUpdateCacheMut.RLock()
	cache, cached := goodsReturnNoteUpdateCache[key]
	goodsReturnNoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			goodsReturnNoteAllColumns,
			goodsReturnNotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sale: unable to update goods_return_note, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sale\".\"goods_return_note\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, goodsReturnNotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(goodsReturnNoteType, goodsReturnNoteMapping, append(wl, goodsReturnNotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update goods_return_note row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by update for goods_return_note")
	}

	if !cached {
		goodsReturnNoteUpdateCacheMut.Lock()
		goodsReturnNoteUpdateCache[key] = cache
		goodsReturnNoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q goodsReturnNoteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all for goods_return_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected for goods_return_note")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoodsReturnNoteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sale: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsReturnNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sale\".\"goods_return_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, goodsReturnNotePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all in goodsReturnNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected all in update all goodsReturnNote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoodsReturnNote) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sale: no goods_return_note provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReturnNoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goodsReturnNoteUpsertCacheMut.RLock()
	cache, cached := goodsReturnNoteUpsertCache[key]
	goodsReturnNoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goodsReturnNoteAllColumns,
			goodsReturnNoteColumnsWithDefault,
			goodsReturnNoteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goodsReturnNoteAllColumns,
			goodsReturnNotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sale: unable to upsert goods_return_note, could not build update column list")
		}

		ret := strmangle.SetComplement(goodsReturnNoteAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goodsReturnNotePrimaryKeyColumns) == 0 {
				return errors.New("sale: unable to upsert goods_return_note, could not build conflict column list")
			}

			conflict = make([]string, len(goodsReturnNotePrimaryKeyColumns))
			copy(conflict, goodsReturnNotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\".\"goods_return_note\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goodsReturnNoteType, goodsReturnNoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goodsReturnNoteType, goodsReturnNoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sale: unable to upsert goods_return_note")
	}

	if !cached {
		goodsReturnNoteUpsertCacheMut.Lock()
		goodsReturnNoteUpsertCache[key] = cache
		goodsReturnNoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GoodsReturnNote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GoodsReturnNote) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sale: no GoodsReturnNote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), goodsReturnNotePrimaryKeyMapping)
	sql := "DELETE FROM \"sale\".\"goods_return_note\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete from goods_return_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by delete for goods_return_note")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q goodsReturnNoteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sale: no goodsReturnNoteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from goods_return_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for goods_return_note")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoodsReturnNoteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(goodsReturnNoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsReturnNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sale\".\"goods_return_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goodsReturnNotePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from goodsReturnNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for goods_return_note")
	}

	if len(goodsReturnNoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GoodsReturnNote) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoodsReturnNote(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoodsReturnNoteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoodsReturnNoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsReturnNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sale\".\"goods_return_note\".* FROM \"sale\".\"goods_return_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goodsReturnNotePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sale: unable to reload all in GoodsReturnNoteSlice")
	}

	*o = slice

	return nil
}

// GoodsReturnNoteExists checks if the GoodsReturnNote row exists.
func GoodsReturnNoteExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sale\".\"goods_return_note\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sale: unable to check if goods_return_note exists")
	}

	return exists, nil
}

// Exists checks if the GoodsReturnNote row exists.
func (o *GoodsReturnNote) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GoodsReturnNoteExists(ctx, exec, o.ID)
}
