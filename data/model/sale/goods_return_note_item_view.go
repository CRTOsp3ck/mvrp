// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sale

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// GoodsReturnNoteItemView is an object representing the database table.
type GoodsReturnNoteItemView struct {
	ID                 null.Int          `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	BaseDocumentItemID null.Int          `boil:"base_document_item_id" json:"base_document_item_id,omitempty" toml:"base_document_item_id" yaml:"base_document_item_id,omitempty"`
	GoodsReturnNoteID  null.Int          `boil:"goods_return_note_id" json:"goods_return_note_id,omitempty" toml:"goods_return_note_id" yaml:"goods_return_note_id,omitempty"`
	RmaItemID          null.Int          `boil:"rma_item_id" json:"rma_item_id,omitempty" toml:"rma_item_id" yaml:"rma_item_id,omitempty"`
	ReturnQuantity     types.NullDecimal `boil:"return_quantity" json:"return_quantity,omitempty" toml:"return_quantity" yaml:"return_quantity,omitempty"`
	ReturnCondition    null.String       `boil:"return_condition" json:"return_condition,omitempty" toml:"return_condition" yaml:"return_condition,omitempty"`
	ReturnReason       null.String       `boil:"return_reason" json:"return_reason,omitempty" toml:"return_reason" yaml:"return_reason,omitempty"`
	BaseDocumentItem   null.JSON         `boil:"base_document_item" json:"base_document_item,omitempty" toml:"base_document_item" yaml:"base_document_item,omitempty"`
}

var GoodsReturnNoteItemViewColumns = struct {
	ID                 string
	BaseDocumentItemID string
	GoodsReturnNoteID  string
	RmaItemID          string
	ReturnQuantity     string
	ReturnCondition    string
	ReturnReason       string
	BaseDocumentItem   string
}{
	ID:                 "id",
	BaseDocumentItemID: "base_document_item_id",
	GoodsReturnNoteID:  "goods_return_note_id",
	RmaItemID:          "rma_item_id",
	ReturnQuantity:     "return_quantity",
	ReturnCondition:    "return_condition",
	ReturnReason:       "return_reason",
	BaseDocumentItem:   "base_document_item",
}

var GoodsReturnNoteItemViewTableColumns = struct {
	ID                 string
	BaseDocumentItemID string
	GoodsReturnNoteID  string
	RmaItemID          string
	ReturnQuantity     string
	ReturnCondition    string
	ReturnReason       string
	BaseDocumentItem   string
}{
	ID:                 "goods_return_note_item_view.id",
	BaseDocumentItemID: "goods_return_note_item_view.base_document_item_id",
	GoodsReturnNoteID:  "goods_return_note_item_view.goods_return_note_id",
	RmaItemID:          "goods_return_note_item_view.rma_item_id",
	ReturnQuantity:     "goods_return_note_item_view.return_quantity",
	ReturnCondition:    "goods_return_note_item_view.return_condition",
	ReturnReason:       "goods_return_note_item_view.return_reason",
	BaseDocumentItem:   "goods_return_note_item_view.base_document_item",
}

// Generated where

var GoodsReturnNoteItemViewWhere = struct {
	ID                 whereHelpernull_Int
	BaseDocumentItemID whereHelpernull_Int
	GoodsReturnNoteID  whereHelpernull_Int
	RmaItemID          whereHelpernull_Int
	ReturnQuantity     whereHelpertypes_NullDecimal
	ReturnCondition    whereHelpernull_String
	ReturnReason       whereHelpernull_String
	BaseDocumentItem   whereHelpernull_JSON
}{
	ID:                 whereHelpernull_Int{field: "\"sale\".\"goods_return_note_item_view\".\"id\""},
	BaseDocumentItemID: whereHelpernull_Int{field: "\"sale\".\"goods_return_note_item_view\".\"base_document_item_id\""},
	GoodsReturnNoteID:  whereHelpernull_Int{field: "\"sale\".\"goods_return_note_item_view\".\"goods_return_note_id\""},
	RmaItemID:          whereHelpernull_Int{field: "\"sale\".\"goods_return_note_item_view\".\"rma_item_id\""},
	ReturnQuantity:     whereHelpertypes_NullDecimal{field: "\"sale\".\"goods_return_note_item_view\".\"return_quantity\""},
	ReturnCondition:    whereHelpernull_String{field: "\"sale\".\"goods_return_note_item_view\".\"return_condition\""},
	ReturnReason:       whereHelpernull_String{field: "\"sale\".\"goods_return_note_item_view\".\"return_reason\""},
	BaseDocumentItem:   whereHelpernull_JSON{field: "\"sale\".\"goods_return_note_item_view\".\"base_document_item\""},
}

var (
	goodsReturnNoteItemViewAllColumns            = []string{"id", "base_document_item_id", "goods_return_note_id", "rma_item_id", "return_quantity", "return_condition", "return_reason", "base_document_item"}
	goodsReturnNoteItemViewColumnsWithoutDefault = []string{}
	goodsReturnNoteItemViewColumnsWithDefault    = []string{"id", "base_document_item_id", "goods_return_note_id", "rma_item_id", "return_quantity", "return_condition", "return_reason", "base_document_item"}
	goodsReturnNoteItemViewPrimaryKeyColumns     = []string{}
	goodsReturnNoteItemViewGeneratedColumns      = []string{}
)

type (
	// GoodsReturnNoteItemViewSlice is an alias for a slice of pointers to GoodsReturnNoteItemView.
	// This should almost always be used instead of []GoodsReturnNoteItemView.
	GoodsReturnNoteItemViewSlice []*GoodsReturnNoteItemView
	// GoodsReturnNoteItemViewHook is the signature for custom GoodsReturnNoteItemView hook methods
	GoodsReturnNoteItemViewHook func(context.Context, boil.ContextExecutor, *GoodsReturnNoteItemView) error

	goodsReturnNoteItemViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goodsReturnNoteItemViewType           = reflect.TypeOf(&GoodsReturnNoteItemView{})
	goodsReturnNoteItemViewMapping        = queries.MakeStructMapping(goodsReturnNoteItemViewType)
	goodsReturnNoteItemViewInsertCacheMut sync.RWMutex
	goodsReturnNoteItemViewInsertCache    = make(map[string]insertCache)
	goodsReturnNoteItemViewUpdateCacheMut sync.RWMutex
	goodsReturnNoteItemViewUpdateCache    = make(map[string]updateCache)
	goodsReturnNoteItemViewUpsertCacheMut sync.RWMutex
	goodsReturnNoteItemViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var goodsReturnNoteItemViewAfterSelectMu sync.Mutex
var goodsReturnNoteItemViewAfterSelectHooks []GoodsReturnNoteItemViewHook

var goodsReturnNoteItemViewBeforeInsertMu sync.Mutex
var goodsReturnNoteItemViewBeforeInsertHooks []GoodsReturnNoteItemViewHook
var goodsReturnNoteItemViewAfterInsertMu sync.Mutex
var goodsReturnNoteItemViewAfterInsertHooks []GoodsReturnNoteItemViewHook

var goodsReturnNoteItemViewBeforeUpsertMu sync.Mutex
var goodsReturnNoteItemViewBeforeUpsertHooks []GoodsReturnNoteItemViewHook
var goodsReturnNoteItemViewAfterUpsertMu sync.Mutex
var goodsReturnNoteItemViewAfterUpsertHooks []GoodsReturnNoteItemViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoodsReturnNoteItemView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoodsReturnNoteItemView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoodsReturnNoteItemView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoodsReturnNoteItemView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoodsReturnNoteItemView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoodsReturnNoteItemViewHook registers your hook function for all future operations.
func AddGoodsReturnNoteItemViewHook(hookPoint boil.HookPoint, goodsReturnNoteItemViewHook GoodsReturnNoteItemViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goodsReturnNoteItemViewAfterSelectMu.Lock()
		goodsReturnNoteItemViewAfterSelectHooks = append(goodsReturnNoteItemViewAfterSelectHooks, goodsReturnNoteItemViewHook)
		goodsReturnNoteItemViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goodsReturnNoteItemViewBeforeInsertMu.Lock()
		goodsReturnNoteItemViewBeforeInsertHooks = append(goodsReturnNoteItemViewBeforeInsertHooks, goodsReturnNoteItemViewHook)
		goodsReturnNoteItemViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goodsReturnNoteItemViewAfterInsertMu.Lock()
		goodsReturnNoteItemViewAfterInsertHooks = append(goodsReturnNoteItemViewAfterInsertHooks, goodsReturnNoteItemViewHook)
		goodsReturnNoteItemViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		goodsReturnNoteItemViewBeforeUpsertMu.Lock()
		goodsReturnNoteItemViewBeforeUpsertHooks = append(goodsReturnNoteItemViewBeforeUpsertHooks, goodsReturnNoteItemViewHook)
		goodsReturnNoteItemViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goodsReturnNoteItemViewAfterUpsertMu.Lock()
		goodsReturnNoteItemViewAfterUpsertHooks = append(goodsReturnNoteItemViewAfterUpsertHooks, goodsReturnNoteItemViewHook)
		goodsReturnNoteItemViewAfterUpsertMu.Unlock()
	}
}

// One returns a single goodsReturnNoteItemView record from the query.
func (q goodsReturnNoteItemViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoodsReturnNoteItemView, error) {
	o := &GoodsReturnNoteItemView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: failed to execute a one query for goods_return_note_item_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoodsReturnNoteItemView records from the query.
func (q goodsReturnNoteItemViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoodsReturnNoteItemViewSlice, error) {
	var o []*GoodsReturnNoteItemView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sale: failed to assign all query results to GoodsReturnNoteItemView slice")
	}

	if len(goodsReturnNoteItemViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoodsReturnNoteItemView records in the query.
func (q goodsReturnNoteItemViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to count goods_return_note_item_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goodsReturnNoteItemViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sale: failed to check if goods_return_note_item_view exists")
	}

	return count > 0, nil
}

// GoodsReturnNoteItemViews retrieves all the records using an executor.
func GoodsReturnNoteItemViews(mods ...qm.QueryMod) goodsReturnNoteItemViewQuery {
	mods = append(mods, qm.From("\"sale\".\"goods_return_note_item_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale\".\"goods_return_note_item_view\".*"})
	}

	return goodsReturnNoteItemViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoodsReturnNoteItemView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sale: no goods_return_note_item_view provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReturnNoteItemViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goodsReturnNoteItemViewInsertCacheMut.RLock()
	cache, cached := goodsReturnNoteItemViewInsertCache[key]
	goodsReturnNoteItemViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goodsReturnNoteItemViewAllColumns,
			goodsReturnNoteItemViewColumnsWithDefault,
			goodsReturnNoteItemViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goodsReturnNoteItemViewType, goodsReturnNoteItemViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goodsReturnNoteItemViewType, goodsReturnNoteItemViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\".\"goods_return_note_item_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\".\"goods_return_note_item_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sale: unable to insert into goods_return_note_item_view")
	}

	if !cached {
		goodsReturnNoteItemViewInsertCacheMut.Lock()
		goodsReturnNoteItemViewInsertCache[key] = cache
		goodsReturnNoteItemViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoodsReturnNoteItemView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sale: no goods_return_note_item_view provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReturnNoteItemViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goodsReturnNoteItemViewUpsertCacheMut.RLock()
	cache, cached := goodsReturnNoteItemViewUpsertCache[key]
	goodsReturnNoteItemViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goodsReturnNoteItemViewAllColumns,
			goodsReturnNoteItemViewColumnsWithDefault,
			goodsReturnNoteItemViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goodsReturnNoteItemViewAllColumns,
			goodsReturnNoteItemViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sale: unable to upsert goods_return_note_item_view, could not build update column list")
		}

		ret := strmangle.SetComplement(goodsReturnNoteItemViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goodsReturnNoteItemViewPrimaryKeyColumns) == 0 {
				return errors.New("sale: unable to upsert goods_return_note_item_view, could not build conflict column list")
			}

			conflict = make([]string, len(goodsReturnNoteItemViewPrimaryKeyColumns))
			copy(conflict, goodsReturnNoteItemViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\".\"goods_return_note_item_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goodsReturnNoteItemViewType, goodsReturnNoteItemViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goodsReturnNoteItemViewType, goodsReturnNoteItemViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sale: unable to upsert goods_return_note_item_view")
	}

	if !cached {
		goodsReturnNoteItemViewUpsertCacheMut.Lock()
		goodsReturnNoteItemViewUpsertCache[key] = cache
		goodsReturnNoteItemViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
