// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sale

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SalesQuotationItem is an object representing the database table.
type SalesQuotationItem struct {
	ID                 int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentItemID int       `boil:"base_document_item_id" json:"base_document_item_id" toml:"base_document_item_id" yaml:"base_document_item_id"`
	SalesQuotationID   int       `boil:"sales_quotation_id" json:"sales_quotation_id" toml:"sales_quotation_id" yaml:"sales_quotation_id"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *salesQuotationItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L salesQuotationItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SalesQuotationItemColumns = struct {
	ID                 string
	BaseDocumentItemID string
	SalesQuotationID   string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	BaseDocumentItemID: "base_document_item_id",
	SalesQuotationID:   "sales_quotation_id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var SalesQuotationItemTableColumns = struct {
	ID                 string
	BaseDocumentItemID string
	SalesQuotationID   string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "sales_quotation_item.id",
	BaseDocumentItemID: "sales_quotation_item.base_document_item_id",
	SalesQuotationID:   "sales_quotation_item.sales_quotation_id",
	CreatedAt:          "sales_quotation_item.created_at",
	UpdatedAt:          "sales_quotation_item.updated_at",
	DeletedAt:          "sales_quotation_item.deleted_at",
}

// Generated where

var SalesQuotationItemWhere = struct {
	ID                 whereHelperint
	BaseDocumentItemID whereHelperint
	SalesQuotationID   whereHelperint
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: "\"sale\".\"sales_quotation_item\".\"id\""},
	BaseDocumentItemID: whereHelperint{field: "\"sale\".\"sales_quotation_item\".\"base_document_item_id\""},
	SalesQuotationID:   whereHelperint{field: "\"sale\".\"sales_quotation_item\".\"sales_quotation_id\""},
	CreatedAt:          whereHelpertime_Time{field: "\"sale\".\"sales_quotation_item\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"sale\".\"sales_quotation_item\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"sale\".\"sales_quotation_item\".\"deleted_at\""},
}

// SalesQuotationItemRels is where relationship names are stored.
var SalesQuotationItemRels = struct {
	SalesQuotation string
}{
	SalesQuotation: "SalesQuotation",
}

// salesQuotationItemR is where relationships are stored.
type salesQuotationItemR struct {
	SalesQuotation *SalesQuotation `boil:"SalesQuotation" json:"SalesQuotation" toml:"SalesQuotation" yaml:"SalesQuotation"`
}

// NewStruct creates a new relationship struct
func (*salesQuotationItemR) NewStruct() *salesQuotationItemR {
	return &salesQuotationItemR{}
}

func (r *salesQuotationItemR) GetSalesQuotation() *SalesQuotation {
	if r == nil {
		return nil
	}
	return r.SalesQuotation
}

// salesQuotationItemL is where Load methods for each relationship are stored.
type salesQuotationItemL struct{}

var (
	salesQuotationItemAllColumns            = []string{"id", "base_document_item_id", "sales_quotation_id", "created_at", "updated_at", "deleted_at"}
	salesQuotationItemColumnsWithoutDefault = []string{"id", "base_document_item_id", "sales_quotation_id", "created_at", "updated_at"}
	salesQuotationItemColumnsWithDefault    = []string{"deleted_at"}
	salesQuotationItemPrimaryKeyColumns     = []string{"id"}
	salesQuotationItemGeneratedColumns      = []string{}
)

type (
	// SalesQuotationItemSlice is an alias for a slice of pointers to SalesQuotationItem.
	// This should almost always be used instead of []SalesQuotationItem.
	SalesQuotationItemSlice []*SalesQuotationItem
	// SalesQuotationItemHook is the signature for custom SalesQuotationItem hook methods
	SalesQuotationItemHook func(context.Context, boil.ContextExecutor, *SalesQuotationItem) error

	salesQuotationItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	salesQuotationItemType                 = reflect.TypeOf(&SalesQuotationItem{})
	salesQuotationItemMapping              = queries.MakeStructMapping(salesQuotationItemType)
	salesQuotationItemPrimaryKeyMapping, _ = queries.BindMapping(salesQuotationItemType, salesQuotationItemMapping, salesQuotationItemPrimaryKeyColumns)
	salesQuotationItemInsertCacheMut       sync.RWMutex
	salesQuotationItemInsertCache          = make(map[string]insertCache)
	salesQuotationItemUpdateCacheMut       sync.RWMutex
	salesQuotationItemUpdateCache          = make(map[string]updateCache)
	salesQuotationItemUpsertCacheMut       sync.RWMutex
	salesQuotationItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var salesQuotationItemAfterSelectMu sync.Mutex
var salesQuotationItemAfterSelectHooks []SalesQuotationItemHook

var salesQuotationItemBeforeInsertMu sync.Mutex
var salesQuotationItemBeforeInsertHooks []SalesQuotationItemHook
var salesQuotationItemAfterInsertMu sync.Mutex
var salesQuotationItemAfterInsertHooks []SalesQuotationItemHook

var salesQuotationItemBeforeUpdateMu sync.Mutex
var salesQuotationItemBeforeUpdateHooks []SalesQuotationItemHook
var salesQuotationItemAfterUpdateMu sync.Mutex
var salesQuotationItemAfterUpdateHooks []SalesQuotationItemHook

var salesQuotationItemBeforeDeleteMu sync.Mutex
var salesQuotationItemBeforeDeleteHooks []SalesQuotationItemHook
var salesQuotationItemAfterDeleteMu sync.Mutex
var salesQuotationItemAfterDeleteHooks []SalesQuotationItemHook

var salesQuotationItemBeforeUpsertMu sync.Mutex
var salesQuotationItemBeforeUpsertHooks []SalesQuotationItemHook
var salesQuotationItemAfterUpsertMu sync.Mutex
var salesQuotationItemAfterUpsertHooks []SalesQuotationItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SalesQuotationItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SalesQuotationItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SalesQuotationItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SalesQuotationItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SalesQuotationItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SalesQuotationItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SalesQuotationItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SalesQuotationItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SalesQuotationItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSalesQuotationItemHook registers your hook function for all future operations.
func AddSalesQuotationItemHook(hookPoint boil.HookPoint, salesQuotationItemHook SalesQuotationItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		salesQuotationItemAfterSelectMu.Lock()
		salesQuotationItemAfterSelectHooks = append(salesQuotationItemAfterSelectHooks, salesQuotationItemHook)
		salesQuotationItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		salesQuotationItemBeforeInsertMu.Lock()
		salesQuotationItemBeforeInsertHooks = append(salesQuotationItemBeforeInsertHooks, salesQuotationItemHook)
		salesQuotationItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		salesQuotationItemAfterInsertMu.Lock()
		salesQuotationItemAfterInsertHooks = append(salesQuotationItemAfterInsertHooks, salesQuotationItemHook)
		salesQuotationItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		salesQuotationItemBeforeUpdateMu.Lock()
		salesQuotationItemBeforeUpdateHooks = append(salesQuotationItemBeforeUpdateHooks, salesQuotationItemHook)
		salesQuotationItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		salesQuotationItemAfterUpdateMu.Lock()
		salesQuotationItemAfterUpdateHooks = append(salesQuotationItemAfterUpdateHooks, salesQuotationItemHook)
		salesQuotationItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		salesQuotationItemBeforeDeleteMu.Lock()
		salesQuotationItemBeforeDeleteHooks = append(salesQuotationItemBeforeDeleteHooks, salesQuotationItemHook)
		salesQuotationItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		salesQuotationItemAfterDeleteMu.Lock()
		salesQuotationItemAfterDeleteHooks = append(salesQuotationItemAfterDeleteHooks, salesQuotationItemHook)
		salesQuotationItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		salesQuotationItemBeforeUpsertMu.Lock()
		salesQuotationItemBeforeUpsertHooks = append(salesQuotationItemBeforeUpsertHooks, salesQuotationItemHook)
		salesQuotationItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		salesQuotationItemAfterUpsertMu.Lock()
		salesQuotationItemAfterUpsertHooks = append(salesQuotationItemAfterUpsertHooks, salesQuotationItemHook)
		salesQuotationItemAfterUpsertMu.Unlock()
	}
}

// One returns a single salesQuotationItem record from the query.
func (q salesQuotationItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SalesQuotationItem, error) {
	o := &SalesQuotationItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: failed to execute a one query for sales_quotation_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SalesQuotationItem records from the query.
func (q salesQuotationItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (SalesQuotationItemSlice, error) {
	var o []*SalesQuotationItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sale: failed to assign all query results to SalesQuotationItem slice")
	}

	if len(salesQuotationItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SalesQuotationItem records in the query.
func (q salesQuotationItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to count sales_quotation_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q salesQuotationItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sale: failed to check if sales_quotation_item exists")
	}

	return count > 0, nil
}

// SalesQuotation pointed to by the foreign key.
func (o *SalesQuotationItem) SalesQuotation(mods ...qm.QueryMod) salesQuotationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SalesQuotationID),
	}

	queryMods = append(queryMods, mods...)

	return SalesQuotations(queryMods...)
}

// LoadSalesQuotation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (salesQuotationItemL) LoadSalesQuotation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalesQuotationItem interface{}, mods queries.Applicator) error {
	var slice []*SalesQuotationItem
	var object *SalesQuotationItem

	if singular {
		var ok bool
		object, ok = maybeSalesQuotationItem.(*SalesQuotationItem)
		if !ok {
			object = new(SalesQuotationItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSalesQuotationItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSalesQuotationItem))
			}
		}
	} else {
		s, ok := maybeSalesQuotationItem.(*[]*SalesQuotationItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSalesQuotationItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSalesQuotationItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &salesQuotationItemR{}
		}
		args[object.SalesQuotationID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salesQuotationItemR{}
			}

			args[obj.SalesQuotationID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.sales_quotation`),
		qm.WhereIn(`sale.sales_quotation.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SalesQuotation")
	}

	var resultSlice []*SalesQuotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SalesQuotation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sales_quotation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sales_quotation")
	}

	if len(salesQuotationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesQuotation = foreign
		if foreign.R == nil {
			foreign.R = &salesQuotationR{}
		}
		foreign.R.SalesQuotationItems = append(foreign.R.SalesQuotationItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesQuotationID == foreign.ID {
				local.R.SalesQuotation = foreign
				if foreign.R == nil {
					foreign.R = &salesQuotationR{}
				}
				foreign.R.SalesQuotationItems = append(foreign.R.SalesQuotationItems, local)
				break
			}
		}
	}

	return nil
}

// SetSalesQuotation of the salesQuotationItem to the related item.
// Sets o.R.SalesQuotation to related.
// Adds o to related.R.SalesQuotationItems.
func (o *SalesQuotationItem) SetSalesQuotation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SalesQuotation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale\".\"sales_quotation_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sales_quotation_id"}),
		strmangle.WhereClause("\"", "\"", 2, salesQuotationItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesQuotationID = related.ID
	if o.R == nil {
		o.R = &salesQuotationItemR{
			SalesQuotation: related,
		}
	} else {
		o.R.SalesQuotation = related
	}

	if related.R == nil {
		related.R = &salesQuotationR{
			SalesQuotationItems: SalesQuotationItemSlice{o},
		}
	} else {
		related.R.SalesQuotationItems = append(related.R.SalesQuotationItems, o)
	}

	return nil
}

// SalesQuotationItems retrieves all the records using an executor.
func SalesQuotationItems(mods ...qm.QueryMod) salesQuotationItemQuery {
	mods = append(mods, qm.From("\"sale\".\"sales_quotation_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale\".\"sales_quotation_item\".*"})
	}

	return salesQuotationItemQuery{q}
}

// FindSalesQuotationItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSalesQuotationItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SalesQuotationItem, error) {
	salesQuotationItemObj := &SalesQuotationItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sale\".\"sales_quotation_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, salesQuotationItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: unable to select from sales_quotation_item")
	}

	if err = salesQuotationItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return salesQuotationItemObj, err
	}

	return salesQuotationItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SalesQuotationItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sale: no sales_quotation_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salesQuotationItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	salesQuotationItemInsertCacheMut.RLock()
	cache, cached := salesQuotationItemInsertCache[key]
	salesQuotationItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			salesQuotationItemAllColumns,
			salesQuotationItemColumnsWithDefault,
			salesQuotationItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(salesQuotationItemType, salesQuotationItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(salesQuotationItemType, salesQuotationItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\".\"sales_quotation_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\".\"sales_quotation_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sale: unable to insert into sales_quotation_item")
	}

	if !cached {
		salesQuotationItemInsertCacheMut.Lock()
		salesQuotationItemInsertCache[key] = cache
		salesQuotationItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SalesQuotationItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SalesQuotationItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	salesQuotationItemUpdateCacheMut.RLock()
	cache, cached := salesQuotationItemUpdateCache[key]
	salesQuotationItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			salesQuotationItemAllColumns,
			salesQuotationItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sale: unable to update sales_quotation_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sale\".\"sales_quotation_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, salesQuotationItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(salesQuotationItemType, salesQuotationItemMapping, append(wl, salesQuotationItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update sales_quotation_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by update for sales_quotation_item")
	}

	if !cached {
		salesQuotationItemUpdateCacheMut.Lock()
		salesQuotationItemUpdateCache[key] = cache
		salesQuotationItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q salesQuotationItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all for sales_quotation_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected for sales_quotation_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SalesQuotationItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sale: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salesQuotationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sale\".\"sales_quotation_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, salesQuotationItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all in salesQuotationItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected all in update all salesQuotationItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SalesQuotationItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sale: no sales_quotation_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salesQuotationItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	salesQuotationItemUpsertCacheMut.RLock()
	cache, cached := salesQuotationItemUpsertCache[key]
	salesQuotationItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			salesQuotationItemAllColumns,
			salesQuotationItemColumnsWithDefault,
			salesQuotationItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			salesQuotationItemAllColumns,
			salesQuotationItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sale: unable to upsert sales_quotation_item, could not build update column list")
		}

		ret := strmangle.SetComplement(salesQuotationItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(salesQuotationItemPrimaryKeyColumns) == 0 {
				return errors.New("sale: unable to upsert sales_quotation_item, could not build conflict column list")
			}

			conflict = make([]string, len(salesQuotationItemPrimaryKeyColumns))
			copy(conflict, salesQuotationItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\".\"sales_quotation_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(salesQuotationItemType, salesQuotationItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(salesQuotationItemType, salesQuotationItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sale: unable to upsert sales_quotation_item")
	}

	if !cached {
		salesQuotationItemUpsertCacheMut.Lock()
		salesQuotationItemUpsertCache[key] = cache
		salesQuotationItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SalesQuotationItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SalesQuotationItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sale: no SalesQuotationItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), salesQuotationItemPrimaryKeyMapping)
	sql := "DELETE FROM \"sale\".\"sales_quotation_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete from sales_quotation_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by delete for sales_quotation_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q salesQuotationItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sale: no salesQuotationItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from sales_quotation_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for sales_quotation_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SalesQuotationItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(salesQuotationItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salesQuotationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sale\".\"sales_quotation_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, salesQuotationItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from salesQuotationItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for sales_quotation_item")
	}

	if len(salesQuotationItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SalesQuotationItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSalesQuotationItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SalesQuotationItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SalesQuotationItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salesQuotationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sale\".\"sales_quotation_item\".* FROM \"sale\".\"sales_quotation_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, salesQuotationItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sale: unable to reload all in SalesQuotationItemSlice")
	}

	*o = slice

	return nil
}

// SalesQuotationItemExists checks if the SalesQuotationItem row exists.
func SalesQuotationItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sale\".\"sales_quotation_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sale: unable to check if sales_quotation_item exists")
	}

	return exists, nil
}

// Exists checks if the SalesQuotationItem row exists.
func (o *SalesQuotationItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SalesQuotationItemExists(ctx, exec, o.ID)
}
