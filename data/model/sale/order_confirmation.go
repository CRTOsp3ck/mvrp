// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sale

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderConfirmation is an object representing the database table.
type OrderConfirmation struct {
	ID                      int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentID          int         `boil:"base_document_id" json:"base_document_id" toml:"base_document_id" yaml:"base_document_id"`
	OrderConfirmationNumber string      `boil:"order_confirmation_number" json:"order_confirmation_number" toml:"order_confirmation_number" yaml:"order_confirmation_number"`
	SalesOrderID            int         `boil:"sales_order_id" json:"sales_order_id" toml:"sales_order_id" yaml:"sales_order_id"`
	CustomerID              null.Int    `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	ShipToInformation       null.String `boil:"ship_to_information" json:"ship_to_information,omitempty" toml:"ship_to_information" yaml:"ship_to_information,omitempty"`

	R *orderConfirmationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderConfirmationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderConfirmationColumns = struct {
	ID                      string
	BaseDocumentID          string
	OrderConfirmationNumber string
	SalesOrderID            string
	CustomerID              string
	ShipToInformation       string
}{
	ID:                      "id",
	BaseDocumentID:          "base_document_id",
	OrderConfirmationNumber: "order_confirmation_number",
	SalesOrderID:            "sales_order_id",
	CustomerID:              "customer_id",
	ShipToInformation:       "ship_to_information",
}

var OrderConfirmationTableColumns = struct {
	ID                      string
	BaseDocumentID          string
	OrderConfirmationNumber string
	SalesOrderID            string
	CustomerID              string
	ShipToInformation       string
}{
	ID:                      "order_confirmation.id",
	BaseDocumentID:          "order_confirmation.base_document_id",
	OrderConfirmationNumber: "order_confirmation.order_confirmation_number",
	SalesOrderID:            "order_confirmation.sales_order_id",
	CustomerID:              "order_confirmation.customer_id",
	ShipToInformation:       "order_confirmation.ship_to_information",
}

// Generated where

var OrderConfirmationWhere = struct {
	ID                      whereHelperint
	BaseDocumentID          whereHelperint
	OrderConfirmationNumber whereHelperstring
	SalesOrderID            whereHelperint
	CustomerID              whereHelpernull_Int
	ShipToInformation       whereHelpernull_String
}{
	ID:                      whereHelperint{field: "\"sale\".\"order_confirmation\".\"id\""},
	BaseDocumentID:          whereHelperint{field: "\"sale\".\"order_confirmation\".\"base_document_id\""},
	OrderConfirmationNumber: whereHelperstring{field: "\"sale\".\"order_confirmation\".\"order_confirmation_number\""},
	SalesOrderID:            whereHelperint{field: "\"sale\".\"order_confirmation\".\"sales_order_id\""},
	CustomerID:              whereHelpernull_Int{field: "\"sale\".\"order_confirmation\".\"customer_id\""},
	ShipToInformation:       whereHelpernull_String{field: "\"sale\".\"order_confirmation\".\"ship_to_information\""},
}

// OrderConfirmationRels is where relationship names are stored.
var OrderConfirmationRels = struct {
	SalesOrder             string
	OrderConfirmationItems string
}{
	SalesOrder:             "SalesOrder",
	OrderConfirmationItems: "OrderConfirmationItems",
}

// orderConfirmationR is where relationships are stored.
type orderConfirmationR struct {
	SalesOrder             *SalesOrder                `boil:"SalesOrder" json:"SalesOrder" toml:"SalesOrder" yaml:"SalesOrder"`
	OrderConfirmationItems OrderConfirmationItemSlice `boil:"OrderConfirmationItems" json:"OrderConfirmationItems" toml:"OrderConfirmationItems" yaml:"OrderConfirmationItems"`
}

// NewStruct creates a new relationship struct
func (*orderConfirmationR) NewStruct() *orderConfirmationR {
	return &orderConfirmationR{}
}

func (r *orderConfirmationR) GetSalesOrder() *SalesOrder {
	if r == nil {
		return nil
	}
	return r.SalesOrder
}

func (r *orderConfirmationR) GetOrderConfirmationItems() OrderConfirmationItemSlice {
	if r == nil {
		return nil
	}
	return r.OrderConfirmationItems
}

// orderConfirmationL is where Load methods for each relationship are stored.
type orderConfirmationL struct{}

var (
	orderConfirmationAllColumns            = []string{"id", "base_document_id", "order_confirmation_number", "sales_order_id", "customer_id", "ship_to_information"}
	orderConfirmationColumnsWithoutDefault = []string{"id", "base_document_id", "order_confirmation_number", "sales_order_id"}
	orderConfirmationColumnsWithDefault    = []string{"customer_id", "ship_to_information"}
	orderConfirmationPrimaryKeyColumns     = []string{"id"}
	orderConfirmationGeneratedColumns      = []string{}
)

type (
	// OrderConfirmationSlice is an alias for a slice of pointers to OrderConfirmation.
	// This should almost always be used instead of []OrderConfirmation.
	OrderConfirmationSlice []*OrderConfirmation
	// OrderConfirmationHook is the signature for custom OrderConfirmation hook methods
	OrderConfirmationHook func(context.Context, boil.ContextExecutor, *OrderConfirmation) error

	orderConfirmationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderConfirmationType                 = reflect.TypeOf(&OrderConfirmation{})
	orderConfirmationMapping              = queries.MakeStructMapping(orderConfirmationType)
	orderConfirmationPrimaryKeyMapping, _ = queries.BindMapping(orderConfirmationType, orderConfirmationMapping, orderConfirmationPrimaryKeyColumns)
	orderConfirmationInsertCacheMut       sync.RWMutex
	orderConfirmationInsertCache          = make(map[string]insertCache)
	orderConfirmationUpdateCacheMut       sync.RWMutex
	orderConfirmationUpdateCache          = make(map[string]updateCache)
	orderConfirmationUpsertCacheMut       sync.RWMutex
	orderConfirmationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderConfirmationAfterSelectMu sync.Mutex
var orderConfirmationAfterSelectHooks []OrderConfirmationHook

var orderConfirmationBeforeInsertMu sync.Mutex
var orderConfirmationBeforeInsertHooks []OrderConfirmationHook
var orderConfirmationAfterInsertMu sync.Mutex
var orderConfirmationAfterInsertHooks []OrderConfirmationHook

var orderConfirmationBeforeUpdateMu sync.Mutex
var orderConfirmationBeforeUpdateHooks []OrderConfirmationHook
var orderConfirmationAfterUpdateMu sync.Mutex
var orderConfirmationAfterUpdateHooks []OrderConfirmationHook

var orderConfirmationBeforeDeleteMu sync.Mutex
var orderConfirmationBeforeDeleteHooks []OrderConfirmationHook
var orderConfirmationAfterDeleteMu sync.Mutex
var orderConfirmationAfterDeleteHooks []OrderConfirmationHook

var orderConfirmationBeforeUpsertMu sync.Mutex
var orderConfirmationBeforeUpsertHooks []OrderConfirmationHook
var orderConfirmationAfterUpsertMu sync.Mutex
var orderConfirmationAfterUpsertHooks []OrderConfirmationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderConfirmation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderConfirmation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderConfirmation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderConfirmation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderConfirmation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderConfirmation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderConfirmation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderConfirmation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderConfirmation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderConfirmationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderConfirmationHook registers your hook function for all future operations.
func AddOrderConfirmationHook(hookPoint boil.HookPoint, orderConfirmationHook OrderConfirmationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderConfirmationAfterSelectMu.Lock()
		orderConfirmationAfterSelectHooks = append(orderConfirmationAfterSelectHooks, orderConfirmationHook)
		orderConfirmationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderConfirmationBeforeInsertMu.Lock()
		orderConfirmationBeforeInsertHooks = append(orderConfirmationBeforeInsertHooks, orderConfirmationHook)
		orderConfirmationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderConfirmationAfterInsertMu.Lock()
		orderConfirmationAfterInsertHooks = append(orderConfirmationAfterInsertHooks, orderConfirmationHook)
		orderConfirmationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderConfirmationBeforeUpdateMu.Lock()
		orderConfirmationBeforeUpdateHooks = append(orderConfirmationBeforeUpdateHooks, orderConfirmationHook)
		orderConfirmationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderConfirmationAfterUpdateMu.Lock()
		orderConfirmationAfterUpdateHooks = append(orderConfirmationAfterUpdateHooks, orderConfirmationHook)
		orderConfirmationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderConfirmationBeforeDeleteMu.Lock()
		orderConfirmationBeforeDeleteHooks = append(orderConfirmationBeforeDeleteHooks, orderConfirmationHook)
		orderConfirmationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderConfirmationAfterDeleteMu.Lock()
		orderConfirmationAfterDeleteHooks = append(orderConfirmationAfterDeleteHooks, orderConfirmationHook)
		orderConfirmationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderConfirmationBeforeUpsertMu.Lock()
		orderConfirmationBeforeUpsertHooks = append(orderConfirmationBeforeUpsertHooks, orderConfirmationHook)
		orderConfirmationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderConfirmationAfterUpsertMu.Lock()
		orderConfirmationAfterUpsertHooks = append(orderConfirmationAfterUpsertHooks, orderConfirmationHook)
		orderConfirmationAfterUpsertMu.Unlock()
	}
}

// One returns a single orderConfirmation record from the query.
func (q orderConfirmationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderConfirmation, error) {
	o := &OrderConfirmation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: failed to execute a one query for order_confirmation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrderConfirmation records from the query.
func (q orderConfirmationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderConfirmationSlice, error) {
	var o []*OrderConfirmation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sale: failed to assign all query results to OrderConfirmation slice")
	}

	if len(orderConfirmationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrderConfirmation records in the query.
func (q orderConfirmationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to count order_confirmation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderConfirmationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sale: failed to check if order_confirmation exists")
	}

	return count > 0, nil
}

// SalesOrder pointed to by the foreign key.
func (o *OrderConfirmation) SalesOrder(mods ...qm.QueryMod) salesOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SalesOrderID),
	}

	queryMods = append(queryMods, mods...)

	return SalesOrders(queryMods...)
}

// OrderConfirmationItems retrieves all the order_confirmation_item's OrderConfirmationItems with an executor.
func (o *OrderConfirmation) OrderConfirmationItems(mods ...qm.QueryMod) orderConfirmationItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale\".\"order_confirmation_item\".\"order_confirmation_id\"=?", o.ID),
	)

	return OrderConfirmationItems(queryMods...)
}

// LoadSalesOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderConfirmationL) LoadSalesOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderConfirmation interface{}, mods queries.Applicator) error {
	var slice []*OrderConfirmation
	var object *OrderConfirmation

	if singular {
		var ok bool
		object, ok = maybeOrderConfirmation.(*OrderConfirmation)
		if !ok {
			object = new(OrderConfirmation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderConfirmation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderConfirmation))
			}
		}
	} else {
		s, ok := maybeOrderConfirmation.(*[]*OrderConfirmation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderConfirmation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderConfirmation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderConfirmationR{}
		}
		args[object.SalesOrderID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderConfirmationR{}
			}

			args[obj.SalesOrderID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.sales_order`),
		qm.WhereIn(`sale.sales_order.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SalesOrder")
	}

	var resultSlice []*SalesOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SalesOrder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sales_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sales_order")
	}

	if len(salesOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesOrder = foreign
		if foreign.R == nil {
			foreign.R = &salesOrderR{}
		}
		foreign.R.OrderConfirmations = append(foreign.R.OrderConfirmations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesOrderID == foreign.ID {
				local.R.SalesOrder = foreign
				if foreign.R == nil {
					foreign.R = &salesOrderR{}
				}
				foreign.R.OrderConfirmations = append(foreign.R.OrderConfirmations, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderConfirmationItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderConfirmationL) LoadOrderConfirmationItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderConfirmation interface{}, mods queries.Applicator) error {
	var slice []*OrderConfirmation
	var object *OrderConfirmation

	if singular {
		var ok bool
		object, ok = maybeOrderConfirmation.(*OrderConfirmation)
		if !ok {
			object = new(OrderConfirmation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderConfirmation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderConfirmation))
			}
		}
	} else {
		s, ok := maybeOrderConfirmation.(*[]*OrderConfirmation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderConfirmation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderConfirmation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderConfirmationR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderConfirmationR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.order_confirmation_item`),
		qm.WhereIn(`sale.order_confirmation_item.order_confirmation_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_confirmation_item")
	}

	var resultSlice []*OrderConfirmationItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_confirmation_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_confirmation_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_confirmation_item")
	}

	if len(orderConfirmationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderConfirmationItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderConfirmationItemR{}
			}
			foreign.R.OrderConfirmation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrderConfirmationID {
				local.R.OrderConfirmationItems = append(local.R.OrderConfirmationItems, foreign)
				if foreign.R == nil {
					foreign.R = &orderConfirmationItemR{}
				}
				foreign.R.OrderConfirmation = local
				break
			}
		}
	}

	return nil
}

// SetSalesOrder of the orderConfirmation to the related item.
// Sets o.R.SalesOrder to related.
// Adds o to related.R.OrderConfirmations.
func (o *OrderConfirmation) SetSalesOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SalesOrder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale\".\"order_confirmation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sales_order_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderConfirmationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesOrderID = related.ID
	if o.R == nil {
		o.R = &orderConfirmationR{
			SalesOrder: related,
		}
	} else {
		o.R.SalesOrder = related
	}

	if related.R == nil {
		related.R = &salesOrderR{
			OrderConfirmations: OrderConfirmationSlice{o},
		}
	} else {
		related.R.OrderConfirmations = append(related.R.OrderConfirmations, o)
	}

	return nil
}

// AddOrderConfirmationItems adds the given related objects to the existing relationships
// of the order_confirmation, optionally inserting them as new records.
// Appends related to o.R.OrderConfirmationItems.
// Sets related.R.OrderConfirmation appropriately.
func (o *OrderConfirmation) AddOrderConfirmationItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderConfirmationItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrderConfirmationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale\".\"order_confirmation_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_confirmation_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderConfirmationItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrderConfirmationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &orderConfirmationR{
			OrderConfirmationItems: related,
		}
	} else {
		o.R.OrderConfirmationItems = append(o.R.OrderConfirmationItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderConfirmationItemR{
				OrderConfirmation: o,
			}
		} else {
			rel.R.OrderConfirmation = o
		}
	}
	return nil
}

// OrderConfirmations retrieves all the records using an executor.
func OrderConfirmations(mods ...qm.QueryMod) orderConfirmationQuery {
	mods = append(mods, qm.From("\"sale\".\"order_confirmation\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale\".\"order_confirmation\".*"})
	}

	return orderConfirmationQuery{q}
}

// FindOrderConfirmation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderConfirmation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OrderConfirmation, error) {
	orderConfirmationObj := &OrderConfirmation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sale\".\"order_confirmation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderConfirmationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: unable to select from order_confirmation")
	}

	if err = orderConfirmationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderConfirmationObj, err
	}

	return orderConfirmationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderConfirmation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sale: no order_confirmation provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderConfirmationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderConfirmationInsertCacheMut.RLock()
	cache, cached := orderConfirmationInsertCache[key]
	orderConfirmationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderConfirmationAllColumns,
			orderConfirmationColumnsWithDefault,
			orderConfirmationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderConfirmationType, orderConfirmationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderConfirmationType, orderConfirmationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\".\"order_confirmation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\".\"order_confirmation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sale: unable to insert into order_confirmation")
	}

	if !cached {
		orderConfirmationInsertCacheMut.Lock()
		orderConfirmationInsertCache[key] = cache
		orderConfirmationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrderConfirmation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderConfirmation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderConfirmationUpdateCacheMut.RLock()
	cache, cached := orderConfirmationUpdateCache[key]
	orderConfirmationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderConfirmationAllColumns,
			orderConfirmationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sale: unable to update order_confirmation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sale\".\"order_confirmation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderConfirmationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderConfirmationType, orderConfirmationMapping, append(wl, orderConfirmationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update order_confirmation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by update for order_confirmation")
	}

	if !cached {
		orderConfirmationUpdateCacheMut.Lock()
		orderConfirmationUpdateCache[key] = cache
		orderConfirmationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderConfirmationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all for order_confirmation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected for order_confirmation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderConfirmationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sale: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderConfirmationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sale\".\"order_confirmation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderConfirmationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all in orderConfirmation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected all in update all orderConfirmation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderConfirmation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sale: no order_confirmation provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderConfirmationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderConfirmationUpsertCacheMut.RLock()
	cache, cached := orderConfirmationUpsertCache[key]
	orderConfirmationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderConfirmationAllColumns,
			orderConfirmationColumnsWithDefault,
			orderConfirmationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderConfirmationAllColumns,
			orderConfirmationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sale: unable to upsert order_confirmation, could not build update column list")
		}

		ret := strmangle.SetComplement(orderConfirmationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(orderConfirmationPrimaryKeyColumns) == 0 {
				return errors.New("sale: unable to upsert order_confirmation, could not build conflict column list")
			}

			conflict = make([]string, len(orderConfirmationPrimaryKeyColumns))
			copy(conflict, orderConfirmationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\".\"order_confirmation\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(orderConfirmationType, orderConfirmationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderConfirmationType, orderConfirmationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sale: unable to upsert order_confirmation")
	}

	if !cached {
		orderConfirmationUpsertCacheMut.Lock()
		orderConfirmationUpsertCache[key] = cache
		orderConfirmationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrderConfirmation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderConfirmation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sale: no OrderConfirmation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderConfirmationPrimaryKeyMapping)
	sql := "DELETE FROM \"sale\".\"order_confirmation\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete from order_confirmation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by delete for order_confirmation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderConfirmationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sale: no orderConfirmationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from order_confirmation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for order_confirmation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderConfirmationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderConfirmationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderConfirmationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sale\".\"order_confirmation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderConfirmationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from orderConfirmation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for order_confirmation")
	}

	if len(orderConfirmationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderConfirmation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderConfirmation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderConfirmationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderConfirmationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderConfirmationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sale\".\"order_confirmation\".* FROM \"sale\".\"order_confirmation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderConfirmationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sale: unable to reload all in OrderConfirmationSlice")
	}

	*o = slice

	return nil
}

// OrderConfirmationExists checks if the OrderConfirmation row exists.
func OrderConfirmationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sale\".\"order_confirmation\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sale: unable to check if order_confirmation exists")
	}

	return exists, nil
}

// Exists checks if the OrderConfirmation row exists.
func (o *OrderConfirmation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderConfirmationExists(ctx, exec, o.ID)
}
