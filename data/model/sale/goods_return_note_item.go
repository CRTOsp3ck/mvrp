// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sale

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// GoodsReturnNoteItem is an object representing the database table.
type GoodsReturnNoteItem struct {
	ID                 int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentItemID int               `boil:"base_document_item_id" json:"base_document_item_id" toml:"base_document_item_id" yaml:"base_document_item_id"`
	GoodsReturnNoteID  int               `boil:"goods_return_note_id" json:"goods_return_note_id" toml:"goods_return_note_id" yaml:"goods_return_note_id"`
	RmaItemID          null.Int          `boil:"rma_item_id" json:"rma_item_id,omitempty" toml:"rma_item_id" yaml:"rma_item_id,omitempty"`
	ReturnQuantity     types.NullDecimal `boil:"return_quantity" json:"return_quantity,omitempty" toml:"return_quantity" yaml:"return_quantity,omitempty"`
	ReturnCondition    null.String       `boil:"return_condition" json:"return_condition,omitempty" toml:"return_condition" yaml:"return_condition,omitempty"`
	ReturnReason       null.String       `boil:"return_reason" json:"return_reason,omitempty" toml:"return_reason" yaml:"return_reason,omitempty"`
	CreatedAt          time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *goodsReturnNoteItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L goodsReturnNoteItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoodsReturnNoteItemColumns = struct {
	ID                 string
	BaseDocumentItemID string
	GoodsReturnNoteID  string
	RmaItemID          string
	ReturnQuantity     string
	ReturnCondition    string
	ReturnReason       string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	BaseDocumentItemID: "base_document_item_id",
	GoodsReturnNoteID:  "goods_return_note_id",
	RmaItemID:          "rma_item_id",
	ReturnQuantity:     "return_quantity",
	ReturnCondition:    "return_condition",
	ReturnReason:       "return_reason",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var GoodsReturnNoteItemTableColumns = struct {
	ID                 string
	BaseDocumentItemID string
	GoodsReturnNoteID  string
	RmaItemID          string
	ReturnQuantity     string
	ReturnCondition    string
	ReturnReason       string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "goods_return_note_item.id",
	BaseDocumentItemID: "goods_return_note_item.base_document_item_id",
	GoodsReturnNoteID:  "goods_return_note_item.goods_return_note_id",
	RmaItemID:          "goods_return_note_item.rma_item_id",
	ReturnQuantity:     "goods_return_note_item.return_quantity",
	ReturnCondition:    "goods_return_note_item.return_condition",
	ReturnReason:       "goods_return_note_item.return_reason",
	CreatedAt:          "goods_return_note_item.created_at",
	UpdatedAt:          "goods_return_note_item.updated_at",
	DeletedAt:          "goods_return_note_item.deleted_at",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var GoodsReturnNoteItemWhere = struct {
	ID                 whereHelperint
	BaseDocumentItemID whereHelperint
	GoodsReturnNoteID  whereHelperint
	RmaItemID          whereHelpernull_Int
	ReturnQuantity     whereHelpertypes_NullDecimal
	ReturnCondition    whereHelpernull_String
	ReturnReason       whereHelpernull_String
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: "\"sale\".\"goods_return_note_item\".\"id\""},
	BaseDocumentItemID: whereHelperint{field: "\"sale\".\"goods_return_note_item\".\"base_document_item_id\""},
	GoodsReturnNoteID:  whereHelperint{field: "\"sale\".\"goods_return_note_item\".\"goods_return_note_id\""},
	RmaItemID:          whereHelpernull_Int{field: "\"sale\".\"goods_return_note_item\".\"rma_item_id\""},
	ReturnQuantity:     whereHelpertypes_NullDecimal{field: "\"sale\".\"goods_return_note_item\".\"return_quantity\""},
	ReturnCondition:    whereHelpernull_String{field: "\"sale\".\"goods_return_note_item\".\"return_condition\""},
	ReturnReason:       whereHelpernull_String{field: "\"sale\".\"goods_return_note_item\".\"return_reason\""},
	CreatedAt:          whereHelpertime_Time{field: "\"sale\".\"goods_return_note_item\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"sale\".\"goods_return_note_item\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"sale\".\"goods_return_note_item\".\"deleted_at\""},
}

// GoodsReturnNoteItemRels is where relationship names are stored.
var GoodsReturnNoteItemRels = struct {
	GoodsReturnNote string
}{
	GoodsReturnNote: "GoodsReturnNote",
}

// goodsReturnNoteItemR is where relationships are stored.
type goodsReturnNoteItemR struct {
	GoodsReturnNote *GoodsReturnNote `boil:"GoodsReturnNote" json:"GoodsReturnNote" toml:"GoodsReturnNote" yaml:"GoodsReturnNote"`
}

// NewStruct creates a new relationship struct
func (*goodsReturnNoteItemR) NewStruct() *goodsReturnNoteItemR {
	return &goodsReturnNoteItemR{}
}

func (r *goodsReturnNoteItemR) GetGoodsReturnNote() *GoodsReturnNote {
	if r == nil {
		return nil
	}
	return r.GoodsReturnNote
}

// goodsReturnNoteItemL is where Load methods for each relationship are stored.
type goodsReturnNoteItemL struct{}

var (
	goodsReturnNoteItemAllColumns            = []string{"id", "base_document_item_id", "goods_return_note_id", "rma_item_id", "return_quantity", "return_condition", "return_reason", "created_at", "updated_at", "deleted_at"}
	goodsReturnNoteItemColumnsWithoutDefault = []string{"id", "base_document_item_id", "goods_return_note_id", "created_at", "updated_at"}
	goodsReturnNoteItemColumnsWithDefault    = []string{"rma_item_id", "return_quantity", "return_condition", "return_reason", "deleted_at"}
	goodsReturnNoteItemPrimaryKeyColumns     = []string{"id"}
	goodsReturnNoteItemGeneratedColumns      = []string{}
)

type (
	// GoodsReturnNoteItemSlice is an alias for a slice of pointers to GoodsReturnNoteItem.
	// This should almost always be used instead of []GoodsReturnNoteItem.
	GoodsReturnNoteItemSlice []*GoodsReturnNoteItem
	// GoodsReturnNoteItemHook is the signature for custom GoodsReturnNoteItem hook methods
	GoodsReturnNoteItemHook func(context.Context, boil.ContextExecutor, *GoodsReturnNoteItem) error

	goodsReturnNoteItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goodsReturnNoteItemType                 = reflect.TypeOf(&GoodsReturnNoteItem{})
	goodsReturnNoteItemMapping              = queries.MakeStructMapping(goodsReturnNoteItemType)
	goodsReturnNoteItemPrimaryKeyMapping, _ = queries.BindMapping(goodsReturnNoteItemType, goodsReturnNoteItemMapping, goodsReturnNoteItemPrimaryKeyColumns)
	goodsReturnNoteItemInsertCacheMut       sync.RWMutex
	goodsReturnNoteItemInsertCache          = make(map[string]insertCache)
	goodsReturnNoteItemUpdateCacheMut       sync.RWMutex
	goodsReturnNoteItemUpdateCache          = make(map[string]updateCache)
	goodsReturnNoteItemUpsertCacheMut       sync.RWMutex
	goodsReturnNoteItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var goodsReturnNoteItemAfterSelectMu sync.Mutex
var goodsReturnNoteItemAfterSelectHooks []GoodsReturnNoteItemHook

var goodsReturnNoteItemBeforeInsertMu sync.Mutex
var goodsReturnNoteItemBeforeInsertHooks []GoodsReturnNoteItemHook
var goodsReturnNoteItemAfterInsertMu sync.Mutex
var goodsReturnNoteItemAfterInsertHooks []GoodsReturnNoteItemHook

var goodsReturnNoteItemBeforeUpdateMu sync.Mutex
var goodsReturnNoteItemBeforeUpdateHooks []GoodsReturnNoteItemHook
var goodsReturnNoteItemAfterUpdateMu sync.Mutex
var goodsReturnNoteItemAfterUpdateHooks []GoodsReturnNoteItemHook

var goodsReturnNoteItemBeforeDeleteMu sync.Mutex
var goodsReturnNoteItemBeforeDeleteHooks []GoodsReturnNoteItemHook
var goodsReturnNoteItemAfterDeleteMu sync.Mutex
var goodsReturnNoteItemAfterDeleteHooks []GoodsReturnNoteItemHook

var goodsReturnNoteItemBeforeUpsertMu sync.Mutex
var goodsReturnNoteItemBeforeUpsertHooks []GoodsReturnNoteItemHook
var goodsReturnNoteItemAfterUpsertMu sync.Mutex
var goodsReturnNoteItemAfterUpsertHooks []GoodsReturnNoteItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoodsReturnNoteItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoodsReturnNoteItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoodsReturnNoteItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GoodsReturnNoteItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GoodsReturnNoteItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GoodsReturnNoteItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GoodsReturnNoteItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoodsReturnNoteItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoodsReturnNoteItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReturnNoteItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoodsReturnNoteItemHook registers your hook function for all future operations.
func AddGoodsReturnNoteItemHook(hookPoint boil.HookPoint, goodsReturnNoteItemHook GoodsReturnNoteItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goodsReturnNoteItemAfterSelectMu.Lock()
		goodsReturnNoteItemAfterSelectHooks = append(goodsReturnNoteItemAfterSelectHooks, goodsReturnNoteItemHook)
		goodsReturnNoteItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goodsReturnNoteItemBeforeInsertMu.Lock()
		goodsReturnNoteItemBeforeInsertHooks = append(goodsReturnNoteItemBeforeInsertHooks, goodsReturnNoteItemHook)
		goodsReturnNoteItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goodsReturnNoteItemAfterInsertMu.Lock()
		goodsReturnNoteItemAfterInsertHooks = append(goodsReturnNoteItemAfterInsertHooks, goodsReturnNoteItemHook)
		goodsReturnNoteItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		goodsReturnNoteItemBeforeUpdateMu.Lock()
		goodsReturnNoteItemBeforeUpdateHooks = append(goodsReturnNoteItemBeforeUpdateHooks, goodsReturnNoteItemHook)
		goodsReturnNoteItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		goodsReturnNoteItemAfterUpdateMu.Lock()
		goodsReturnNoteItemAfterUpdateHooks = append(goodsReturnNoteItemAfterUpdateHooks, goodsReturnNoteItemHook)
		goodsReturnNoteItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		goodsReturnNoteItemBeforeDeleteMu.Lock()
		goodsReturnNoteItemBeforeDeleteHooks = append(goodsReturnNoteItemBeforeDeleteHooks, goodsReturnNoteItemHook)
		goodsReturnNoteItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		goodsReturnNoteItemAfterDeleteMu.Lock()
		goodsReturnNoteItemAfterDeleteHooks = append(goodsReturnNoteItemAfterDeleteHooks, goodsReturnNoteItemHook)
		goodsReturnNoteItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		goodsReturnNoteItemBeforeUpsertMu.Lock()
		goodsReturnNoteItemBeforeUpsertHooks = append(goodsReturnNoteItemBeforeUpsertHooks, goodsReturnNoteItemHook)
		goodsReturnNoteItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goodsReturnNoteItemAfterUpsertMu.Lock()
		goodsReturnNoteItemAfterUpsertHooks = append(goodsReturnNoteItemAfterUpsertHooks, goodsReturnNoteItemHook)
		goodsReturnNoteItemAfterUpsertMu.Unlock()
	}
}

// One returns a single goodsReturnNoteItem record from the query.
func (q goodsReturnNoteItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoodsReturnNoteItem, error) {
	o := &GoodsReturnNoteItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: failed to execute a one query for goods_return_note_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoodsReturnNoteItem records from the query.
func (q goodsReturnNoteItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoodsReturnNoteItemSlice, error) {
	var o []*GoodsReturnNoteItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sale: failed to assign all query results to GoodsReturnNoteItem slice")
	}

	if len(goodsReturnNoteItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoodsReturnNoteItem records in the query.
func (q goodsReturnNoteItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to count goods_return_note_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goodsReturnNoteItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sale: failed to check if goods_return_note_item exists")
	}

	return count > 0, nil
}

// GoodsReturnNote pointed to by the foreign key.
func (o *GoodsReturnNoteItem) GoodsReturnNote(mods ...qm.QueryMod) goodsReturnNoteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GoodsReturnNoteID),
	}

	queryMods = append(queryMods, mods...)

	return GoodsReturnNotes(queryMods...)
}

// LoadGoodsReturnNote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (goodsReturnNoteItemL) LoadGoodsReturnNote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoodsReturnNoteItem interface{}, mods queries.Applicator) error {
	var slice []*GoodsReturnNoteItem
	var object *GoodsReturnNoteItem

	if singular {
		var ok bool
		object, ok = maybeGoodsReturnNoteItem.(*GoodsReturnNoteItem)
		if !ok {
			object = new(GoodsReturnNoteItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGoodsReturnNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGoodsReturnNoteItem))
			}
		}
	} else {
		s, ok := maybeGoodsReturnNoteItem.(*[]*GoodsReturnNoteItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGoodsReturnNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGoodsReturnNoteItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &goodsReturnNoteItemR{}
		}
		args[object.GoodsReturnNoteID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goodsReturnNoteItemR{}
			}

			args[obj.GoodsReturnNoteID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sale.goods_return_note`),
		qm.WhereIn(`sale.goods_return_note.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GoodsReturnNote")
	}

	var resultSlice []*GoodsReturnNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GoodsReturnNote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for goods_return_note")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for goods_return_note")
	}

	if len(goodsReturnNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GoodsReturnNote = foreign
		if foreign.R == nil {
			foreign.R = &goodsReturnNoteR{}
		}
		foreign.R.GoodsReturnNoteItems = append(foreign.R.GoodsReturnNoteItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GoodsReturnNoteID == foreign.ID {
				local.R.GoodsReturnNote = foreign
				if foreign.R == nil {
					foreign.R = &goodsReturnNoteR{}
				}
				foreign.R.GoodsReturnNoteItems = append(foreign.R.GoodsReturnNoteItems, local)
				break
			}
		}
	}

	return nil
}

// SetGoodsReturnNote of the goodsReturnNoteItem to the related item.
// Sets o.R.GoodsReturnNote to related.
// Adds o to related.R.GoodsReturnNoteItems.
func (o *GoodsReturnNoteItem) SetGoodsReturnNote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GoodsReturnNote) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale\".\"goods_return_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"goods_return_note_id"}),
		strmangle.WhereClause("\"", "\"", 2, goodsReturnNoteItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GoodsReturnNoteID = related.ID
	if o.R == nil {
		o.R = &goodsReturnNoteItemR{
			GoodsReturnNote: related,
		}
	} else {
		o.R.GoodsReturnNote = related
	}

	if related.R == nil {
		related.R = &goodsReturnNoteR{
			GoodsReturnNoteItems: GoodsReturnNoteItemSlice{o},
		}
	} else {
		related.R.GoodsReturnNoteItems = append(related.R.GoodsReturnNoteItems, o)
	}

	return nil
}

// GoodsReturnNoteItems retrieves all the records using an executor.
func GoodsReturnNoteItems(mods ...qm.QueryMod) goodsReturnNoteItemQuery {
	mods = append(mods, qm.From("\"sale\".\"goods_return_note_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale\".\"goods_return_note_item\".*"})
	}

	return goodsReturnNoteItemQuery{q}
}

// FindGoodsReturnNoteItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoodsReturnNoteItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*GoodsReturnNoteItem, error) {
	goodsReturnNoteItemObj := &GoodsReturnNoteItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sale\".\"goods_return_note_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, goodsReturnNoteItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: unable to select from goods_return_note_item")
	}

	if err = goodsReturnNoteItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return goodsReturnNoteItemObj, err
	}

	return goodsReturnNoteItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoodsReturnNoteItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sale: no goods_return_note_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReturnNoteItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goodsReturnNoteItemInsertCacheMut.RLock()
	cache, cached := goodsReturnNoteItemInsertCache[key]
	goodsReturnNoteItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goodsReturnNoteItemAllColumns,
			goodsReturnNoteItemColumnsWithDefault,
			goodsReturnNoteItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goodsReturnNoteItemType, goodsReturnNoteItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goodsReturnNoteItemType, goodsReturnNoteItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\".\"goods_return_note_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\".\"goods_return_note_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sale: unable to insert into goods_return_note_item")
	}

	if !cached {
		goodsReturnNoteItemInsertCacheMut.Lock()
		goodsReturnNoteItemInsertCache[key] = cache
		goodsReturnNoteItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GoodsReturnNoteItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GoodsReturnNoteItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	goodsReturnNoteItemUpdateCacheMut.RLock()
	cache, cached := goodsReturnNoteItemUpdateCache[key]
	goodsReturnNoteItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			goodsReturnNoteItemAllColumns,
			goodsReturnNoteItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sale: unable to update goods_return_note_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sale\".\"goods_return_note_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, goodsReturnNoteItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(goodsReturnNoteItemType, goodsReturnNoteItemMapping, append(wl, goodsReturnNoteItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update goods_return_note_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by update for goods_return_note_item")
	}

	if !cached {
		goodsReturnNoteItemUpdateCacheMut.Lock()
		goodsReturnNoteItemUpdateCache[key] = cache
		goodsReturnNoteItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q goodsReturnNoteItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all for goods_return_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected for goods_return_note_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoodsReturnNoteItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sale: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsReturnNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sale\".\"goods_return_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, goodsReturnNoteItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to update all in goodsReturnNoteItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to retrieve rows affected all in update all goodsReturnNoteItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoodsReturnNoteItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sale: no goods_return_note_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReturnNoteItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goodsReturnNoteItemUpsertCacheMut.RLock()
	cache, cached := goodsReturnNoteItemUpsertCache[key]
	goodsReturnNoteItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goodsReturnNoteItemAllColumns,
			goodsReturnNoteItemColumnsWithDefault,
			goodsReturnNoteItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goodsReturnNoteItemAllColumns,
			goodsReturnNoteItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sale: unable to upsert goods_return_note_item, could not build update column list")
		}

		ret := strmangle.SetComplement(goodsReturnNoteItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goodsReturnNoteItemPrimaryKeyColumns) == 0 {
				return errors.New("sale: unable to upsert goods_return_note_item, could not build conflict column list")
			}

			conflict = make([]string, len(goodsReturnNoteItemPrimaryKeyColumns))
			copy(conflict, goodsReturnNoteItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\".\"goods_return_note_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goodsReturnNoteItemType, goodsReturnNoteItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goodsReturnNoteItemType, goodsReturnNoteItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sale: unable to upsert goods_return_note_item")
	}

	if !cached {
		goodsReturnNoteItemUpsertCacheMut.Lock()
		goodsReturnNoteItemUpsertCache[key] = cache
		goodsReturnNoteItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GoodsReturnNoteItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GoodsReturnNoteItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sale: no GoodsReturnNoteItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), goodsReturnNoteItemPrimaryKeyMapping)
	sql := "DELETE FROM \"sale\".\"goods_return_note_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete from goods_return_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by delete for goods_return_note_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q goodsReturnNoteItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sale: no goodsReturnNoteItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from goods_return_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for goods_return_note_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoodsReturnNoteItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(goodsReturnNoteItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsReturnNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sale\".\"goods_return_note_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goodsReturnNoteItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sale: unable to delete all from goodsReturnNoteItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to get rows affected by deleteall for goods_return_note_item")
	}

	if len(goodsReturnNoteItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GoodsReturnNoteItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoodsReturnNoteItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoodsReturnNoteItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoodsReturnNoteItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsReturnNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sale\".\"goods_return_note_item\".* FROM \"sale\".\"goods_return_note_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goodsReturnNoteItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sale: unable to reload all in GoodsReturnNoteItemSlice")
	}

	*o = slice

	return nil
}

// GoodsReturnNoteItemExists checks if the GoodsReturnNoteItem row exists.
func GoodsReturnNoteItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sale\".\"goods_return_note_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sale: unable to check if goods_return_note_item exists")
	}

	return exists, nil
}

// Exists checks if the GoodsReturnNoteItem row exists.
func (o *GoodsReturnNoteItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GoodsReturnNoteItemExists(ctx, exec, o.ID)
}
