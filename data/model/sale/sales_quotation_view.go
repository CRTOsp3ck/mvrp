// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sale

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SalesQuotationView is an object representing the database table.
type SalesQuotationView struct {
	ID                     null.Int                 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	BaseDocumentID         null.Int                 `boil:"base_document_id" json:"base_document_id,omitempty" toml:"base_document_id" yaml:"base_document_id,omitempty"`
	SalesQuotationNumber   null.String              `boil:"sales_quotation_number" json:"sales_quotation_number,omitempty" toml:"sales_quotation_number" yaml:"sales_quotation_number,omitempty"`
	ValidUntilDate         null.Time                `boil:"valid_until_date" json:"valid_until_date,omitempty" toml:"valid_until_date" yaml:"valid_until_date,omitempty"`
	VendorID               null.Int                 `boil:"vendor_id" json:"vendor_id,omitempty" toml:"vendor_id" yaml:"vendor_id,omitempty"`
	CustomerID             null.Int                 `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	ShipToInformation      null.JSON                `boil:"ship_to_information" json:"ship_to_information,omitempty" toml:"ship_to_information" yaml:"ship_to_information,omitempty"`
	RequestedBy            null.JSON                `boil:"requested_by" json:"requested_by,omitempty" toml:"requested_by" yaml:"requested_by,omitempty"`
	PreparedByEmployeeID   null.Int                 `boil:"prepared_by_employee_id" json:"prepared_by_employee_id,omitempty" toml:"prepared_by_employee_id" yaml:"prepared_by_employee_id,omitempty"`
	QuotationStatus        NullSalesQuotationStatus `boil:"quotation_status" json:"quotation_status,omitempty" toml:"quotation_status" yaml:"quotation_status,omitempty"`
	CreatedAt              null.Time                `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt              null.Time                `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt              null.Time                `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	BaseDocument           null.JSON                `boil:"base_document" json:"base_document,omitempty" toml:"base_document" yaml:"base_document,omitempty"`
	VendorInfo             null.JSON                `boil:"vendor_info" json:"vendor_info,omitempty" toml:"vendor_info" yaml:"vendor_info,omitempty"`
	CustomerInfo           null.JSON                `boil:"customer_info" json:"customer_info,omitempty" toml:"customer_info" yaml:"customer_info,omitempty"`
	PreparedByEmployeeInfo null.JSON                `boil:"prepared_by_employee_info" json:"prepared_by_employee_info,omitempty" toml:"prepared_by_employee_info" yaml:"prepared_by_employee_info,omitempty"`
	SalesQuotationItems    null.JSON                `boil:"sales_quotation_items" json:"sales_quotation_items,omitempty" toml:"sales_quotation_items" yaml:"sales_quotation_items,omitempty"`
}

var SalesQuotationViewColumns = struct {
	ID                     string
	BaseDocumentID         string
	SalesQuotationNumber   string
	ValidUntilDate         string
	VendorID               string
	CustomerID             string
	ShipToInformation      string
	RequestedBy            string
	PreparedByEmployeeID   string
	QuotationStatus        string
	CreatedAt              string
	UpdatedAt              string
	DeletedAt              string
	BaseDocument           string
	VendorInfo             string
	CustomerInfo           string
	PreparedByEmployeeInfo string
	SalesQuotationItems    string
}{
	ID:                     "id",
	BaseDocumentID:         "base_document_id",
	SalesQuotationNumber:   "sales_quotation_number",
	ValidUntilDate:         "valid_until_date",
	VendorID:               "vendor_id",
	CustomerID:             "customer_id",
	ShipToInformation:      "ship_to_information",
	RequestedBy:            "requested_by",
	PreparedByEmployeeID:   "prepared_by_employee_id",
	QuotationStatus:        "quotation_status",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
	DeletedAt:              "deleted_at",
	BaseDocument:           "base_document",
	VendorInfo:             "vendor_info",
	CustomerInfo:           "customer_info",
	PreparedByEmployeeInfo: "prepared_by_employee_info",
	SalesQuotationItems:    "sales_quotation_items",
}

var SalesQuotationViewTableColumns = struct {
	ID                     string
	BaseDocumentID         string
	SalesQuotationNumber   string
	ValidUntilDate         string
	VendorID               string
	CustomerID             string
	ShipToInformation      string
	RequestedBy            string
	PreparedByEmployeeID   string
	QuotationStatus        string
	CreatedAt              string
	UpdatedAt              string
	DeletedAt              string
	BaseDocument           string
	VendorInfo             string
	CustomerInfo           string
	PreparedByEmployeeInfo string
	SalesQuotationItems    string
}{
	ID:                     "sales_quotation_view.id",
	BaseDocumentID:         "sales_quotation_view.base_document_id",
	SalesQuotationNumber:   "sales_quotation_view.sales_quotation_number",
	ValidUntilDate:         "sales_quotation_view.valid_until_date",
	VendorID:               "sales_quotation_view.vendor_id",
	CustomerID:             "sales_quotation_view.customer_id",
	ShipToInformation:      "sales_quotation_view.ship_to_information",
	RequestedBy:            "sales_quotation_view.requested_by",
	PreparedByEmployeeID:   "sales_quotation_view.prepared_by_employee_id",
	QuotationStatus:        "sales_quotation_view.quotation_status",
	CreatedAt:              "sales_quotation_view.created_at",
	UpdatedAt:              "sales_quotation_view.updated_at",
	DeletedAt:              "sales_quotation_view.deleted_at",
	BaseDocument:           "sales_quotation_view.base_document",
	VendorInfo:             "sales_quotation_view.vendor_info",
	CustomerInfo:           "sales_quotation_view.customer_info",
	PreparedByEmployeeInfo: "sales_quotation_view.prepared_by_employee_info",
	SalesQuotationItems:    "sales_quotation_view.sales_quotation_items",
}

// Generated where

type whereHelperNullSalesQuotationStatus struct{ field string }

func (w whereHelperNullSalesQuotationStatus) EQ(x NullSalesQuotationStatus) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullSalesQuotationStatus) NEQ(x NullSalesQuotationStatus) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullSalesQuotationStatus) LT(x NullSalesQuotationStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullSalesQuotationStatus) LTE(x NullSalesQuotationStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullSalesQuotationStatus) GT(x NullSalesQuotationStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullSalesQuotationStatus) GTE(x NullSalesQuotationStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullSalesQuotationStatus) IN(slice []NullSalesQuotationStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullSalesQuotationStatus) NIN(slice []NullSalesQuotationStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullSalesQuotationStatus) IsNull() qm.QueryMod {
	return qmhelper.WhereIsNull(w.field)
}
func (w whereHelperNullSalesQuotationStatus) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var SalesQuotationViewWhere = struct {
	ID                     whereHelpernull_Int
	BaseDocumentID         whereHelpernull_Int
	SalesQuotationNumber   whereHelpernull_String
	ValidUntilDate         whereHelpernull_Time
	VendorID               whereHelpernull_Int
	CustomerID             whereHelpernull_Int
	ShipToInformation      whereHelpernull_JSON
	RequestedBy            whereHelpernull_JSON
	PreparedByEmployeeID   whereHelpernull_Int
	QuotationStatus        whereHelperNullSalesQuotationStatus
	CreatedAt              whereHelpernull_Time
	UpdatedAt              whereHelpernull_Time
	DeletedAt              whereHelpernull_Time
	BaseDocument           whereHelpernull_JSON
	VendorInfo             whereHelpernull_JSON
	CustomerInfo           whereHelpernull_JSON
	PreparedByEmployeeInfo whereHelpernull_JSON
	SalesQuotationItems    whereHelpernull_JSON
}{
	ID:                     whereHelpernull_Int{field: "\"sale\".\"sales_quotation_view\".\"id\""},
	BaseDocumentID:         whereHelpernull_Int{field: "\"sale\".\"sales_quotation_view\".\"base_document_id\""},
	SalesQuotationNumber:   whereHelpernull_String{field: "\"sale\".\"sales_quotation_view\".\"sales_quotation_number\""},
	ValidUntilDate:         whereHelpernull_Time{field: "\"sale\".\"sales_quotation_view\".\"valid_until_date\""},
	VendorID:               whereHelpernull_Int{field: "\"sale\".\"sales_quotation_view\".\"vendor_id\""},
	CustomerID:             whereHelpernull_Int{field: "\"sale\".\"sales_quotation_view\".\"customer_id\""},
	ShipToInformation:      whereHelpernull_JSON{field: "\"sale\".\"sales_quotation_view\".\"ship_to_information\""},
	RequestedBy:            whereHelpernull_JSON{field: "\"sale\".\"sales_quotation_view\".\"requested_by\""},
	PreparedByEmployeeID:   whereHelpernull_Int{field: "\"sale\".\"sales_quotation_view\".\"prepared_by_employee_id\""},
	QuotationStatus:        whereHelperNullSalesQuotationStatus{field: "\"sale\".\"sales_quotation_view\".\"quotation_status\""},
	CreatedAt:              whereHelpernull_Time{field: "\"sale\".\"sales_quotation_view\".\"created_at\""},
	UpdatedAt:              whereHelpernull_Time{field: "\"sale\".\"sales_quotation_view\".\"updated_at\""},
	DeletedAt:              whereHelpernull_Time{field: "\"sale\".\"sales_quotation_view\".\"deleted_at\""},
	BaseDocument:           whereHelpernull_JSON{field: "\"sale\".\"sales_quotation_view\".\"base_document\""},
	VendorInfo:             whereHelpernull_JSON{field: "\"sale\".\"sales_quotation_view\".\"vendor_info\""},
	CustomerInfo:           whereHelpernull_JSON{field: "\"sale\".\"sales_quotation_view\".\"customer_info\""},
	PreparedByEmployeeInfo: whereHelpernull_JSON{field: "\"sale\".\"sales_quotation_view\".\"prepared_by_employee_info\""},
	SalesQuotationItems:    whereHelpernull_JSON{field: "\"sale\".\"sales_quotation_view\".\"sales_quotation_items\""},
}

var (
	salesQuotationViewAllColumns            = []string{"id", "base_document_id", "sales_quotation_number", "valid_until_date", "vendor_id", "customer_id", "ship_to_information", "requested_by", "prepared_by_employee_id", "quotation_status", "created_at", "updated_at", "deleted_at", "base_document", "vendor_info", "customer_info", "prepared_by_employee_info", "sales_quotation_items"}
	salesQuotationViewColumnsWithoutDefault = []string{}
	salesQuotationViewColumnsWithDefault    = []string{"id", "base_document_id", "sales_quotation_number", "valid_until_date", "vendor_id", "customer_id", "ship_to_information", "requested_by", "prepared_by_employee_id", "quotation_status", "created_at", "updated_at", "deleted_at", "base_document", "vendor_info", "customer_info", "prepared_by_employee_info", "sales_quotation_items"}
	salesQuotationViewPrimaryKeyColumns     = []string{}
	salesQuotationViewGeneratedColumns      = []string{}
)

type (
	// SalesQuotationViewSlice is an alias for a slice of pointers to SalesQuotationView.
	// This should almost always be used instead of []SalesQuotationView.
	SalesQuotationViewSlice []*SalesQuotationView
	// SalesQuotationViewHook is the signature for custom SalesQuotationView hook methods
	SalesQuotationViewHook func(context.Context, boil.ContextExecutor, *SalesQuotationView) error

	salesQuotationViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	salesQuotationViewType           = reflect.TypeOf(&SalesQuotationView{})
	salesQuotationViewMapping        = queries.MakeStructMapping(salesQuotationViewType)
	salesQuotationViewInsertCacheMut sync.RWMutex
	salesQuotationViewInsertCache    = make(map[string]insertCache)
	salesQuotationViewUpdateCacheMut sync.RWMutex
	salesQuotationViewUpdateCache    = make(map[string]updateCache)
	salesQuotationViewUpsertCacheMut sync.RWMutex
	salesQuotationViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var salesQuotationViewAfterSelectMu sync.Mutex
var salesQuotationViewAfterSelectHooks []SalesQuotationViewHook

var salesQuotationViewBeforeInsertMu sync.Mutex
var salesQuotationViewBeforeInsertHooks []SalesQuotationViewHook
var salesQuotationViewAfterInsertMu sync.Mutex
var salesQuotationViewAfterInsertHooks []SalesQuotationViewHook

var salesQuotationViewBeforeUpsertMu sync.Mutex
var salesQuotationViewBeforeUpsertHooks []SalesQuotationViewHook
var salesQuotationViewAfterUpsertMu sync.Mutex
var salesQuotationViewAfterUpsertHooks []SalesQuotationViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SalesQuotationView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SalesQuotationView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SalesQuotationView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SalesQuotationView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SalesQuotationView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesQuotationViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSalesQuotationViewHook registers your hook function for all future operations.
func AddSalesQuotationViewHook(hookPoint boil.HookPoint, salesQuotationViewHook SalesQuotationViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		salesQuotationViewAfterSelectMu.Lock()
		salesQuotationViewAfterSelectHooks = append(salesQuotationViewAfterSelectHooks, salesQuotationViewHook)
		salesQuotationViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		salesQuotationViewBeforeInsertMu.Lock()
		salesQuotationViewBeforeInsertHooks = append(salesQuotationViewBeforeInsertHooks, salesQuotationViewHook)
		salesQuotationViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		salesQuotationViewAfterInsertMu.Lock()
		salesQuotationViewAfterInsertHooks = append(salesQuotationViewAfterInsertHooks, salesQuotationViewHook)
		salesQuotationViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		salesQuotationViewBeforeUpsertMu.Lock()
		salesQuotationViewBeforeUpsertHooks = append(salesQuotationViewBeforeUpsertHooks, salesQuotationViewHook)
		salesQuotationViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		salesQuotationViewAfterUpsertMu.Lock()
		salesQuotationViewAfterUpsertHooks = append(salesQuotationViewAfterUpsertHooks, salesQuotationViewHook)
		salesQuotationViewAfterUpsertMu.Unlock()
	}
}

// One returns a single salesQuotationView record from the query.
func (q salesQuotationViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SalesQuotationView, error) {
	o := &SalesQuotationView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sale: failed to execute a one query for sales_quotation_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SalesQuotationView records from the query.
func (q salesQuotationViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (SalesQuotationViewSlice, error) {
	var o []*SalesQuotationView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sale: failed to assign all query results to SalesQuotationView slice")
	}

	if len(salesQuotationViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SalesQuotationView records in the query.
func (q salesQuotationViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sale: failed to count sales_quotation_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q salesQuotationViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sale: failed to check if sales_quotation_view exists")
	}

	return count > 0, nil
}

// SalesQuotationViews retrieves all the records using an executor.
func SalesQuotationViews(mods ...qm.QueryMod) salesQuotationViewQuery {
	mods = append(mods, qm.From("\"sale\".\"sales_quotation_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale\".\"sales_quotation_view\".*"})
	}

	return salesQuotationViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SalesQuotationView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sale: no sales_quotation_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salesQuotationViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	salesQuotationViewInsertCacheMut.RLock()
	cache, cached := salesQuotationViewInsertCache[key]
	salesQuotationViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			salesQuotationViewAllColumns,
			salesQuotationViewColumnsWithDefault,
			salesQuotationViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(salesQuotationViewType, salesQuotationViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(salesQuotationViewType, salesQuotationViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\".\"sales_quotation_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\".\"sales_quotation_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sale: unable to insert into sales_quotation_view")
	}

	if !cached {
		salesQuotationViewInsertCacheMut.Lock()
		salesQuotationViewInsertCache[key] = cache
		salesQuotationViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SalesQuotationView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sale: no sales_quotation_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salesQuotationViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	salesQuotationViewUpsertCacheMut.RLock()
	cache, cached := salesQuotationViewUpsertCache[key]
	salesQuotationViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			salesQuotationViewAllColumns,
			salesQuotationViewColumnsWithDefault,
			salesQuotationViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			salesQuotationViewAllColumns,
			salesQuotationViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sale: unable to upsert sales_quotation_view, could not build update column list")
		}

		ret := strmangle.SetComplement(salesQuotationViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(salesQuotationViewPrimaryKeyColumns) == 0 {
				return errors.New("sale: unable to upsert sales_quotation_view, could not build conflict column list")
			}

			conflict = make([]string, len(salesQuotationViewPrimaryKeyColumns))
			copy(conflict, salesQuotationViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\".\"sales_quotation_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(salesQuotationViewType, salesQuotationViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(salesQuotationViewType, salesQuotationViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sale: unable to upsert sales_quotation_view")
	}

	if !cached {
		salesQuotationViewUpsertCacheMut.Lock()
		salesQuotationViewUpsertCache[key] = cache
		salesQuotationViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
