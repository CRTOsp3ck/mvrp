// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package base

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// BaseDocument is an object representing the database table.
type BaseDocument struct {
	ID                          int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt                   time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                   time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt                   null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	IssueDate                   null.Time         `boil:"issue_date" json:"issue_date,omitempty" toml:"issue_date" yaml:"issue_date,omitempty"`
	GrossAmountGen              types.NullDecimal `boil:"gross_amount_gen" json:"gross_amount_gen,omitempty" toml:"gross_amount_gen" yaml:"gross_amount_gen,omitempty"`
	DiscountAmountGen           types.NullDecimal `boil:"discount_amount_gen" json:"discount_amount_gen,omitempty" toml:"discount_amount_gen" yaml:"discount_amount_gen,omitempty"`
	DiscountRateGen             types.NullDecimal `boil:"discount_rate_gen" json:"discount_rate_gen,omitempty" toml:"discount_rate_gen" yaml:"discount_rate_gen,omitempty"`
	AdditionalDiscountAmount    types.NullDecimal `boil:"additional_discount_amount" json:"additional_discount_amount,omitempty" toml:"additional_discount_amount" yaml:"additional_discount_amount,omitempty"`
	AdditionalDiscountRateGen   types.NullDecimal `boil:"additional_discount_rate_gen" json:"additional_discount_rate_gen,omitempty" toml:"additional_discount_rate_gen" yaml:"additional_discount_rate_gen,omitempty"`
	GrossAmountAfterDiscountGen types.NullDecimal `boil:"gross_amount_after_discount_gen" json:"gross_amount_after_discount_gen,omitempty" toml:"gross_amount_after_discount_gen" yaml:"gross_amount_after_discount_gen,omitempty"`
	TaxAmountGen                types.NullDecimal `boil:"tax_amount_gen" json:"tax_amount_gen,omitempty" toml:"tax_amount_gen" yaml:"tax_amount_gen,omitempty"`
	TaxRateGen                  types.NullDecimal `boil:"tax_rate_gen" json:"tax_rate_gen,omitempty" toml:"tax_rate_gen" yaml:"tax_rate_gen,omitempty"`
	ShippingFeesGen             types.NullDecimal `boil:"shipping_fees_gen" json:"shipping_fees_gen,omitempty" toml:"shipping_fees_gen" yaml:"shipping_fees_gen,omitempty"`
	OtherFees                   types.NullDecimal `boil:"other_fees" json:"other_fees,omitempty" toml:"other_fees" yaml:"other_fees,omitempty"`
	CustomAdjustmentAmount      types.NullDecimal `boil:"custom_adjustment_amount" json:"custom_adjustment_amount,omitempty" toml:"custom_adjustment_amount" yaml:"custom_adjustment_amount,omitempty"`
	NetAmountGen                types.NullDecimal `boil:"net_amount_gen" json:"net_amount_gen,omitempty" toml:"net_amount_gen" yaml:"net_amount_gen,omitempty"`
	ShippingTerms               ShippingTerms     `boil:"shipping_terms" json:"shipping_terms" toml:"shipping_terms" yaml:"shipping_terms"`
	ShippingMethod              ShippingMethod    `boil:"shipping_method" json:"shipping_method" toml:"shipping_method" yaml:"shipping_method"`
	ShippingDate                null.Time         `boil:"shipping_date" json:"shipping_date,omitempty" toml:"shipping_date" yaml:"shipping_date,omitempty"`
	PaymentTerms                PaymentTerms      `boil:"payment_terms" json:"payment_terms" toml:"payment_terms" yaml:"payment_terms"`
	PaymentInstructions         null.String       `boil:"payment_instructions" json:"payment_instructions,omitempty" toml:"payment_instructions" yaml:"payment_instructions,omitempty"`
	PaymentStatus               PaymentStatus     `boil:"payment_status" json:"payment_status" toml:"payment_status" yaml:"payment_status"`
	Remarks                     null.String       `boil:"remarks" json:"remarks,omitempty" toml:"remarks" yaml:"remarks,omitempty"`
	TermsAndConditions          null.String       `boil:"terms_and_conditions" json:"terms_and_conditions,omitempty" toml:"terms_and_conditions" yaml:"terms_and_conditions,omitempty"`

	R *baseDocumentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L baseDocumentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BaseDocumentColumns = struct {
	ID                          string
	CreatedAt                   string
	UpdatedAt                   string
	DeletedAt                   string
	IssueDate                   string
	GrossAmountGen              string
	DiscountAmountGen           string
	DiscountRateGen             string
	AdditionalDiscountAmount    string
	AdditionalDiscountRateGen   string
	GrossAmountAfterDiscountGen string
	TaxAmountGen                string
	TaxRateGen                  string
	ShippingFeesGen             string
	OtherFees                   string
	CustomAdjustmentAmount      string
	NetAmountGen                string
	ShippingTerms               string
	ShippingMethod              string
	ShippingDate                string
	PaymentTerms                string
	PaymentInstructions         string
	PaymentStatus               string
	Remarks                     string
	TermsAndConditions          string
}{
	ID:                          "id",
	CreatedAt:                   "created_at",
	UpdatedAt:                   "updated_at",
	DeletedAt:                   "deleted_at",
	IssueDate:                   "issue_date",
	GrossAmountGen:              "gross_amount_gen",
	DiscountAmountGen:           "discount_amount_gen",
	DiscountRateGen:             "discount_rate_gen",
	AdditionalDiscountAmount:    "additional_discount_amount",
	AdditionalDiscountRateGen:   "additional_discount_rate_gen",
	GrossAmountAfterDiscountGen: "gross_amount_after_discount_gen",
	TaxAmountGen:                "tax_amount_gen",
	TaxRateGen:                  "tax_rate_gen",
	ShippingFeesGen:             "shipping_fees_gen",
	OtherFees:                   "other_fees",
	CustomAdjustmentAmount:      "custom_adjustment_amount",
	NetAmountGen:                "net_amount_gen",
	ShippingTerms:               "shipping_terms",
	ShippingMethod:              "shipping_method",
	ShippingDate:                "shipping_date",
	PaymentTerms:                "payment_terms",
	PaymentInstructions:         "payment_instructions",
	PaymentStatus:               "payment_status",
	Remarks:                     "remarks",
	TermsAndConditions:          "terms_and_conditions",
}

var BaseDocumentTableColumns = struct {
	ID                          string
	CreatedAt                   string
	UpdatedAt                   string
	DeletedAt                   string
	IssueDate                   string
	GrossAmountGen              string
	DiscountAmountGen           string
	DiscountRateGen             string
	AdditionalDiscountAmount    string
	AdditionalDiscountRateGen   string
	GrossAmountAfterDiscountGen string
	TaxAmountGen                string
	TaxRateGen                  string
	ShippingFeesGen             string
	OtherFees                   string
	CustomAdjustmentAmount      string
	NetAmountGen                string
	ShippingTerms               string
	ShippingMethod              string
	ShippingDate                string
	PaymentTerms                string
	PaymentInstructions         string
	PaymentStatus               string
	Remarks                     string
	TermsAndConditions          string
}{
	ID:                          "base_document.id",
	CreatedAt:                   "base_document.created_at",
	UpdatedAt:                   "base_document.updated_at",
	DeletedAt:                   "base_document.deleted_at",
	IssueDate:                   "base_document.issue_date",
	GrossAmountGen:              "base_document.gross_amount_gen",
	DiscountAmountGen:           "base_document.discount_amount_gen",
	DiscountRateGen:             "base_document.discount_rate_gen",
	AdditionalDiscountAmount:    "base_document.additional_discount_amount",
	AdditionalDiscountRateGen:   "base_document.additional_discount_rate_gen",
	GrossAmountAfterDiscountGen: "base_document.gross_amount_after_discount_gen",
	TaxAmountGen:                "base_document.tax_amount_gen",
	TaxRateGen:                  "base_document.tax_rate_gen",
	ShippingFeesGen:             "base_document.shipping_fees_gen",
	OtherFees:                   "base_document.other_fees",
	CustomAdjustmentAmount:      "base_document.custom_adjustment_amount",
	NetAmountGen:                "base_document.net_amount_gen",
	ShippingTerms:               "base_document.shipping_terms",
	ShippingMethod:              "base_document.shipping_method",
	ShippingDate:                "base_document.shipping_date",
	PaymentTerms:                "base_document.payment_terms",
	PaymentInstructions:         "base_document.payment_instructions",
	PaymentStatus:               "base_document.payment_status",
	Remarks:                     "base_document.remarks",
	TermsAndConditions:          "base_document.terms_and_conditions",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelperShippingTerms struct{ field string }

func (w whereHelperShippingTerms) EQ(x ShippingTerms) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperShippingTerms) NEQ(x ShippingTerms) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperShippingTerms) LT(x ShippingTerms) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperShippingTerms) LTE(x ShippingTerms) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperShippingTerms) GT(x ShippingTerms) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperShippingTerms) GTE(x ShippingTerms) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperShippingTerms) IN(slice []ShippingTerms) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperShippingTerms) NIN(slice []ShippingTerms) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperShippingMethod struct{ field string }

func (w whereHelperShippingMethod) EQ(x ShippingMethod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperShippingMethod) NEQ(x ShippingMethod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperShippingMethod) LT(x ShippingMethod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperShippingMethod) LTE(x ShippingMethod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperShippingMethod) GT(x ShippingMethod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperShippingMethod) GTE(x ShippingMethod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperShippingMethod) IN(slice []ShippingMethod) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperShippingMethod) NIN(slice []ShippingMethod) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperPaymentTerms struct{ field string }

func (w whereHelperPaymentTerms) EQ(x PaymentTerms) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperPaymentTerms) NEQ(x PaymentTerms) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperPaymentTerms) LT(x PaymentTerms) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperPaymentTerms) LTE(x PaymentTerms) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperPaymentTerms) GT(x PaymentTerms) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperPaymentTerms) GTE(x PaymentTerms) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperPaymentTerms) IN(slice []PaymentTerms) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperPaymentTerms) NIN(slice []PaymentTerms) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperPaymentStatus struct{ field string }

func (w whereHelperPaymentStatus) EQ(x PaymentStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperPaymentStatus) NEQ(x PaymentStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperPaymentStatus) LT(x PaymentStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperPaymentStatus) LTE(x PaymentStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperPaymentStatus) GT(x PaymentStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperPaymentStatus) GTE(x PaymentStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperPaymentStatus) IN(slice []PaymentStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperPaymentStatus) NIN(slice []PaymentStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var BaseDocumentWhere = struct {
	ID                          whereHelperint
	CreatedAt                   whereHelpertime_Time
	UpdatedAt                   whereHelpertime_Time
	DeletedAt                   whereHelpernull_Time
	IssueDate                   whereHelpernull_Time
	GrossAmountGen              whereHelpertypes_NullDecimal
	DiscountAmountGen           whereHelpertypes_NullDecimal
	DiscountRateGen             whereHelpertypes_NullDecimal
	AdditionalDiscountAmount    whereHelpertypes_NullDecimal
	AdditionalDiscountRateGen   whereHelpertypes_NullDecimal
	GrossAmountAfterDiscountGen whereHelpertypes_NullDecimal
	TaxAmountGen                whereHelpertypes_NullDecimal
	TaxRateGen                  whereHelpertypes_NullDecimal
	ShippingFeesGen             whereHelpertypes_NullDecimal
	OtherFees                   whereHelpertypes_NullDecimal
	CustomAdjustmentAmount      whereHelpertypes_NullDecimal
	NetAmountGen                whereHelpertypes_NullDecimal
	ShippingTerms               whereHelperShippingTerms
	ShippingMethod              whereHelperShippingMethod
	ShippingDate                whereHelpernull_Time
	PaymentTerms                whereHelperPaymentTerms
	PaymentInstructions         whereHelpernull_String
	PaymentStatus               whereHelperPaymentStatus
	Remarks                     whereHelpernull_String
	TermsAndConditions          whereHelpernull_String
}{
	ID:                          whereHelperint{field: "\"base\".\"base_document\".\"id\""},
	CreatedAt:                   whereHelpertime_Time{field: "\"base\".\"base_document\".\"created_at\""},
	UpdatedAt:                   whereHelpertime_Time{field: "\"base\".\"base_document\".\"updated_at\""},
	DeletedAt:                   whereHelpernull_Time{field: "\"base\".\"base_document\".\"deleted_at\""},
	IssueDate:                   whereHelpernull_Time{field: "\"base\".\"base_document\".\"issue_date\""},
	GrossAmountGen:              whereHelpertypes_NullDecimal{field: "\"base\".\"base_document\".\"gross_amount_gen\""},
	DiscountAmountGen:           whereHelpertypes_NullDecimal{field: "\"base\".\"base_document\".\"discount_amount_gen\""},
	DiscountRateGen:             whereHelpertypes_NullDecimal{field: "\"base\".\"base_document\".\"discount_rate_gen\""},
	AdditionalDiscountAmount:    whereHelpertypes_NullDecimal{field: "\"base\".\"base_document\".\"additional_discount_amount\""},
	AdditionalDiscountRateGen:   whereHelpertypes_NullDecimal{field: "\"base\".\"base_document\".\"additional_discount_rate_gen\""},
	GrossAmountAfterDiscountGen: whereHelpertypes_NullDecimal{field: "\"base\".\"base_document\".\"gross_amount_after_discount_gen\""},
	TaxAmountGen:                whereHelpertypes_NullDecimal{field: "\"base\".\"base_document\".\"tax_amount_gen\""},
	TaxRateGen:                  whereHelpertypes_NullDecimal{field: "\"base\".\"base_document\".\"tax_rate_gen\""},
	ShippingFeesGen:             whereHelpertypes_NullDecimal{field: "\"base\".\"base_document\".\"shipping_fees_gen\""},
	OtherFees:                   whereHelpertypes_NullDecimal{field: "\"base\".\"base_document\".\"other_fees\""},
	CustomAdjustmentAmount:      whereHelpertypes_NullDecimal{field: "\"base\".\"base_document\".\"custom_adjustment_amount\""},
	NetAmountGen:                whereHelpertypes_NullDecimal{field: "\"base\".\"base_document\".\"net_amount_gen\""},
	ShippingTerms:               whereHelperShippingTerms{field: "\"base\".\"base_document\".\"shipping_terms\""},
	ShippingMethod:              whereHelperShippingMethod{field: "\"base\".\"base_document\".\"shipping_method\""},
	ShippingDate:                whereHelpernull_Time{field: "\"base\".\"base_document\".\"shipping_date\""},
	PaymentTerms:                whereHelperPaymentTerms{field: "\"base\".\"base_document\".\"payment_terms\""},
	PaymentInstructions:         whereHelpernull_String{field: "\"base\".\"base_document\".\"payment_instructions\""},
	PaymentStatus:               whereHelperPaymentStatus{field: "\"base\".\"base_document\".\"payment_status\""},
	Remarks:                     whereHelpernull_String{field: "\"base\".\"base_document\".\"remarks\""},
	TermsAndConditions:          whereHelpernull_String{field: "\"base\".\"base_document\".\"terms_and_conditions\""},
}

// BaseDocumentRels is where relationship names are stored.
var BaseDocumentRels = struct {
	BaseDocumentItems string
}{
	BaseDocumentItems: "BaseDocumentItems",
}

// baseDocumentR is where relationships are stored.
type baseDocumentR struct {
	BaseDocumentItems BaseDocumentItemSlice `boil:"BaseDocumentItems" json:"BaseDocumentItems" toml:"BaseDocumentItems" yaml:"BaseDocumentItems"`
}

// NewStruct creates a new relationship struct
func (*baseDocumentR) NewStruct() *baseDocumentR {
	return &baseDocumentR{}
}

func (r *baseDocumentR) GetBaseDocumentItems() BaseDocumentItemSlice {
	if r == nil {
		return nil
	}
	return r.BaseDocumentItems
}

// baseDocumentL is where Load methods for each relationship are stored.
type baseDocumentL struct{}

var (
	baseDocumentAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "issue_date", "gross_amount_gen", "discount_amount_gen", "discount_rate_gen", "additional_discount_amount", "additional_discount_rate_gen", "gross_amount_after_discount_gen", "tax_amount_gen", "tax_rate_gen", "shipping_fees_gen", "other_fees", "custom_adjustment_amount", "net_amount_gen", "shipping_terms", "shipping_method", "shipping_date", "payment_terms", "payment_instructions", "payment_status", "remarks", "terms_and_conditions"}
	baseDocumentColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "shipping_terms", "shipping_method", "payment_terms", "payment_status"}
	baseDocumentColumnsWithDefault    = []string{"deleted_at", "issue_date", "gross_amount_gen", "discount_amount_gen", "discount_rate_gen", "additional_discount_amount", "additional_discount_rate_gen", "gross_amount_after_discount_gen", "tax_amount_gen", "tax_rate_gen", "shipping_fees_gen", "other_fees", "custom_adjustment_amount", "net_amount_gen", "shipping_date", "payment_instructions", "remarks", "terms_and_conditions"}
	baseDocumentPrimaryKeyColumns     = []string{"id"}
	baseDocumentGeneratedColumns      = []string{"discount_rate_gen", "additional_discount_rate_gen", "gross_amount_after_discount_gen", "tax_rate_gen", "net_amount_gen"}
)

type (
	// BaseDocumentSlice is an alias for a slice of pointers to BaseDocument.
	// This should almost always be used instead of []BaseDocument.
	BaseDocumentSlice []*BaseDocument
	// BaseDocumentHook is the signature for custom BaseDocument hook methods
	BaseDocumentHook func(context.Context, boil.ContextExecutor, *BaseDocument) error

	baseDocumentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	baseDocumentType                 = reflect.TypeOf(&BaseDocument{})
	baseDocumentMapping              = queries.MakeStructMapping(baseDocumentType)
	baseDocumentPrimaryKeyMapping, _ = queries.BindMapping(baseDocumentType, baseDocumentMapping, baseDocumentPrimaryKeyColumns)
	baseDocumentInsertCacheMut       sync.RWMutex
	baseDocumentInsertCache          = make(map[string]insertCache)
	baseDocumentUpdateCacheMut       sync.RWMutex
	baseDocumentUpdateCache          = make(map[string]updateCache)
	baseDocumentUpsertCacheMut       sync.RWMutex
	baseDocumentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var baseDocumentAfterSelectMu sync.Mutex
var baseDocumentAfterSelectHooks []BaseDocumentHook

var baseDocumentBeforeInsertMu sync.Mutex
var baseDocumentBeforeInsertHooks []BaseDocumentHook
var baseDocumentAfterInsertMu sync.Mutex
var baseDocumentAfterInsertHooks []BaseDocumentHook

var baseDocumentBeforeUpdateMu sync.Mutex
var baseDocumentBeforeUpdateHooks []BaseDocumentHook
var baseDocumentAfterUpdateMu sync.Mutex
var baseDocumentAfterUpdateHooks []BaseDocumentHook

var baseDocumentBeforeDeleteMu sync.Mutex
var baseDocumentBeforeDeleteHooks []BaseDocumentHook
var baseDocumentAfterDeleteMu sync.Mutex
var baseDocumentAfterDeleteHooks []BaseDocumentHook

var baseDocumentBeforeUpsertMu sync.Mutex
var baseDocumentBeforeUpsertHooks []BaseDocumentHook
var baseDocumentAfterUpsertMu sync.Mutex
var baseDocumentAfterUpsertHooks []BaseDocumentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BaseDocument) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BaseDocument) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BaseDocument) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BaseDocument) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BaseDocument) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BaseDocument) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BaseDocument) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BaseDocument) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BaseDocument) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBaseDocumentHook registers your hook function for all future operations.
func AddBaseDocumentHook(hookPoint boil.HookPoint, baseDocumentHook BaseDocumentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		baseDocumentAfterSelectMu.Lock()
		baseDocumentAfterSelectHooks = append(baseDocumentAfterSelectHooks, baseDocumentHook)
		baseDocumentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		baseDocumentBeforeInsertMu.Lock()
		baseDocumentBeforeInsertHooks = append(baseDocumentBeforeInsertHooks, baseDocumentHook)
		baseDocumentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		baseDocumentAfterInsertMu.Lock()
		baseDocumentAfterInsertHooks = append(baseDocumentAfterInsertHooks, baseDocumentHook)
		baseDocumentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		baseDocumentBeforeUpdateMu.Lock()
		baseDocumentBeforeUpdateHooks = append(baseDocumentBeforeUpdateHooks, baseDocumentHook)
		baseDocumentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		baseDocumentAfterUpdateMu.Lock()
		baseDocumentAfterUpdateHooks = append(baseDocumentAfterUpdateHooks, baseDocumentHook)
		baseDocumentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		baseDocumentBeforeDeleteMu.Lock()
		baseDocumentBeforeDeleteHooks = append(baseDocumentBeforeDeleteHooks, baseDocumentHook)
		baseDocumentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		baseDocumentAfterDeleteMu.Lock()
		baseDocumentAfterDeleteHooks = append(baseDocumentAfterDeleteHooks, baseDocumentHook)
		baseDocumentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		baseDocumentBeforeUpsertMu.Lock()
		baseDocumentBeforeUpsertHooks = append(baseDocumentBeforeUpsertHooks, baseDocumentHook)
		baseDocumentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		baseDocumentAfterUpsertMu.Lock()
		baseDocumentAfterUpsertHooks = append(baseDocumentAfterUpsertHooks, baseDocumentHook)
		baseDocumentAfterUpsertMu.Unlock()
	}
}

// One returns a single baseDocument record from the query.
func (q baseDocumentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BaseDocument, error) {
	o := &BaseDocument{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "base: failed to execute a one query for base_document")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BaseDocument records from the query.
func (q baseDocumentQuery) All(ctx context.Context, exec boil.ContextExecutor) (BaseDocumentSlice, error) {
	var o []*BaseDocument

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "base: failed to assign all query results to BaseDocument slice")
	}

	if len(baseDocumentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BaseDocument records in the query.
func (q baseDocumentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "base: failed to count base_document rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q baseDocumentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "base: failed to check if base_document exists")
	}

	return count > 0, nil
}

// BaseDocumentItems retrieves all the base_document_item's BaseDocumentItems with an executor.
func (o *BaseDocument) BaseDocumentItems(mods ...qm.QueryMod) baseDocumentItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"base\".\"base_document_item\".\"base_document_id\"=?", o.ID),
	)

	return BaseDocumentItems(queryMods...)
}

// LoadBaseDocumentItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (baseDocumentL) LoadBaseDocumentItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBaseDocument interface{}, mods queries.Applicator) error {
	var slice []*BaseDocument
	var object *BaseDocument

	if singular {
		var ok bool
		object, ok = maybeBaseDocument.(*BaseDocument)
		if !ok {
			object = new(BaseDocument)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBaseDocument)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBaseDocument))
			}
		}
	} else {
		s, ok := maybeBaseDocument.(*[]*BaseDocument)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBaseDocument)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBaseDocument))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &baseDocumentR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseDocumentR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`base.base_document_item`),
		qm.WhereIn(`base.base_document_item.base_document_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load base_document_item")
	}

	var resultSlice []*BaseDocumentItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice base_document_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on base_document_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base_document_item")
	}

	if len(baseDocumentItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BaseDocumentItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &baseDocumentItemR{}
			}
			foreign.R.BaseDocument = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BaseDocumentID {
				local.R.BaseDocumentItems = append(local.R.BaseDocumentItems, foreign)
				if foreign.R == nil {
					foreign.R = &baseDocumentItemR{}
				}
				foreign.R.BaseDocument = local
				break
			}
		}
	}

	return nil
}

// AddBaseDocumentItems adds the given related objects to the existing relationships
// of the base_document, optionally inserting them as new records.
// Appends related to o.R.BaseDocumentItems.
// Sets related.R.BaseDocument appropriately.
func (o *BaseDocument) AddBaseDocumentItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseDocumentItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BaseDocumentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"base\".\"base_document_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"base_document_id"}),
				strmangle.WhereClause("\"", "\"", 2, baseDocumentItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BaseDocumentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &baseDocumentR{
			BaseDocumentItems: related,
		}
	} else {
		o.R.BaseDocumentItems = append(o.R.BaseDocumentItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &baseDocumentItemR{
				BaseDocument: o,
			}
		} else {
			rel.R.BaseDocument = o
		}
	}
	return nil
}

// BaseDocuments retrieves all the records using an executor.
func BaseDocuments(mods ...qm.QueryMod) baseDocumentQuery {
	mods = append(mods, qm.From("\"base\".\"base_document\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"base\".\"base_document\".*"})
	}

	return baseDocumentQuery{q}
}

// FindBaseDocument retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBaseDocument(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BaseDocument, error) {
	baseDocumentObj := &BaseDocument{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"base\".\"base_document\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, baseDocumentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "base: unable to select from base_document")
	}

	if err = baseDocumentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return baseDocumentObj, err
	}

	return baseDocumentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BaseDocument) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("base: no base_document provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(baseDocumentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	baseDocumentInsertCacheMut.RLock()
	cache, cached := baseDocumentInsertCache[key]
	baseDocumentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			baseDocumentAllColumns,
			baseDocumentColumnsWithDefault,
			baseDocumentColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, baseDocumentGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(baseDocumentType, baseDocumentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(baseDocumentType, baseDocumentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"base\".\"base_document\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"base\".\"base_document\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "base: unable to insert into base_document")
	}

	if !cached {
		baseDocumentInsertCacheMut.Lock()
		baseDocumentInsertCache[key] = cache
		baseDocumentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BaseDocument.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BaseDocument) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	baseDocumentUpdateCacheMut.RLock()
	cache, cached := baseDocumentUpdateCache[key]
	baseDocumentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			baseDocumentAllColumns,
			baseDocumentPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, baseDocumentGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("base: unable to update base_document, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"base\".\"base_document\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, baseDocumentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(baseDocumentType, baseDocumentMapping, append(wl, baseDocumentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "base: unable to update base_document row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "base: failed to get rows affected by update for base_document")
	}

	if !cached {
		baseDocumentUpdateCacheMut.Lock()
		baseDocumentUpdateCache[key] = cache
		baseDocumentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q baseDocumentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "base: unable to update all for base_document")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "base: unable to retrieve rows affected for base_document")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BaseDocumentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("base: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), baseDocumentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"base\".\"base_document\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, baseDocumentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "base: unable to update all in baseDocument slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "base: unable to retrieve rows affected all in update all baseDocument")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BaseDocument) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("base: no base_document provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(baseDocumentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	baseDocumentUpsertCacheMut.RLock()
	cache, cached := baseDocumentUpsertCache[key]
	baseDocumentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			baseDocumentAllColumns,
			baseDocumentColumnsWithDefault,
			baseDocumentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			baseDocumentAllColumns,
			baseDocumentPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, baseDocumentGeneratedColumns)
		update = strmangle.SetComplement(update, baseDocumentGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("base: unable to upsert base_document, could not build update column list")
		}

		ret := strmangle.SetComplement(baseDocumentAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(baseDocumentPrimaryKeyColumns) == 0 {
				return errors.New("base: unable to upsert base_document, could not build conflict column list")
			}

			conflict = make([]string, len(baseDocumentPrimaryKeyColumns))
			copy(conflict, baseDocumentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"base\".\"base_document\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(baseDocumentType, baseDocumentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(baseDocumentType, baseDocumentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "base: unable to upsert base_document")
	}

	if !cached {
		baseDocumentUpsertCacheMut.Lock()
		baseDocumentUpsertCache[key] = cache
		baseDocumentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BaseDocument record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BaseDocument) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("base: no BaseDocument provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), baseDocumentPrimaryKeyMapping)
	sql := "DELETE FROM \"base\".\"base_document\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "base: unable to delete from base_document")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "base: failed to get rows affected by delete for base_document")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q baseDocumentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("base: no baseDocumentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "base: unable to delete all from base_document")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "base: failed to get rows affected by deleteall for base_document")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BaseDocumentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(baseDocumentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), baseDocumentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"base\".\"base_document\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, baseDocumentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "base: unable to delete all from baseDocument slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "base: failed to get rows affected by deleteall for base_document")
	}

	if len(baseDocumentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BaseDocument) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBaseDocument(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BaseDocumentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BaseDocumentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), baseDocumentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"base\".\"base_document\".* FROM \"base\".\"base_document\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, baseDocumentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "base: unable to reload all in BaseDocumentSlice")
	}

	*o = slice

	return nil
}

// BaseDocumentExists checks if the BaseDocument row exists.
func BaseDocumentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"base\".\"base_document\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "base: unable to check if base_document exists")
	}

	return exists, nil
}

// Exists checks if the BaseDocument row exists.
func (o *BaseDocument) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BaseDocumentExists(ctx, exec, o.ID)
}
