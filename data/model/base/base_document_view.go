// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package base

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// BaseDocumentView is an object representing the database table.
type BaseDocumentView struct {
	ID                          null.Int           `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	CreatedAt                   null.Time          `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt                   null.Time          `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt                   null.Time          `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	IssueDate                   null.Time          `boil:"issue_date" json:"issue_date,omitempty" toml:"issue_date" yaml:"issue_date,omitempty"`
	GrossAmountGen              types.NullDecimal  `boil:"gross_amount_gen" json:"gross_amount_gen,omitempty" toml:"gross_amount_gen" yaml:"gross_amount_gen,omitempty"`
	DiscountAmountGen           types.NullDecimal  `boil:"discount_amount_gen" json:"discount_amount_gen,omitempty" toml:"discount_amount_gen" yaml:"discount_amount_gen,omitempty"`
	DiscountRateGen             types.NullDecimal  `boil:"discount_rate_gen" json:"discount_rate_gen,omitempty" toml:"discount_rate_gen" yaml:"discount_rate_gen,omitempty"`
	AdditionalDiscountAmount    types.NullDecimal  `boil:"additional_discount_amount" json:"additional_discount_amount,omitempty" toml:"additional_discount_amount" yaml:"additional_discount_amount,omitempty"`
	AdditionalDiscountRateGen   types.NullDecimal  `boil:"additional_discount_rate_gen" json:"additional_discount_rate_gen,omitempty" toml:"additional_discount_rate_gen" yaml:"additional_discount_rate_gen,omitempty"`
	GrossAmountAfterDiscountGen types.NullDecimal  `boil:"gross_amount_after_discount_gen" json:"gross_amount_after_discount_gen,omitempty" toml:"gross_amount_after_discount_gen" yaml:"gross_amount_after_discount_gen,omitempty"`
	TaxAmountGen                types.NullDecimal  `boil:"tax_amount_gen" json:"tax_amount_gen,omitempty" toml:"tax_amount_gen" yaml:"tax_amount_gen,omitempty"`
	TaxRateGen                  types.NullDecimal  `boil:"tax_rate_gen" json:"tax_rate_gen,omitempty" toml:"tax_rate_gen" yaml:"tax_rate_gen,omitempty"`
	ShippingFeesGen             types.NullDecimal  `boil:"shipping_fees_gen" json:"shipping_fees_gen,omitempty" toml:"shipping_fees_gen" yaml:"shipping_fees_gen,omitempty"`
	OtherFees                   types.NullDecimal  `boil:"other_fees" json:"other_fees,omitempty" toml:"other_fees" yaml:"other_fees,omitempty"`
	CustomAdjustmentAmount      types.NullDecimal  `boil:"custom_adjustment_amount" json:"custom_adjustment_amount,omitempty" toml:"custom_adjustment_amount" yaml:"custom_adjustment_amount,omitempty"`
	NetAmountGen                types.NullDecimal  `boil:"net_amount_gen" json:"net_amount_gen,omitempty" toml:"net_amount_gen" yaml:"net_amount_gen,omitempty"`
	ShippingTerms               NullShippingTerms  `boil:"shipping_terms" json:"shipping_terms,omitempty" toml:"shipping_terms" yaml:"shipping_terms,omitempty"`
	ShippingMethod              NullShippingMethod `boil:"shipping_method" json:"shipping_method,omitempty" toml:"shipping_method" yaml:"shipping_method,omitempty"`
	ShippingDate                null.Time          `boil:"shipping_date" json:"shipping_date,omitempty" toml:"shipping_date" yaml:"shipping_date,omitempty"`
	PaymentAmount               types.NullDecimal  `boil:"payment_amount" json:"payment_amount,omitempty" toml:"payment_amount" yaml:"payment_amount,omitempty"`
	PaymentTerms                NullPaymentTerms   `boil:"payment_terms" json:"payment_terms,omitempty" toml:"payment_terms" yaml:"payment_terms,omitempty"`
	PaymentInstructions         null.String        `boil:"payment_instructions" json:"payment_instructions,omitempty" toml:"payment_instructions" yaml:"payment_instructions,omitempty"`
	PaymentStatus               NullPaymentStatus  `boil:"payment_status" json:"payment_status,omitempty" toml:"payment_status" yaml:"payment_status,omitempty"`
	Remarks                     null.String        `boil:"remarks" json:"remarks,omitempty" toml:"remarks" yaml:"remarks,omitempty"`
	TermsAndConditions          null.String        `boil:"terms_and_conditions" json:"terms_and_conditions,omitempty" toml:"terms_and_conditions" yaml:"terms_and_conditions,omitempty"`
	BaseDocumentItems           null.JSON          `boil:"base_document_items" json:"base_document_items,omitempty" toml:"base_document_items" yaml:"base_document_items,omitempty"`
}

var BaseDocumentViewColumns = struct {
	ID                          string
	CreatedAt                   string
	UpdatedAt                   string
	DeletedAt                   string
	IssueDate                   string
	GrossAmountGen              string
	DiscountAmountGen           string
	DiscountRateGen             string
	AdditionalDiscountAmount    string
	AdditionalDiscountRateGen   string
	GrossAmountAfterDiscountGen string
	TaxAmountGen                string
	TaxRateGen                  string
	ShippingFeesGen             string
	OtherFees                   string
	CustomAdjustmentAmount      string
	NetAmountGen                string
	ShippingTerms               string
	ShippingMethod              string
	ShippingDate                string
	PaymentAmount               string
	PaymentTerms                string
	PaymentInstructions         string
	PaymentStatus               string
	Remarks                     string
	TermsAndConditions          string
	BaseDocumentItems           string
}{
	ID:                          "id",
	CreatedAt:                   "created_at",
	UpdatedAt:                   "updated_at",
	DeletedAt:                   "deleted_at",
	IssueDate:                   "issue_date",
	GrossAmountGen:              "gross_amount_gen",
	DiscountAmountGen:           "discount_amount_gen",
	DiscountRateGen:             "discount_rate_gen",
	AdditionalDiscountAmount:    "additional_discount_amount",
	AdditionalDiscountRateGen:   "additional_discount_rate_gen",
	GrossAmountAfterDiscountGen: "gross_amount_after_discount_gen",
	TaxAmountGen:                "tax_amount_gen",
	TaxRateGen:                  "tax_rate_gen",
	ShippingFeesGen:             "shipping_fees_gen",
	OtherFees:                   "other_fees",
	CustomAdjustmentAmount:      "custom_adjustment_amount",
	NetAmountGen:                "net_amount_gen",
	ShippingTerms:               "shipping_terms",
	ShippingMethod:              "shipping_method",
	ShippingDate:                "shipping_date",
	PaymentAmount:               "payment_amount",
	PaymentTerms:                "payment_terms",
	PaymentInstructions:         "payment_instructions",
	PaymentStatus:               "payment_status",
	Remarks:                     "remarks",
	TermsAndConditions:          "terms_and_conditions",
	BaseDocumentItems:           "base_document_items",
}

var BaseDocumentViewTableColumns = struct {
	ID                          string
	CreatedAt                   string
	UpdatedAt                   string
	DeletedAt                   string
	IssueDate                   string
	GrossAmountGen              string
	DiscountAmountGen           string
	DiscountRateGen             string
	AdditionalDiscountAmount    string
	AdditionalDiscountRateGen   string
	GrossAmountAfterDiscountGen string
	TaxAmountGen                string
	TaxRateGen                  string
	ShippingFeesGen             string
	OtherFees                   string
	CustomAdjustmentAmount      string
	NetAmountGen                string
	ShippingTerms               string
	ShippingMethod              string
	ShippingDate                string
	PaymentAmount               string
	PaymentTerms                string
	PaymentInstructions         string
	PaymentStatus               string
	Remarks                     string
	TermsAndConditions          string
	BaseDocumentItems           string
}{
	ID:                          "base_document_view.id",
	CreatedAt:                   "base_document_view.created_at",
	UpdatedAt:                   "base_document_view.updated_at",
	DeletedAt:                   "base_document_view.deleted_at",
	IssueDate:                   "base_document_view.issue_date",
	GrossAmountGen:              "base_document_view.gross_amount_gen",
	DiscountAmountGen:           "base_document_view.discount_amount_gen",
	DiscountRateGen:             "base_document_view.discount_rate_gen",
	AdditionalDiscountAmount:    "base_document_view.additional_discount_amount",
	AdditionalDiscountRateGen:   "base_document_view.additional_discount_rate_gen",
	GrossAmountAfterDiscountGen: "base_document_view.gross_amount_after_discount_gen",
	TaxAmountGen:                "base_document_view.tax_amount_gen",
	TaxRateGen:                  "base_document_view.tax_rate_gen",
	ShippingFeesGen:             "base_document_view.shipping_fees_gen",
	OtherFees:                   "base_document_view.other_fees",
	CustomAdjustmentAmount:      "base_document_view.custom_adjustment_amount",
	NetAmountGen:                "base_document_view.net_amount_gen",
	ShippingTerms:               "base_document_view.shipping_terms",
	ShippingMethod:              "base_document_view.shipping_method",
	ShippingDate:                "base_document_view.shipping_date",
	PaymentAmount:               "base_document_view.payment_amount",
	PaymentTerms:                "base_document_view.payment_terms",
	PaymentInstructions:         "base_document_view.payment_instructions",
	PaymentStatus:               "base_document_view.payment_status",
	Remarks:                     "base_document_view.remarks",
	TermsAndConditions:          "base_document_view.terms_and_conditions",
	BaseDocumentItems:           "base_document_view.base_document_items",
}

// Generated where

var BaseDocumentViewWhere = struct {
	ID                          whereHelpernull_Int
	CreatedAt                   whereHelpernull_Time
	UpdatedAt                   whereHelpernull_Time
	DeletedAt                   whereHelpernull_Time
	IssueDate                   whereHelpernull_Time
	GrossAmountGen              whereHelpertypes_NullDecimal
	DiscountAmountGen           whereHelpertypes_NullDecimal
	DiscountRateGen             whereHelpertypes_NullDecimal
	AdditionalDiscountAmount    whereHelpertypes_NullDecimal
	AdditionalDiscountRateGen   whereHelpertypes_NullDecimal
	GrossAmountAfterDiscountGen whereHelpertypes_NullDecimal
	TaxAmountGen                whereHelpertypes_NullDecimal
	TaxRateGen                  whereHelpertypes_NullDecimal
	ShippingFeesGen             whereHelpertypes_NullDecimal
	OtherFees                   whereHelpertypes_NullDecimal
	CustomAdjustmentAmount      whereHelpertypes_NullDecimal
	NetAmountGen                whereHelpertypes_NullDecimal
	ShippingTerms               whereHelperNullShippingTerms
	ShippingMethod              whereHelperNullShippingMethod
	ShippingDate                whereHelpernull_Time
	PaymentAmount               whereHelpertypes_NullDecimal
	PaymentTerms                whereHelperNullPaymentTerms
	PaymentInstructions         whereHelpernull_String
	PaymentStatus               whereHelperNullPaymentStatus
	Remarks                     whereHelpernull_String
	TermsAndConditions          whereHelpernull_String
	BaseDocumentItems           whereHelpernull_JSON
}{
	ID:                          whereHelpernull_Int{field: "\"base\".\"base_document_view\".\"id\""},
	CreatedAt:                   whereHelpernull_Time{field: "\"base\".\"base_document_view\".\"created_at\""},
	UpdatedAt:                   whereHelpernull_Time{field: "\"base\".\"base_document_view\".\"updated_at\""},
	DeletedAt:                   whereHelpernull_Time{field: "\"base\".\"base_document_view\".\"deleted_at\""},
	IssueDate:                   whereHelpernull_Time{field: "\"base\".\"base_document_view\".\"issue_date\""},
	GrossAmountGen:              whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"gross_amount_gen\""},
	DiscountAmountGen:           whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"discount_amount_gen\""},
	DiscountRateGen:             whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"discount_rate_gen\""},
	AdditionalDiscountAmount:    whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"additional_discount_amount\""},
	AdditionalDiscountRateGen:   whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"additional_discount_rate_gen\""},
	GrossAmountAfterDiscountGen: whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"gross_amount_after_discount_gen\""},
	TaxAmountGen:                whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"tax_amount_gen\""},
	TaxRateGen:                  whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"tax_rate_gen\""},
	ShippingFeesGen:             whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"shipping_fees_gen\""},
	OtherFees:                   whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"other_fees\""},
	CustomAdjustmentAmount:      whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"custom_adjustment_amount\""},
	NetAmountGen:                whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"net_amount_gen\""},
	ShippingTerms:               whereHelperNullShippingTerms{field: "\"base\".\"base_document_view\".\"shipping_terms\""},
	ShippingMethod:              whereHelperNullShippingMethod{field: "\"base\".\"base_document_view\".\"shipping_method\""},
	ShippingDate:                whereHelpernull_Time{field: "\"base\".\"base_document_view\".\"shipping_date\""},
	PaymentAmount:               whereHelpertypes_NullDecimal{field: "\"base\".\"base_document_view\".\"payment_amount\""},
	PaymentTerms:                whereHelperNullPaymentTerms{field: "\"base\".\"base_document_view\".\"payment_terms\""},
	PaymentInstructions:         whereHelpernull_String{field: "\"base\".\"base_document_view\".\"payment_instructions\""},
	PaymentStatus:               whereHelperNullPaymentStatus{field: "\"base\".\"base_document_view\".\"payment_status\""},
	Remarks:                     whereHelpernull_String{field: "\"base\".\"base_document_view\".\"remarks\""},
	TermsAndConditions:          whereHelpernull_String{field: "\"base\".\"base_document_view\".\"terms_and_conditions\""},
	BaseDocumentItems:           whereHelpernull_JSON{field: "\"base\".\"base_document_view\".\"base_document_items\""},
}

var (
	baseDocumentViewAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "issue_date", "gross_amount_gen", "discount_amount_gen", "discount_rate_gen", "additional_discount_amount", "additional_discount_rate_gen", "gross_amount_after_discount_gen", "tax_amount_gen", "tax_rate_gen", "shipping_fees_gen", "other_fees", "custom_adjustment_amount", "net_amount_gen", "shipping_terms", "shipping_method", "shipping_date", "payment_amount", "payment_terms", "payment_instructions", "payment_status", "remarks", "terms_and_conditions", "base_document_items"}
	baseDocumentViewColumnsWithoutDefault = []string{}
	baseDocumentViewColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at", "issue_date", "gross_amount_gen", "discount_amount_gen", "discount_rate_gen", "additional_discount_amount", "additional_discount_rate_gen", "gross_amount_after_discount_gen", "tax_amount_gen", "tax_rate_gen", "shipping_fees_gen", "other_fees", "custom_adjustment_amount", "net_amount_gen", "shipping_terms", "shipping_method", "shipping_date", "payment_amount", "payment_terms", "payment_instructions", "payment_status", "remarks", "terms_and_conditions", "base_document_items"}
	baseDocumentViewPrimaryKeyColumns     = []string{}
	baseDocumentViewGeneratedColumns      = []string{}
)

type (
	// BaseDocumentViewSlice is an alias for a slice of pointers to BaseDocumentView.
	// This should almost always be used instead of []BaseDocumentView.
	BaseDocumentViewSlice []*BaseDocumentView
	// BaseDocumentViewHook is the signature for custom BaseDocumentView hook methods
	BaseDocumentViewHook func(context.Context, boil.ContextExecutor, *BaseDocumentView) error

	baseDocumentViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	baseDocumentViewType           = reflect.TypeOf(&BaseDocumentView{})
	baseDocumentViewMapping        = queries.MakeStructMapping(baseDocumentViewType)
	baseDocumentViewInsertCacheMut sync.RWMutex
	baseDocumentViewInsertCache    = make(map[string]insertCache)
	baseDocumentViewUpdateCacheMut sync.RWMutex
	baseDocumentViewUpdateCache    = make(map[string]updateCache)
	baseDocumentViewUpsertCacheMut sync.RWMutex
	baseDocumentViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var baseDocumentViewAfterSelectMu sync.Mutex
var baseDocumentViewAfterSelectHooks []BaseDocumentViewHook

var baseDocumentViewBeforeInsertMu sync.Mutex
var baseDocumentViewBeforeInsertHooks []BaseDocumentViewHook
var baseDocumentViewAfterInsertMu sync.Mutex
var baseDocumentViewAfterInsertHooks []BaseDocumentViewHook

var baseDocumentViewBeforeUpsertMu sync.Mutex
var baseDocumentViewBeforeUpsertHooks []BaseDocumentViewHook
var baseDocumentViewAfterUpsertMu sync.Mutex
var baseDocumentViewAfterUpsertHooks []BaseDocumentViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BaseDocumentView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BaseDocumentView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BaseDocumentView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BaseDocumentView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BaseDocumentView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDocumentViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBaseDocumentViewHook registers your hook function for all future operations.
func AddBaseDocumentViewHook(hookPoint boil.HookPoint, baseDocumentViewHook BaseDocumentViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		baseDocumentViewAfterSelectMu.Lock()
		baseDocumentViewAfterSelectHooks = append(baseDocumentViewAfterSelectHooks, baseDocumentViewHook)
		baseDocumentViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		baseDocumentViewBeforeInsertMu.Lock()
		baseDocumentViewBeforeInsertHooks = append(baseDocumentViewBeforeInsertHooks, baseDocumentViewHook)
		baseDocumentViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		baseDocumentViewAfterInsertMu.Lock()
		baseDocumentViewAfterInsertHooks = append(baseDocumentViewAfterInsertHooks, baseDocumentViewHook)
		baseDocumentViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		baseDocumentViewBeforeUpsertMu.Lock()
		baseDocumentViewBeforeUpsertHooks = append(baseDocumentViewBeforeUpsertHooks, baseDocumentViewHook)
		baseDocumentViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		baseDocumentViewAfterUpsertMu.Lock()
		baseDocumentViewAfterUpsertHooks = append(baseDocumentViewAfterUpsertHooks, baseDocumentViewHook)
		baseDocumentViewAfterUpsertMu.Unlock()
	}
}

// One returns a single baseDocumentView record from the query.
func (q baseDocumentViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BaseDocumentView, error) {
	o := &BaseDocumentView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "base: failed to execute a one query for base_document_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BaseDocumentView records from the query.
func (q baseDocumentViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (BaseDocumentViewSlice, error) {
	var o []*BaseDocumentView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "base: failed to assign all query results to BaseDocumentView slice")
	}

	if len(baseDocumentViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BaseDocumentView records in the query.
func (q baseDocumentViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "base: failed to count base_document_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q baseDocumentViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "base: failed to check if base_document_view exists")
	}

	return count > 0, nil
}

// BaseDocumentViews retrieves all the records using an executor.
func BaseDocumentViews(mods ...qm.QueryMod) baseDocumentViewQuery {
	mods = append(mods, qm.From("\"base\".\"base_document_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"base\".\"base_document_view\".*"})
	}

	return baseDocumentViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BaseDocumentView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("base: no base_document_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(baseDocumentViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	baseDocumentViewInsertCacheMut.RLock()
	cache, cached := baseDocumentViewInsertCache[key]
	baseDocumentViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			baseDocumentViewAllColumns,
			baseDocumentViewColumnsWithDefault,
			baseDocumentViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(baseDocumentViewType, baseDocumentViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(baseDocumentViewType, baseDocumentViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"base\".\"base_document_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"base\".\"base_document_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "base: unable to insert into base_document_view")
	}

	if !cached {
		baseDocumentViewInsertCacheMut.Lock()
		baseDocumentViewInsertCache[key] = cache
		baseDocumentViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BaseDocumentView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("base: no base_document_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(baseDocumentViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	baseDocumentViewUpsertCacheMut.RLock()
	cache, cached := baseDocumentViewUpsertCache[key]
	baseDocumentViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			baseDocumentViewAllColumns,
			baseDocumentViewColumnsWithDefault,
			baseDocumentViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			baseDocumentViewAllColumns,
			baseDocumentViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("base: unable to upsert base_document_view, could not build update column list")
		}

		ret := strmangle.SetComplement(baseDocumentViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(baseDocumentViewPrimaryKeyColumns) == 0 {
				return errors.New("base: unable to upsert base_document_view, could not build conflict column list")
			}

			conflict = make([]string, len(baseDocumentViewPrimaryKeyColumns))
			copy(conflict, baseDocumentViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"base\".\"base_document_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(baseDocumentViewType, baseDocumentViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(baseDocumentViewType, baseDocumentViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "base: unable to upsert base_document_view")
	}

	if !cached {
		baseDocumentViewUpsertCacheMut.Lock()
		baseDocumentViewUpsertCache[key] = cache
		baseDocumentViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
