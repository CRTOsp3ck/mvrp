// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package invoice

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// DebitNoteItem is an object representing the database table.
type DebitNoteItem struct {
	ID                 int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentItemID int               `boil:"base_document_item_id" json:"base_document_item_id" toml:"base_document_item_id" yaml:"base_document_item_id"`
	InvoiceItemID      null.Int          `boil:"invoice_item_id" json:"invoice_item_id,omitempty" toml:"invoice_item_id" yaml:"invoice_item_id,omitempty"`
	DebitNoteID        int               `boil:"debit_note_id" json:"debit_note_id" toml:"debit_note_id" yaml:"debit_note_id"`
	Name               string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description        string            `boil:"description" json:"description" toml:"description" yaml:"description"`
	Quantity           types.NullDecimal `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	UnitValue          types.NullDecimal `boil:"unit_value" json:"unit_value,omitempty" toml:"unit_value" yaml:"unit_value,omitempty"`
	TotalValue         types.Decimal     `boil:"total_value" json:"total_value" toml:"total_value" yaml:"total_value"`
	AdditionalCharges  types.NullDecimal `boil:"additional_charges" json:"additional_charges,omitempty" toml:"additional_charges" yaml:"additional_charges,omitempty"`
	CreatedAt          time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *debitNoteItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L debitNoteItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DebitNoteItemColumns = struct {
	ID                 string
	BaseDocumentItemID string
	InvoiceItemID      string
	DebitNoteID        string
	Name               string
	Description        string
	Quantity           string
	UnitValue          string
	TotalValue         string
	AdditionalCharges  string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	BaseDocumentItemID: "base_document_item_id",
	InvoiceItemID:      "invoice_item_id",
	DebitNoteID:        "debit_note_id",
	Name:               "name",
	Description:        "description",
	Quantity:           "quantity",
	UnitValue:          "unit_value",
	TotalValue:         "total_value",
	AdditionalCharges:  "additional_charges",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var DebitNoteItemTableColumns = struct {
	ID                 string
	BaseDocumentItemID string
	InvoiceItemID      string
	DebitNoteID        string
	Name               string
	Description        string
	Quantity           string
	UnitValue          string
	TotalValue         string
	AdditionalCharges  string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "debit_note_item.id",
	BaseDocumentItemID: "debit_note_item.base_document_item_id",
	InvoiceItemID:      "debit_note_item.invoice_item_id",
	DebitNoteID:        "debit_note_item.debit_note_id",
	Name:               "debit_note_item.name",
	Description:        "debit_note_item.description",
	Quantity:           "debit_note_item.quantity",
	UnitValue:          "debit_note_item.unit_value",
	TotalValue:         "debit_note_item.total_value",
	AdditionalCharges:  "debit_note_item.additional_charges",
	CreatedAt:          "debit_note_item.created_at",
	UpdatedAt:          "debit_note_item.updated_at",
	DeletedAt:          "debit_note_item.deleted_at",
}

// Generated where

var DebitNoteItemWhere = struct {
	ID                 whereHelperint
	BaseDocumentItemID whereHelperint
	InvoiceItemID      whereHelpernull_Int
	DebitNoteID        whereHelperint
	Name               whereHelperstring
	Description        whereHelperstring
	Quantity           whereHelpertypes_NullDecimal
	UnitValue          whereHelpertypes_NullDecimal
	TotalValue         whereHelpertypes_Decimal
	AdditionalCharges  whereHelpertypes_NullDecimal
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: "\"invoice\".\"debit_note_item\".\"id\""},
	BaseDocumentItemID: whereHelperint{field: "\"invoice\".\"debit_note_item\".\"base_document_item_id\""},
	InvoiceItemID:      whereHelpernull_Int{field: "\"invoice\".\"debit_note_item\".\"invoice_item_id\""},
	DebitNoteID:        whereHelperint{field: "\"invoice\".\"debit_note_item\".\"debit_note_id\""},
	Name:               whereHelperstring{field: "\"invoice\".\"debit_note_item\".\"name\""},
	Description:        whereHelperstring{field: "\"invoice\".\"debit_note_item\".\"description\""},
	Quantity:           whereHelpertypes_NullDecimal{field: "\"invoice\".\"debit_note_item\".\"quantity\""},
	UnitValue:          whereHelpertypes_NullDecimal{field: "\"invoice\".\"debit_note_item\".\"unit_value\""},
	TotalValue:         whereHelpertypes_Decimal{field: "\"invoice\".\"debit_note_item\".\"total_value\""},
	AdditionalCharges:  whereHelpertypes_NullDecimal{field: "\"invoice\".\"debit_note_item\".\"additional_charges\""},
	CreatedAt:          whereHelpertime_Time{field: "\"invoice\".\"debit_note_item\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"invoice\".\"debit_note_item\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"invoice\".\"debit_note_item\".\"deleted_at\""},
}

// DebitNoteItemRels is where relationship names are stored.
var DebitNoteItemRels = struct {
	DebitNote   string
	InvoiceItem string
}{
	DebitNote:   "DebitNote",
	InvoiceItem: "InvoiceItem",
}

// debitNoteItemR is where relationships are stored.
type debitNoteItemR struct {
	DebitNote   *DebitNote   `boil:"DebitNote" json:"DebitNote" toml:"DebitNote" yaml:"DebitNote"`
	InvoiceItem *InvoiceItem `boil:"InvoiceItem" json:"InvoiceItem" toml:"InvoiceItem" yaml:"InvoiceItem"`
}

// NewStruct creates a new relationship struct
func (*debitNoteItemR) NewStruct() *debitNoteItemR {
	return &debitNoteItemR{}
}

func (r *debitNoteItemR) GetDebitNote() *DebitNote {
	if r == nil {
		return nil
	}
	return r.DebitNote
}

func (r *debitNoteItemR) GetInvoiceItem() *InvoiceItem {
	if r == nil {
		return nil
	}
	return r.InvoiceItem
}

// debitNoteItemL is where Load methods for each relationship are stored.
type debitNoteItemL struct{}

var (
	debitNoteItemAllColumns            = []string{"id", "base_document_item_id", "invoice_item_id", "debit_note_id", "name", "description", "quantity", "unit_value", "total_value", "additional_charges", "created_at", "updated_at", "deleted_at"}
	debitNoteItemColumnsWithoutDefault = []string{"id", "base_document_item_id", "debit_note_id", "name", "description", "created_at", "updated_at"}
	debitNoteItemColumnsWithDefault    = []string{"invoice_item_id", "quantity", "unit_value", "total_value", "additional_charges", "deleted_at"}
	debitNoteItemPrimaryKeyColumns     = []string{"id"}
	debitNoteItemGeneratedColumns      = []string{}
)

type (
	// DebitNoteItemSlice is an alias for a slice of pointers to DebitNoteItem.
	// This should almost always be used instead of []DebitNoteItem.
	DebitNoteItemSlice []*DebitNoteItem
	// DebitNoteItemHook is the signature for custom DebitNoteItem hook methods
	DebitNoteItemHook func(context.Context, boil.ContextExecutor, *DebitNoteItem) error

	debitNoteItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	debitNoteItemType                 = reflect.TypeOf(&DebitNoteItem{})
	debitNoteItemMapping              = queries.MakeStructMapping(debitNoteItemType)
	debitNoteItemPrimaryKeyMapping, _ = queries.BindMapping(debitNoteItemType, debitNoteItemMapping, debitNoteItemPrimaryKeyColumns)
	debitNoteItemInsertCacheMut       sync.RWMutex
	debitNoteItemInsertCache          = make(map[string]insertCache)
	debitNoteItemUpdateCacheMut       sync.RWMutex
	debitNoteItemUpdateCache          = make(map[string]updateCache)
	debitNoteItemUpsertCacheMut       sync.RWMutex
	debitNoteItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var debitNoteItemAfterSelectMu sync.Mutex
var debitNoteItemAfterSelectHooks []DebitNoteItemHook

var debitNoteItemBeforeInsertMu sync.Mutex
var debitNoteItemBeforeInsertHooks []DebitNoteItemHook
var debitNoteItemAfterInsertMu sync.Mutex
var debitNoteItemAfterInsertHooks []DebitNoteItemHook

var debitNoteItemBeforeUpdateMu sync.Mutex
var debitNoteItemBeforeUpdateHooks []DebitNoteItemHook
var debitNoteItemAfterUpdateMu sync.Mutex
var debitNoteItemAfterUpdateHooks []DebitNoteItemHook

var debitNoteItemBeforeDeleteMu sync.Mutex
var debitNoteItemBeforeDeleteHooks []DebitNoteItemHook
var debitNoteItemAfterDeleteMu sync.Mutex
var debitNoteItemAfterDeleteHooks []DebitNoteItemHook

var debitNoteItemBeforeUpsertMu sync.Mutex
var debitNoteItemBeforeUpsertHooks []DebitNoteItemHook
var debitNoteItemAfterUpsertMu sync.Mutex
var debitNoteItemAfterUpsertHooks []DebitNoteItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DebitNoteItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DebitNoteItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DebitNoteItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DebitNoteItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DebitNoteItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DebitNoteItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DebitNoteItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DebitNoteItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DebitNoteItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDebitNoteItemHook registers your hook function for all future operations.
func AddDebitNoteItemHook(hookPoint boil.HookPoint, debitNoteItemHook DebitNoteItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		debitNoteItemAfterSelectMu.Lock()
		debitNoteItemAfterSelectHooks = append(debitNoteItemAfterSelectHooks, debitNoteItemHook)
		debitNoteItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		debitNoteItemBeforeInsertMu.Lock()
		debitNoteItemBeforeInsertHooks = append(debitNoteItemBeforeInsertHooks, debitNoteItemHook)
		debitNoteItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		debitNoteItemAfterInsertMu.Lock()
		debitNoteItemAfterInsertHooks = append(debitNoteItemAfterInsertHooks, debitNoteItemHook)
		debitNoteItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		debitNoteItemBeforeUpdateMu.Lock()
		debitNoteItemBeforeUpdateHooks = append(debitNoteItemBeforeUpdateHooks, debitNoteItemHook)
		debitNoteItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		debitNoteItemAfterUpdateMu.Lock()
		debitNoteItemAfterUpdateHooks = append(debitNoteItemAfterUpdateHooks, debitNoteItemHook)
		debitNoteItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		debitNoteItemBeforeDeleteMu.Lock()
		debitNoteItemBeforeDeleteHooks = append(debitNoteItemBeforeDeleteHooks, debitNoteItemHook)
		debitNoteItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		debitNoteItemAfterDeleteMu.Lock()
		debitNoteItemAfterDeleteHooks = append(debitNoteItemAfterDeleteHooks, debitNoteItemHook)
		debitNoteItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		debitNoteItemBeforeUpsertMu.Lock()
		debitNoteItemBeforeUpsertHooks = append(debitNoteItemBeforeUpsertHooks, debitNoteItemHook)
		debitNoteItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		debitNoteItemAfterUpsertMu.Lock()
		debitNoteItemAfterUpsertHooks = append(debitNoteItemAfterUpsertHooks, debitNoteItemHook)
		debitNoteItemAfterUpsertMu.Unlock()
	}
}

// One returns a single debitNoteItem record from the query.
func (q debitNoteItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DebitNoteItem, error) {
	o := &DebitNoteItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: failed to execute a one query for debit_note_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DebitNoteItem records from the query.
func (q debitNoteItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (DebitNoteItemSlice, error) {
	var o []*DebitNoteItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "invoice: failed to assign all query results to DebitNoteItem slice")
	}

	if len(debitNoteItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DebitNoteItem records in the query.
func (q debitNoteItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to count debit_note_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q debitNoteItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "invoice: failed to check if debit_note_item exists")
	}

	return count > 0, nil
}

// DebitNote pointed to by the foreign key.
func (o *DebitNoteItem) DebitNote(mods ...qm.QueryMod) debitNoteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DebitNoteID),
	}

	queryMods = append(queryMods, mods...)

	return DebitNotes(queryMods...)
}

// InvoiceItem pointed to by the foreign key.
func (o *DebitNoteItem) InvoiceItem(mods ...qm.QueryMod) invoiceItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InvoiceItemID),
	}

	queryMods = append(queryMods, mods...)

	return InvoiceItems(queryMods...)
}

// LoadDebitNote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (debitNoteItemL) LoadDebitNote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDebitNoteItem interface{}, mods queries.Applicator) error {
	var slice []*DebitNoteItem
	var object *DebitNoteItem

	if singular {
		var ok bool
		object, ok = maybeDebitNoteItem.(*DebitNoteItem)
		if !ok {
			object = new(DebitNoteItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDebitNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDebitNoteItem))
			}
		}
	} else {
		s, ok := maybeDebitNoteItem.(*[]*DebitNoteItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDebitNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDebitNoteItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &debitNoteItemR{}
		}
		args[object.DebitNoteID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &debitNoteItemR{}
			}

			args[obj.DebitNoteID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.debit_note`),
		qm.WhereIn(`invoice.debit_note.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DebitNote")
	}

	var resultSlice []*DebitNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DebitNote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for debit_note")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for debit_note")
	}

	if len(debitNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DebitNote = foreign
		if foreign.R == nil {
			foreign.R = &debitNoteR{}
		}
		foreign.R.DebitNoteItems = append(foreign.R.DebitNoteItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DebitNoteID == foreign.ID {
				local.R.DebitNote = foreign
				if foreign.R == nil {
					foreign.R = &debitNoteR{}
				}
				foreign.R.DebitNoteItems = append(foreign.R.DebitNoteItems, local)
				break
			}
		}
	}

	return nil
}

// LoadInvoiceItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (debitNoteItemL) LoadInvoiceItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDebitNoteItem interface{}, mods queries.Applicator) error {
	var slice []*DebitNoteItem
	var object *DebitNoteItem

	if singular {
		var ok bool
		object, ok = maybeDebitNoteItem.(*DebitNoteItem)
		if !ok {
			object = new(DebitNoteItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDebitNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDebitNoteItem))
			}
		}
	} else {
		s, ok := maybeDebitNoteItem.(*[]*DebitNoteItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDebitNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDebitNoteItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &debitNoteItemR{}
		}
		if !queries.IsNil(object.InvoiceItemID) {
			args[object.InvoiceItemID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &debitNoteItemR{}
			}

			if !queries.IsNil(obj.InvoiceItemID) {
				args[obj.InvoiceItemID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.invoice_item`),
		qm.WhereIn(`invoice.invoice_item.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load InvoiceItem")
	}

	var resultSlice []*InvoiceItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice InvoiceItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for invoice_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice_item")
	}

	if len(invoiceItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvoiceItem = foreign
		if foreign.R == nil {
			foreign.R = &invoiceItemR{}
		}
		foreign.R.DebitNoteItems = append(foreign.R.DebitNoteItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InvoiceItemID, foreign.ID) {
				local.R.InvoiceItem = foreign
				if foreign.R == nil {
					foreign.R = &invoiceItemR{}
				}
				foreign.R.DebitNoteItems = append(foreign.R.DebitNoteItems, local)
				break
			}
		}
	}

	return nil
}

// SetDebitNote of the debitNoteItem to the related item.
// Sets o.R.DebitNote to related.
// Adds o to related.R.DebitNoteItems.
func (o *DebitNoteItem) SetDebitNote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DebitNote) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice\".\"debit_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"debit_note_id"}),
		strmangle.WhereClause("\"", "\"", 2, debitNoteItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DebitNoteID = related.ID
	if o.R == nil {
		o.R = &debitNoteItemR{
			DebitNote: related,
		}
	} else {
		o.R.DebitNote = related
	}

	if related.R == nil {
		related.R = &debitNoteR{
			DebitNoteItems: DebitNoteItemSlice{o},
		}
	} else {
		related.R.DebitNoteItems = append(related.R.DebitNoteItems, o)
	}

	return nil
}

// SetInvoiceItem of the debitNoteItem to the related item.
// Sets o.R.InvoiceItem to related.
// Adds o to related.R.DebitNoteItems.
func (o *DebitNoteItem) SetInvoiceItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *InvoiceItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice\".\"debit_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"invoice_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, debitNoteItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InvoiceItemID, related.ID)
	if o.R == nil {
		o.R = &debitNoteItemR{
			InvoiceItem: related,
		}
	} else {
		o.R.InvoiceItem = related
	}

	if related.R == nil {
		related.R = &invoiceItemR{
			DebitNoteItems: DebitNoteItemSlice{o},
		}
	} else {
		related.R.DebitNoteItems = append(related.R.DebitNoteItems, o)
	}

	return nil
}

// RemoveInvoiceItem relationship.
// Sets o.R.InvoiceItem to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DebitNoteItem) RemoveInvoiceItem(ctx context.Context, exec boil.ContextExecutor, related *InvoiceItem) error {
	var err error

	queries.SetScanner(&o.InvoiceItemID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("invoice_item_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.InvoiceItem = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DebitNoteItems {
		if queries.Equal(o.InvoiceItemID, ri.InvoiceItemID) {
			continue
		}

		ln := len(related.R.DebitNoteItems)
		if ln > 1 && i < ln-1 {
			related.R.DebitNoteItems[i] = related.R.DebitNoteItems[ln-1]
		}
		related.R.DebitNoteItems = related.R.DebitNoteItems[:ln-1]
		break
	}
	return nil
}

// DebitNoteItems retrieves all the records using an executor.
func DebitNoteItems(mods ...qm.QueryMod) debitNoteItemQuery {
	mods = append(mods, qm.From("\"invoice\".\"debit_note_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice\".\"debit_note_item\".*"})
	}

	return debitNoteItemQuery{q}
}

// FindDebitNoteItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDebitNoteItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DebitNoteItem, error) {
	debitNoteItemObj := &DebitNoteItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice\".\"debit_note_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, debitNoteItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: unable to select from debit_note_item")
	}

	if err = debitNoteItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return debitNoteItemObj, err
	}

	return debitNoteItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DebitNoteItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("invoice: no debit_note_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(debitNoteItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	debitNoteItemInsertCacheMut.RLock()
	cache, cached := debitNoteItemInsertCache[key]
	debitNoteItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			debitNoteItemAllColumns,
			debitNoteItemColumnsWithDefault,
			debitNoteItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(debitNoteItemType, debitNoteItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(debitNoteItemType, debitNoteItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice\".\"debit_note_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice\".\"debit_note_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "invoice: unable to insert into debit_note_item")
	}

	if !cached {
		debitNoteItemInsertCacheMut.Lock()
		debitNoteItemInsertCache[key] = cache
		debitNoteItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DebitNoteItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DebitNoteItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	debitNoteItemUpdateCacheMut.RLock()
	cache, cached := debitNoteItemUpdateCache[key]
	debitNoteItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			debitNoteItemAllColumns,
			debitNoteItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("invoice: unable to update debit_note_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice\".\"debit_note_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, debitNoteItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(debitNoteItemType, debitNoteItemMapping, append(wl, debitNoteItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update debit_note_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by update for debit_note_item")
	}

	if !cached {
		debitNoteItemUpdateCacheMut.Lock()
		debitNoteItemUpdateCache[key] = cache
		debitNoteItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q debitNoteItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all for debit_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected for debit_note_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DebitNoteItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("invoice: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), debitNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice\".\"debit_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, debitNoteItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all in debitNoteItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected all in update all debitNoteItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DebitNoteItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("invoice: no debit_note_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(debitNoteItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	debitNoteItemUpsertCacheMut.RLock()
	cache, cached := debitNoteItemUpsertCache[key]
	debitNoteItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			debitNoteItemAllColumns,
			debitNoteItemColumnsWithDefault,
			debitNoteItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			debitNoteItemAllColumns,
			debitNoteItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("invoice: unable to upsert debit_note_item, could not build update column list")
		}

		ret := strmangle.SetComplement(debitNoteItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(debitNoteItemPrimaryKeyColumns) == 0 {
				return errors.New("invoice: unable to upsert debit_note_item, could not build conflict column list")
			}

			conflict = make([]string, len(debitNoteItemPrimaryKeyColumns))
			copy(conflict, debitNoteItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice\".\"debit_note_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(debitNoteItemType, debitNoteItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(debitNoteItemType, debitNoteItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "invoice: unable to upsert debit_note_item")
	}

	if !cached {
		debitNoteItemUpsertCacheMut.Lock()
		debitNoteItemUpsertCache[key] = cache
		debitNoteItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DebitNoteItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DebitNoteItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("invoice: no DebitNoteItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), debitNoteItemPrimaryKeyMapping)
	sql := "DELETE FROM \"invoice\".\"debit_note_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete from debit_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by delete for debit_note_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q debitNoteItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("invoice: no debitNoteItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from debit_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for debit_note_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DebitNoteItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(debitNoteItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), debitNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice\".\"debit_note_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, debitNoteItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from debitNoteItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for debit_note_item")
	}

	if len(debitNoteItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DebitNoteItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDebitNoteItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DebitNoteItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DebitNoteItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), debitNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice\".\"debit_note_item\".* FROM \"invoice\".\"debit_note_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, debitNoteItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "invoice: unable to reload all in DebitNoteItemSlice")
	}

	*o = slice

	return nil
}

// DebitNoteItemExists checks if the DebitNoteItem row exists.
func DebitNoteItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice\".\"debit_note_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "invoice: unable to check if debit_note_item exists")
	}

	return exists, nil
}

// Exists checks if the DebitNoteItem row exists.
func (o *DebitNoteItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DebitNoteItemExists(ctx, exec, o.ID)
}
