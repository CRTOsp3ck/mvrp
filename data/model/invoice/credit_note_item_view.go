// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package invoice

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CreditNoteItemView is an object representing the database table.
type CreditNoteItemView struct {
	ID                 null.Int          `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	BaseDocumentItemID null.Int          `boil:"base_document_item_id" json:"base_document_item_id,omitempty" toml:"base_document_item_id" yaml:"base_document_item_id,omitempty"`
	InvoiceItemID      null.Int          `boil:"invoice_item_id" json:"invoice_item_id,omitempty" toml:"invoice_item_id" yaml:"invoice_item_id,omitempty"`
	CreditNoteID       null.Int          `boil:"credit_note_id" json:"credit_note_id,omitempty" toml:"credit_note_id" yaml:"credit_note_id,omitempty"`
	Name               null.String       `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Description        null.String       `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Quantity           types.NullDecimal `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	UnitValue          types.NullDecimal `boil:"unit_value" json:"unit_value,omitempty" toml:"unit_value" yaml:"unit_value,omitempty"`
	TotalValueGen      types.NullDecimal `boil:"total_value_gen" json:"total_value_gen,omitempty" toml:"total_value_gen" yaml:"total_value_gen,omitempty"`
	CreatedAt          null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt          null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt          null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	BaseDocumentItem   null.JSON         `boil:"base_document_item" json:"base_document_item,omitempty" toml:"base_document_item" yaml:"base_document_item,omitempty"`
	InvoiceItemInfo    null.JSON         `boil:"invoice_item_info" json:"invoice_item_info,omitempty" toml:"invoice_item_info" yaml:"invoice_item_info,omitempty"`
}

var CreditNoteItemViewColumns = struct {
	ID                 string
	BaseDocumentItemID string
	InvoiceItemID      string
	CreditNoteID       string
	Name               string
	Description        string
	Quantity           string
	UnitValue          string
	TotalValueGen      string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
	BaseDocumentItem   string
	InvoiceItemInfo    string
}{
	ID:                 "id",
	BaseDocumentItemID: "base_document_item_id",
	InvoiceItemID:      "invoice_item_id",
	CreditNoteID:       "credit_note_id",
	Name:               "name",
	Description:        "description",
	Quantity:           "quantity",
	UnitValue:          "unit_value",
	TotalValueGen:      "total_value_gen",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
	BaseDocumentItem:   "base_document_item",
	InvoiceItemInfo:    "invoice_item_info",
}

var CreditNoteItemViewTableColumns = struct {
	ID                 string
	BaseDocumentItemID string
	InvoiceItemID      string
	CreditNoteID       string
	Name               string
	Description        string
	Quantity           string
	UnitValue          string
	TotalValueGen      string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
	BaseDocumentItem   string
	InvoiceItemInfo    string
}{
	ID:                 "credit_note_item_view.id",
	BaseDocumentItemID: "credit_note_item_view.base_document_item_id",
	InvoiceItemID:      "credit_note_item_view.invoice_item_id",
	CreditNoteID:       "credit_note_item_view.credit_note_id",
	Name:               "credit_note_item_view.name",
	Description:        "credit_note_item_view.description",
	Quantity:           "credit_note_item_view.quantity",
	UnitValue:          "credit_note_item_view.unit_value",
	TotalValueGen:      "credit_note_item_view.total_value_gen",
	CreatedAt:          "credit_note_item_view.created_at",
	UpdatedAt:          "credit_note_item_view.updated_at",
	DeletedAt:          "credit_note_item_view.deleted_at",
	BaseDocumentItem:   "credit_note_item_view.base_document_item",
	InvoiceItemInfo:    "credit_note_item_view.invoice_item_info",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CreditNoteItemViewWhere = struct {
	ID                 whereHelpernull_Int
	BaseDocumentItemID whereHelpernull_Int
	InvoiceItemID      whereHelpernull_Int
	CreditNoteID       whereHelpernull_Int
	Name               whereHelpernull_String
	Description        whereHelpernull_String
	Quantity           whereHelpertypes_NullDecimal
	UnitValue          whereHelpertypes_NullDecimal
	TotalValueGen      whereHelpertypes_NullDecimal
	CreatedAt          whereHelpernull_Time
	UpdatedAt          whereHelpernull_Time
	DeletedAt          whereHelpernull_Time
	BaseDocumentItem   whereHelpernull_JSON
	InvoiceItemInfo    whereHelpernull_JSON
}{
	ID:                 whereHelpernull_Int{field: "\"invoice\".\"credit_note_item_view\".\"id\""},
	BaseDocumentItemID: whereHelpernull_Int{field: "\"invoice\".\"credit_note_item_view\".\"base_document_item_id\""},
	InvoiceItemID:      whereHelpernull_Int{field: "\"invoice\".\"credit_note_item_view\".\"invoice_item_id\""},
	CreditNoteID:       whereHelpernull_Int{field: "\"invoice\".\"credit_note_item_view\".\"credit_note_id\""},
	Name:               whereHelpernull_String{field: "\"invoice\".\"credit_note_item_view\".\"name\""},
	Description:        whereHelpernull_String{field: "\"invoice\".\"credit_note_item_view\".\"description\""},
	Quantity:           whereHelpertypes_NullDecimal{field: "\"invoice\".\"credit_note_item_view\".\"quantity\""},
	UnitValue:          whereHelpertypes_NullDecimal{field: "\"invoice\".\"credit_note_item_view\".\"unit_value\""},
	TotalValueGen:      whereHelpertypes_NullDecimal{field: "\"invoice\".\"credit_note_item_view\".\"total_value_gen\""},
	CreatedAt:          whereHelpernull_Time{field: "\"invoice\".\"credit_note_item_view\".\"created_at\""},
	UpdatedAt:          whereHelpernull_Time{field: "\"invoice\".\"credit_note_item_view\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"invoice\".\"credit_note_item_view\".\"deleted_at\""},
	BaseDocumentItem:   whereHelpernull_JSON{field: "\"invoice\".\"credit_note_item_view\".\"base_document_item\""},
	InvoiceItemInfo:    whereHelpernull_JSON{field: "\"invoice\".\"credit_note_item_view\".\"invoice_item_info\""},
}

var (
	creditNoteItemViewAllColumns            = []string{"id", "base_document_item_id", "invoice_item_id", "credit_note_id", "name", "description", "quantity", "unit_value", "total_value_gen", "created_at", "updated_at", "deleted_at", "base_document_item", "invoice_item_info"}
	creditNoteItemViewColumnsWithoutDefault = []string{}
	creditNoteItemViewColumnsWithDefault    = []string{"id", "base_document_item_id", "invoice_item_id", "credit_note_id", "name", "description", "quantity", "unit_value", "total_value_gen", "created_at", "updated_at", "deleted_at", "base_document_item", "invoice_item_info"}
	creditNoteItemViewPrimaryKeyColumns     = []string{}
	creditNoteItemViewGeneratedColumns      = []string{}
)

type (
	// CreditNoteItemViewSlice is an alias for a slice of pointers to CreditNoteItemView.
	// This should almost always be used instead of []CreditNoteItemView.
	CreditNoteItemViewSlice []*CreditNoteItemView
	// CreditNoteItemViewHook is the signature for custom CreditNoteItemView hook methods
	CreditNoteItemViewHook func(context.Context, boil.ContextExecutor, *CreditNoteItemView) error

	creditNoteItemViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	creditNoteItemViewType           = reflect.TypeOf(&CreditNoteItemView{})
	creditNoteItemViewMapping        = queries.MakeStructMapping(creditNoteItemViewType)
	creditNoteItemViewInsertCacheMut sync.RWMutex
	creditNoteItemViewInsertCache    = make(map[string]insertCache)
	creditNoteItemViewUpdateCacheMut sync.RWMutex
	creditNoteItemViewUpdateCache    = make(map[string]updateCache)
	creditNoteItemViewUpsertCacheMut sync.RWMutex
	creditNoteItemViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var creditNoteItemViewAfterSelectMu sync.Mutex
var creditNoteItemViewAfterSelectHooks []CreditNoteItemViewHook

var creditNoteItemViewBeforeInsertMu sync.Mutex
var creditNoteItemViewBeforeInsertHooks []CreditNoteItemViewHook
var creditNoteItemViewAfterInsertMu sync.Mutex
var creditNoteItemViewAfterInsertHooks []CreditNoteItemViewHook

var creditNoteItemViewBeforeUpsertMu sync.Mutex
var creditNoteItemViewBeforeUpsertHooks []CreditNoteItemViewHook
var creditNoteItemViewAfterUpsertMu sync.Mutex
var creditNoteItemViewAfterUpsertHooks []CreditNoteItemViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CreditNoteItemView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CreditNoteItemView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CreditNoteItemView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CreditNoteItemView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CreditNoteItemView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCreditNoteItemViewHook registers your hook function for all future operations.
func AddCreditNoteItemViewHook(hookPoint boil.HookPoint, creditNoteItemViewHook CreditNoteItemViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		creditNoteItemViewAfterSelectMu.Lock()
		creditNoteItemViewAfterSelectHooks = append(creditNoteItemViewAfterSelectHooks, creditNoteItemViewHook)
		creditNoteItemViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		creditNoteItemViewBeforeInsertMu.Lock()
		creditNoteItemViewBeforeInsertHooks = append(creditNoteItemViewBeforeInsertHooks, creditNoteItemViewHook)
		creditNoteItemViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		creditNoteItemViewAfterInsertMu.Lock()
		creditNoteItemViewAfterInsertHooks = append(creditNoteItemViewAfterInsertHooks, creditNoteItemViewHook)
		creditNoteItemViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		creditNoteItemViewBeforeUpsertMu.Lock()
		creditNoteItemViewBeforeUpsertHooks = append(creditNoteItemViewBeforeUpsertHooks, creditNoteItemViewHook)
		creditNoteItemViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		creditNoteItemViewAfterUpsertMu.Lock()
		creditNoteItemViewAfterUpsertHooks = append(creditNoteItemViewAfterUpsertHooks, creditNoteItemViewHook)
		creditNoteItemViewAfterUpsertMu.Unlock()
	}
}

// One returns a single creditNoteItemView record from the query.
func (q creditNoteItemViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CreditNoteItemView, error) {
	o := &CreditNoteItemView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: failed to execute a one query for credit_note_item_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CreditNoteItemView records from the query.
func (q creditNoteItemViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (CreditNoteItemViewSlice, error) {
	var o []*CreditNoteItemView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "invoice: failed to assign all query results to CreditNoteItemView slice")
	}

	if len(creditNoteItemViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CreditNoteItemView records in the query.
func (q creditNoteItemViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to count credit_note_item_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q creditNoteItemViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "invoice: failed to check if credit_note_item_view exists")
	}

	return count > 0, nil
}

// CreditNoteItemViews retrieves all the records using an executor.
func CreditNoteItemViews(mods ...qm.QueryMod) creditNoteItemViewQuery {
	mods = append(mods, qm.From("\"invoice\".\"credit_note_item_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice\".\"credit_note_item_view\".*"})
	}

	return creditNoteItemViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CreditNoteItemView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("invoice: no credit_note_item_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditNoteItemViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	creditNoteItemViewInsertCacheMut.RLock()
	cache, cached := creditNoteItemViewInsertCache[key]
	creditNoteItemViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			creditNoteItemViewAllColumns,
			creditNoteItemViewColumnsWithDefault,
			creditNoteItemViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(creditNoteItemViewType, creditNoteItemViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(creditNoteItemViewType, creditNoteItemViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice\".\"credit_note_item_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice\".\"credit_note_item_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "invoice: unable to insert into credit_note_item_view")
	}

	if !cached {
		creditNoteItemViewInsertCacheMut.Lock()
		creditNoteItemViewInsertCache[key] = cache
		creditNoteItemViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CreditNoteItemView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("invoice: no credit_note_item_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditNoteItemViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	creditNoteItemViewUpsertCacheMut.RLock()
	cache, cached := creditNoteItemViewUpsertCache[key]
	creditNoteItemViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			creditNoteItemViewAllColumns,
			creditNoteItemViewColumnsWithDefault,
			creditNoteItemViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			creditNoteItemViewAllColumns,
			creditNoteItemViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("invoice: unable to upsert credit_note_item_view, could not build update column list")
		}

		ret := strmangle.SetComplement(creditNoteItemViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(creditNoteItemViewPrimaryKeyColumns) == 0 {
				return errors.New("invoice: unable to upsert credit_note_item_view, could not build conflict column list")
			}

			conflict = make([]string, len(creditNoteItemViewPrimaryKeyColumns))
			copy(conflict, creditNoteItemViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice\".\"credit_note_item_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(creditNoteItemViewType, creditNoteItemViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(creditNoteItemViewType, creditNoteItemViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "invoice: unable to upsert credit_note_item_view")
	}

	if !cached {
		creditNoteItemViewUpsertCacheMut.Lock()
		creditNoteItemViewUpsertCache[key] = cache
		creditNoteItemViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
