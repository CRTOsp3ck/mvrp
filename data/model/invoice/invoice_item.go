// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package invoice

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InvoiceItem is an object representing the database table.
type InvoiceItem struct {
	ID                 int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentItemID int       `boil:"base_document_item_id" json:"base_document_item_id" toml:"base_document_item_id" yaml:"base_document_item_id"`
	InvoiceID          int       `boil:"invoice_id" json:"invoice_id" toml:"invoice_id" yaml:"invoice_id"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *invoiceItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L invoiceItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InvoiceItemColumns = struct {
	ID                 string
	BaseDocumentItemID string
	InvoiceID          string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	BaseDocumentItemID: "base_document_item_id",
	InvoiceID:          "invoice_id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var InvoiceItemTableColumns = struct {
	ID                 string
	BaseDocumentItemID string
	InvoiceID          string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "invoice_item.id",
	BaseDocumentItemID: "invoice_item.base_document_item_id",
	InvoiceID:          "invoice_item.invoice_id",
	CreatedAt:          "invoice_item.created_at",
	UpdatedAt:          "invoice_item.updated_at",
	DeletedAt:          "invoice_item.deleted_at",
}

// Generated where

var InvoiceItemWhere = struct {
	ID                 whereHelperint
	BaseDocumentItemID whereHelperint
	InvoiceID          whereHelperint
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: "\"invoice\".\"invoice_item\".\"id\""},
	BaseDocumentItemID: whereHelperint{field: "\"invoice\".\"invoice_item\".\"base_document_item_id\""},
	InvoiceID:          whereHelperint{field: "\"invoice\".\"invoice_item\".\"invoice_id\""},
	CreatedAt:          whereHelpertime_Time{field: "\"invoice\".\"invoice_item\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"invoice\".\"invoice_item\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"invoice\".\"invoice_item\".\"deleted_at\""},
}

// InvoiceItemRels is where relationship names are stored.
var InvoiceItemRels = struct {
	Invoice         string
	CreditNoteItems string
	DebitNoteItems  string
}{
	Invoice:         "Invoice",
	CreditNoteItems: "CreditNoteItems",
	DebitNoteItems:  "DebitNoteItems",
}

// invoiceItemR is where relationships are stored.
type invoiceItemR struct {
	Invoice         *Invoice            `boil:"Invoice" json:"Invoice" toml:"Invoice" yaml:"Invoice"`
	CreditNoteItems CreditNoteItemSlice `boil:"CreditNoteItems" json:"CreditNoteItems" toml:"CreditNoteItems" yaml:"CreditNoteItems"`
	DebitNoteItems  DebitNoteItemSlice  `boil:"DebitNoteItems" json:"DebitNoteItems" toml:"DebitNoteItems" yaml:"DebitNoteItems"`
}

// NewStruct creates a new relationship struct
func (*invoiceItemR) NewStruct() *invoiceItemR {
	return &invoiceItemR{}
}

func (r *invoiceItemR) GetInvoice() *Invoice {
	if r == nil {
		return nil
	}
	return r.Invoice
}

func (r *invoiceItemR) GetCreditNoteItems() CreditNoteItemSlice {
	if r == nil {
		return nil
	}
	return r.CreditNoteItems
}

func (r *invoiceItemR) GetDebitNoteItems() DebitNoteItemSlice {
	if r == nil {
		return nil
	}
	return r.DebitNoteItems
}

// invoiceItemL is where Load methods for each relationship are stored.
type invoiceItemL struct{}

var (
	invoiceItemAllColumns            = []string{"id", "base_document_item_id", "invoice_id", "created_at", "updated_at", "deleted_at"}
	invoiceItemColumnsWithoutDefault = []string{"id", "base_document_item_id", "invoice_id", "created_at", "updated_at"}
	invoiceItemColumnsWithDefault    = []string{"deleted_at"}
	invoiceItemPrimaryKeyColumns     = []string{"id"}
	invoiceItemGeneratedColumns      = []string{}
)

type (
	// InvoiceItemSlice is an alias for a slice of pointers to InvoiceItem.
	// This should almost always be used instead of []InvoiceItem.
	InvoiceItemSlice []*InvoiceItem
	// InvoiceItemHook is the signature for custom InvoiceItem hook methods
	InvoiceItemHook func(context.Context, boil.ContextExecutor, *InvoiceItem) error

	invoiceItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	invoiceItemType                 = reflect.TypeOf(&InvoiceItem{})
	invoiceItemMapping              = queries.MakeStructMapping(invoiceItemType)
	invoiceItemPrimaryKeyMapping, _ = queries.BindMapping(invoiceItemType, invoiceItemMapping, invoiceItemPrimaryKeyColumns)
	invoiceItemInsertCacheMut       sync.RWMutex
	invoiceItemInsertCache          = make(map[string]insertCache)
	invoiceItemUpdateCacheMut       sync.RWMutex
	invoiceItemUpdateCache          = make(map[string]updateCache)
	invoiceItemUpsertCacheMut       sync.RWMutex
	invoiceItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var invoiceItemAfterSelectMu sync.Mutex
var invoiceItemAfterSelectHooks []InvoiceItemHook

var invoiceItemBeforeInsertMu sync.Mutex
var invoiceItemBeforeInsertHooks []InvoiceItemHook
var invoiceItemAfterInsertMu sync.Mutex
var invoiceItemAfterInsertHooks []InvoiceItemHook

var invoiceItemBeforeUpdateMu sync.Mutex
var invoiceItemBeforeUpdateHooks []InvoiceItemHook
var invoiceItemAfterUpdateMu sync.Mutex
var invoiceItemAfterUpdateHooks []InvoiceItemHook

var invoiceItemBeforeDeleteMu sync.Mutex
var invoiceItemBeforeDeleteHooks []InvoiceItemHook
var invoiceItemAfterDeleteMu sync.Mutex
var invoiceItemAfterDeleteHooks []InvoiceItemHook

var invoiceItemBeforeUpsertMu sync.Mutex
var invoiceItemBeforeUpsertHooks []InvoiceItemHook
var invoiceItemAfterUpsertMu sync.Mutex
var invoiceItemAfterUpsertHooks []InvoiceItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InvoiceItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InvoiceItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InvoiceItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InvoiceItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InvoiceItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InvoiceItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InvoiceItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InvoiceItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InvoiceItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInvoiceItemHook registers your hook function for all future operations.
func AddInvoiceItemHook(hookPoint boil.HookPoint, invoiceItemHook InvoiceItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		invoiceItemAfterSelectMu.Lock()
		invoiceItemAfterSelectHooks = append(invoiceItemAfterSelectHooks, invoiceItemHook)
		invoiceItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		invoiceItemBeforeInsertMu.Lock()
		invoiceItemBeforeInsertHooks = append(invoiceItemBeforeInsertHooks, invoiceItemHook)
		invoiceItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		invoiceItemAfterInsertMu.Lock()
		invoiceItemAfterInsertHooks = append(invoiceItemAfterInsertHooks, invoiceItemHook)
		invoiceItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		invoiceItemBeforeUpdateMu.Lock()
		invoiceItemBeforeUpdateHooks = append(invoiceItemBeforeUpdateHooks, invoiceItemHook)
		invoiceItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		invoiceItemAfterUpdateMu.Lock()
		invoiceItemAfterUpdateHooks = append(invoiceItemAfterUpdateHooks, invoiceItemHook)
		invoiceItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		invoiceItemBeforeDeleteMu.Lock()
		invoiceItemBeforeDeleteHooks = append(invoiceItemBeforeDeleteHooks, invoiceItemHook)
		invoiceItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		invoiceItemAfterDeleteMu.Lock()
		invoiceItemAfterDeleteHooks = append(invoiceItemAfterDeleteHooks, invoiceItemHook)
		invoiceItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		invoiceItemBeforeUpsertMu.Lock()
		invoiceItemBeforeUpsertHooks = append(invoiceItemBeforeUpsertHooks, invoiceItemHook)
		invoiceItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		invoiceItemAfterUpsertMu.Lock()
		invoiceItemAfterUpsertHooks = append(invoiceItemAfterUpsertHooks, invoiceItemHook)
		invoiceItemAfterUpsertMu.Unlock()
	}
}

// One returns a single invoiceItem record from the query.
func (q invoiceItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InvoiceItem, error) {
	o := &InvoiceItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: failed to execute a one query for invoice_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InvoiceItem records from the query.
func (q invoiceItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvoiceItemSlice, error) {
	var o []*InvoiceItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "invoice: failed to assign all query results to InvoiceItem slice")
	}

	if len(invoiceItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InvoiceItem records in the query.
func (q invoiceItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to count invoice_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q invoiceItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "invoice: failed to check if invoice_item exists")
	}

	return count > 0, nil
}

// Invoice pointed to by the foreign key.
func (o *InvoiceItem) Invoice(mods ...qm.QueryMod) invoiceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InvoiceID),
	}

	queryMods = append(queryMods, mods...)

	return Invoices(queryMods...)
}

// CreditNoteItems retrieves all the credit_note_item's CreditNoteItems with an executor.
func (o *InvoiceItem) CreditNoteItems(mods ...qm.QueryMod) creditNoteItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoice\".\"credit_note_item\".\"invoice_item_id\"=?", o.ID),
	)

	return CreditNoteItems(queryMods...)
}

// DebitNoteItems retrieves all the debit_note_item's DebitNoteItems with an executor.
func (o *InvoiceItem) DebitNoteItems(mods ...qm.QueryMod) debitNoteItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoice\".\"debit_note_item\".\"invoice_item_id\"=?", o.ID),
	)

	return DebitNoteItems(queryMods...)
}

// LoadInvoice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (invoiceItemL) LoadInvoice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoiceItem interface{}, mods queries.Applicator) error {
	var slice []*InvoiceItem
	var object *InvoiceItem

	if singular {
		var ok bool
		object, ok = maybeInvoiceItem.(*InvoiceItem)
		if !ok {
			object = new(InvoiceItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoiceItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoiceItem))
			}
		}
	} else {
		s, ok := maybeInvoiceItem.(*[]*InvoiceItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoiceItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoiceItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceItemR{}
		}
		args[object.InvoiceID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceItemR{}
			}

			args[obj.InvoiceID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.invoice`),
		qm.WhereIn(`invoice.invoice.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Invoice")
	}

	var resultSlice []*Invoice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Invoice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for invoice")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Invoice = foreign
		if foreign.R == nil {
			foreign.R = &invoiceR{}
		}
		foreign.R.InvoiceItems = append(foreign.R.InvoiceItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InvoiceID == foreign.ID {
				local.R.Invoice = foreign
				if foreign.R == nil {
					foreign.R = &invoiceR{}
				}
				foreign.R.InvoiceItems = append(foreign.R.InvoiceItems, local)
				break
			}
		}
	}

	return nil
}

// LoadCreditNoteItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (invoiceItemL) LoadCreditNoteItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoiceItem interface{}, mods queries.Applicator) error {
	var slice []*InvoiceItem
	var object *InvoiceItem

	if singular {
		var ok bool
		object, ok = maybeInvoiceItem.(*InvoiceItem)
		if !ok {
			object = new(InvoiceItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoiceItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoiceItem))
			}
		}
	} else {
		s, ok := maybeInvoiceItem.(*[]*InvoiceItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoiceItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoiceItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.credit_note_item`),
		qm.WhereIn(`invoice.credit_note_item.invoice_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load credit_note_item")
	}

	var resultSlice []*CreditNoteItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice credit_note_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on credit_note_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for credit_note_item")
	}

	if len(creditNoteItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreditNoteItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &creditNoteItemR{}
			}
			foreign.R.InvoiceItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.InvoiceItemID) {
				local.R.CreditNoteItems = append(local.R.CreditNoteItems, foreign)
				if foreign.R == nil {
					foreign.R = &creditNoteItemR{}
				}
				foreign.R.InvoiceItem = local
				break
			}
		}
	}

	return nil
}

// LoadDebitNoteItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (invoiceItemL) LoadDebitNoteItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoiceItem interface{}, mods queries.Applicator) error {
	var slice []*InvoiceItem
	var object *InvoiceItem

	if singular {
		var ok bool
		object, ok = maybeInvoiceItem.(*InvoiceItem)
		if !ok {
			object = new(InvoiceItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoiceItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoiceItem))
			}
		}
	} else {
		s, ok := maybeInvoiceItem.(*[]*InvoiceItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoiceItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoiceItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.debit_note_item`),
		qm.WhereIn(`invoice.debit_note_item.invoice_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load debit_note_item")
	}

	var resultSlice []*DebitNoteItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice debit_note_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on debit_note_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for debit_note_item")
	}

	if len(debitNoteItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DebitNoteItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &debitNoteItemR{}
			}
			foreign.R.InvoiceItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.InvoiceItemID) {
				local.R.DebitNoteItems = append(local.R.DebitNoteItems, foreign)
				if foreign.R == nil {
					foreign.R = &debitNoteItemR{}
				}
				foreign.R.InvoiceItem = local
				break
			}
		}
	}

	return nil
}

// SetInvoice of the invoiceItem to the related item.
// Sets o.R.Invoice to related.
// Adds o to related.R.InvoiceItems.
func (o *InvoiceItem) SetInvoice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Invoice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice\".\"invoice_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"invoice_id"}),
		strmangle.WhereClause("\"", "\"", 2, invoiceItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InvoiceID = related.ID
	if o.R == nil {
		o.R = &invoiceItemR{
			Invoice: related,
		}
	} else {
		o.R.Invoice = related
	}

	if related.R == nil {
		related.R = &invoiceR{
			InvoiceItems: InvoiceItemSlice{o},
		}
	} else {
		related.R.InvoiceItems = append(related.R.InvoiceItems, o)
	}

	return nil
}

// AddCreditNoteItems adds the given related objects to the existing relationships
// of the invoice_item, optionally inserting them as new records.
// Appends related to o.R.CreditNoteItems.
// Sets related.R.InvoiceItem appropriately.
func (o *InvoiceItem) AddCreditNoteItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CreditNoteItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InvoiceItemID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoice\".\"credit_note_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"invoice_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, creditNoteItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InvoiceItemID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &invoiceItemR{
			CreditNoteItems: related,
		}
	} else {
		o.R.CreditNoteItems = append(o.R.CreditNoteItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &creditNoteItemR{
				InvoiceItem: o,
			}
		} else {
			rel.R.InvoiceItem = o
		}
	}
	return nil
}

// SetCreditNoteItems removes all previously related items of the
// invoice_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InvoiceItem's CreditNoteItems accordingly.
// Replaces o.R.CreditNoteItems with related.
// Sets related.R.InvoiceItem's CreditNoteItems accordingly.
func (o *InvoiceItem) SetCreditNoteItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CreditNoteItem) error {
	query := "update \"invoice\".\"credit_note_item\" set \"invoice_item_id\" = null where \"invoice_item_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreditNoteItems {
			queries.SetScanner(&rel.InvoiceItemID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.InvoiceItem = nil
		}
		o.R.CreditNoteItems = nil
	}

	return o.AddCreditNoteItems(ctx, exec, insert, related...)
}

// RemoveCreditNoteItems relationships from objects passed in.
// Removes related items from R.CreditNoteItems (uses pointer comparison, removal does not keep order)
// Sets related.R.InvoiceItem.
func (o *InvoiceItem) RemoveCreditNoteItems(ctx context.Context, exec boil.ContextExecutor, related ...*CreditNoteItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InvoiceItemID, nil)
		if rel.R != nil {
			rel.R.InvoiceItem = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("invoice_item_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreditNoteItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreditNoteItems)
			if ln > 1 && i < ln-1 {
				o.R.CreditNoteItems[i] = o.R.CreditNoteItems[ln-1]
			}
			o.R.CreditNoteItems = o.R.CreditNoteItems[:ln-1]
			break
		}
	}

	return nil
}

// AddDebitNoteItems adds the given related objects to the existing relationships
// of the invoice_item, optionally inserting them as new records.
// Appends related to o.R.DebitNoteItems.
// Sets related.R.InvoiceItem appropriately.
func (o *InvoiceItem) AddDebitNoteItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DebitNoteItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InvoiceItemID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoice\".\"debit_note_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"invoice_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, debitNoteItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InvoiceItemID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &invoiceItemR{
			DebitNoteItems: related,
		}
	} else {
		o.R.DebitNoteItems = append(o.R.DebitNoteItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &debitNoteItemR{
				InvoiceItem: o,
			}
		} else {
			rel.R.InvoiceItem = o
		}
	}
	return nil
}

// SetDebitNoteItems removes all previously related items of the
// invoice_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InvoiceItem's DebitNoteItems accordingly.
// Replaces o.R.DebitNoteItems with related.
// Sets related.R.InvoiceItem's DebitNoteItems accordingly.
func (o *InvoiceItem) SetDebitNoteItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DebitNoteItem) error {
	query := "update \"invoice\".\"debit_note_item\" set \"invoice_item_id\" = null where \"invoice_item_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DebitNoteItems {
			queries.SetScanner(&rel.InvoiceItemID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.InvoiceItem = nil
		}
		o.R.DebitNoteItems = nil
	}

	return o.AddDebitNoteItems(ctx, exec, insert, related...)
}

// RemoveDebitNoteItems relationships from objects passed in.
// Removes related items from R.DebitNoteItems (uses pointer comparison, removal does not keep order)
// Sets related.R.InvoiceItem.
func (o *InvoiceItem) RemoveDebitNoteItems(ctx context.Context, exec boil.ContextExecutor, related ...*DebitNoteItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InvoiceItemID, nil)
		if rel.R != nil {
			rel.R.InvoiceItem = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("invoice_item_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DebitNoteItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.DebitNoteItems)
			if ln > 1 && i < ln-1 {
				o.R.DebitNoteItems[i] = o.R.DebitNoteItems[ln-1]
			}
			o.R.DebitNoteItems = o.R.DebitNoteItems[:ln-1]
			break
		}
	}

	return nil
}

// InvoiceItems retrieves all the records using an executor.
func InvoiceItems(mods ...qm.QueryMod) invoiceItemQuery {
	mods = append(mods, qm.From("\"invoice\".\"invoice_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice\".\"invoice_item\".*"})
	}

	return invoiceItemQuery{q}
}

// FindInvoiceItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvoiceItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*InvoiceItem, error) {
	invoiceItemObj := &InvoiceItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice\".\"invoice_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, invoiceItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: unable to select from invoice_item")
	}

	if err = invoiceItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return invoiceItemObj, err
	}

	return invoiceItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InvoiceItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("invoice: no invoice_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	invoiceItemInsertCacheMut.RLock()
	cache, cached := invoiceItemInsertCache[key]
	invoiceItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			invoiceItemAllColumns,
			invoiceItemColumnsWithDefault,
			invoiceItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(invoiceItemType, invoiceItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(invoiceItemType, invoiceItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice\".\"invoice_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice\".\"invoice_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "invoice: unable to insert into invoice_item")
	}

	if !cached {
		invoiceItemInsertCacheMut.Lock()
		invoiceItemInsertCache[key] = cache
		invoiceItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InvoiceItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InvoiceItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	invoiceItemUpdateCacheMut.RLock()
	cache, cached := invoiceItemUpdateCache[key]
	invoiceItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			invoiceItemAllColumns,
			invoiceItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("invoice: unable to update invoice_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice\".\"invoice_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, invoiceItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(invoiceItemType, invoiceItemMapping, append(wl, invoiceItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update invoice_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by update for invoice_item")
	}

	if !cached {
		invoiceItemUpdateCacheMut.Lock()
		invoiceItemUpdateCache[key] = cache
		invoiceItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q invoiceItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all for invoice_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected for invoice_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InvoiceItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("invoice: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice\".\"invoice_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, invoiceItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all in invoiceItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected all in update all invoiceItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InvoiceItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("invoice: no invoice_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	invoiceItemUpsertCacheMut.RLock()
	cache, cached := invoiceItemUpsertCache[key]
	invoiceItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			invoiceItemAllColumns,
			invoiceItemColumnsWithDefault,
			invoiceItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			invoiceItemAllColumns,
			invoiceItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("invoice: unable to upsert invoice_item, could not build update column list")
		}

		ret := strmangle.SetComplement(invoiceItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(invoiceItemPrimaryKeyColumns) == 0 {
				return errors.New("invoice: unable to upsert invoice_item, could not build conflict column list")
			}

			conflict = make([]string, len(invoiceItemPrimaryKeyColumns))
			copy(conflict, invoiceItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice\".\"invoice_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(invoiceItemType, invoiceItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(invoiceItemType, invoiceItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "invoice: unable to upsert invoice_item")
	}

	if !cached {
		invoiceItemUpsertCacheMut.Lock()
		invoiceItemUpsertCache[key] = cache
		invoiceItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InvoiceItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InvoiceItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("invoice: no InvoiceItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), invoiceItemPrimaryKeyMapping)
	sql := "DELETE FROM \"invoice\".\"invoice_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete from invoice_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by delete for invoice_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q invoiceItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("invoice: no invoiceItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from invoice_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for invoice_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InvoiceItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(invoiceItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice\".\"invoice_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoiceItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from invoiceItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for invoice_item")
	}

	if len(invoiceItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InvoiceItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvoiceItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InvoiceItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InvoiceItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice\".\"invoice_item\".* FROM \"invoice\".\"invoice_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoiceItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "invoice: unable to reload all in InvoiceItemSlice")
	}

	*o = slice

	return nil
}

// InvoiceItemExists checks if the InvoiceItem row exists.
func InvoiceItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice\".\"invoice_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "invoice: unable to check if invoice_item exists")
	}

	return exists, nil
}

// Exists checks if the InvoiceItem row exists.
func (o *InvoiceItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InvoiceItemExists(ctx, exec, o.ID)
}
