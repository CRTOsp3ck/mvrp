// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package invoice

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CreditNoteItem is an object representing the database table.
type CreditNoteItem struct {
	ID                 int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentItemID int               `boil:"base_document_item_id" json:"base_document_item_id" toml:"base_document_item_id" yaml:"base_document_item_id"`
	InvoiceItemID      null.Int          `boil:"invoice_item_id" json:"invoice_item_id,omitempty" toml:"invoice_item_id" yaml:"invoice_item_id,omitempty"`
	CreditNoteID       int               `boil:"credit_note_id" json:"credit_note_id" toml:"credit_note_id" yaml:"credit_note_id"`
	Name               string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description        string            `boil:"description" json:"description" toml:"description" yaml:"description"`
	Quantity           types.NullDecimal `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	UnitValue          types.NullDecimal `boil:"unit_value" json:"unit_value,omitempty" toml:"unit_value" yaml:"unit_value,omitempty"`
	TotalValueGen      types.Decimal     `boil:"total_value_gen" json:"total_value_gen" toml:"total_value_gen" yaml:"total_value_gen"`
	CreatedAt          time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *creditNoteItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L creditNoteItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CreditNoteItemColumns = struct {
	ID                 string
	BaseDocumentItemID string
	InvoiceItemID      string
	CreditNoteID       string
	Name               string
	Description        string
	Quantity           string
	UnitValue          string
	TotalValueGen      string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	BaseDocumentItemID: "base_document_item_id",
	InvoiceItemID:      "invoice_item_id",
	CreditNoteID:       "credit_note_id",
	Name:               "name",
	Description:        "description",
	Quantity:           "quantity",
	UnitValue:          "unit_value",
	TotalValueGen:      "total_value_gen",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var CreditNoteItemTableColumns = struct {
	ID                 string
	BaseDocumentItemID string
	InvoiceItemID      string
	CreditNoteID       string
	Name               string
	Description        string
	Quantity           string
	UnitValue          string
	TotalValueGen      string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "credit_note_item.id",
	BaseDocumentItemID: "credit_note_item.base_document_item_id",
	InvoiceItemID:      "credit_note_item.invoice_item_id",
	CreditNoteID:       "credit_note_item.credit_note_id",
	Name:               "credit_note_item.name",
	Description:        "credit_note_item.description",
	Quantity:           "credit_note_item.quantity",
	UnitValue:          "credit_note_item.unit_value",
	TotalValueGen:      "credit_note_item.total_value_gen",
	CreatedAt:          "credit_note_item.created_at",
	UpdatedAt:          "credit_note_item.updated_at",
	DeletedAt:          "credit_note_item.deleted_at",
}

// Generated where

var CreditNoteItemWhere = struct {
	ID                 whereHelperint
	BaseDocumentItemID whereHelperint
	InvoiceItemID      whereHelpernull_Int
	CreditNoteID       whereHelperint
	Name               whereHelperstring
	Description        whereHelperstring
	Quantity           whereHelpertypes_NullDecimal
	UnitValue          whereHelpertypes_NullDecimal
	TotalValueGen      whereHelpertypes_Decimal
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: "\"invoice\".\"credit_note_item\".\"id\""},
	BaseDocumentItemID: whereHelperint{field: "\"invoice\".\"credit_note_item\".\"base_document_item_id\""},
	InvoiceItemID:      whereHelpernull_Int{field: "\"invoice\".\"credit_note_item\".\"invoice_item_id\""},
	CreditNoteID:       whereHelperint{field: "\"invoice\".\"credit_note_item\".\"credit_note_id\""},
	Name:               whereHelperstring{field: "\"invoice\".\"credit_note_item\".\"name\""},
	Description:        whereHelperstring{field: "\"invoice\".\"credit_note_item\".\"description\""},
	Quantity:           whereHelpertypes_NullDecimal{field: "\"invoice\".\"credit_note_item\".\"quantity\""},
	UnitValue:          whereHelpertypes_NullDecimal{field: "\"invoice\".\"credit_note_item\".\"unit_value\""},
	TotalValueGen:      whereHelpertypes_Decimal{field: "\"invoice\".\"credit_note_item\".\"total_value_gen\""},
	CreatedAt:          whereHelpertime_Time{field: "\"invoice\".\"credit_note_item\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"invoice\".\"credit_note_item\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"invoice\".\"credit_note_item\".\"deleted_at\""},
}

// CreditNoteItemRels is where relationship names are stored.
var CreditNoteItemRels = struct {
	CreditNote  string
	InvoiceItem string
}{
	CreditNote:  "CreditNote",
	InvoiceItem: "InvoiceItem",
}

// creditNoteItemR is where relationships are stored.
type creditNoteItemR struct {
	CreditNote  *CreditNote  `boil:"CreditNote" json:"CreditNote" toml:"CreditNote" yaml:"CreditNote"`
	InvoiceItem *InvoiceItem `boil:"InvoiceItem" json:"InvoiceItem" toml:"InvoiceItem" yaml:"InvoiceItem"`
}

// NewStruct creates a new relationship struct
func (*creditNoteItemR) NewStruct() *creditNoteItemR {
	return &creditNoteItemR{}
}

func (r *creditNoteItemR) GetCreditNote() *CreditNote {
	if r == nil {
		return nil
	}
	return r.CreditNote
}

func (r *creditNoteItemR) GetInvoiceItem() *InvoiceItem {
	if r == nil {
		return nil
	}
	return r.InvoiceItem
}

// creditNoteItemL is where Load methods for each relationship are stored.
type creditNoteItemL struct{}

var (
	creditNoteItemAllColumns            = []string{"id", "base_document_item_id", "invoice_item_id", "credit_note_id", "name", "description", "quantity", "unit_value", "total_value_gen", "created_at", "updated_at", "deleted_at"}
	creditNoteItemColumnsWithoutDefault = []string{"id", "base_document_item_id", "credit_note_id", "name", "description", "created_at", "updated_at"}
	creditNoteItemColumnsWithDefault    = []string{"invoice_item_id", "quantity", "unit_value", "total_value_gen", "deleted_at"}
	creditNoteItemPrimaryKeyColumns     = []string{"id"}
	creditNoteItemGeneratedColumns      = []string{}
)

type (
	// CreditNoteItemSlice is an alias for a slice of pointers to CreditNoteItem.
	// This should almost always be used instead of []CreditNoteItem.
	CreditNoteItemSlice []*CreditNoteItem
	// CreditNoteItemHook is the signature for custom CreditNoteItem hook methods
	CreditNoteItemHook func(context.Context, boil.ContextExecutor, *CreditNoteItem) error

	creditNoteItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	creditNoteItemType                 = reflect.TypeOf(&CreditNoteItem{})
	creditNoteItemMapping              = queries.MakeStructMapping(creditNoteItemType)
	creditNoteItemPrimaryKeyMapping, _ = queries.BindMapping(creditNoteItemType, creditNoteItemMapping, creditNoteItemPrimaryKeyColumns)
	creditNoteItemInsertCacheMut       sync.RWMutex
	creditNoteItemInsertCache          = make(map[string]insertCache)
	creditNoteItemUpdateCacheMut       sync.RWMutex
	creditNoteItemUpdateCache          = make(map[string]updateCache)
	creditNoteItemUpsertCacheMut       sync.RWMutex
	creditNoteItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var creditNoteItemAfterSelectMu sync.Mutex
var creditNoteItemAfterSelectHooks []CreditNoteItemHook

var creditNoteItemBeforeInsertMu sync.Mutex
var creditNoteItemBeforeInsertHooks []CreditNoteItemHook
var creditNoteItemAfterInsertMu sync.Mutex
var creditNoteItemAfterInsertHooks []CreditNoteItemHook

var creditNoteItemBeforeUpdateMu sync.Mutex
var creditNoteItemBeforeUpdateHooks []CreditNoteItemHook
var creditNoteItemAfterUpdateMu sync.Mutex
var creditNoteItemAfterUpdateHooks []CreditNoteItemHook

var creditNoteItemBeforeDeleteMu sync.Mutex
var creditNoteItemBeforeDeleteHooks []CreditNoteItemHook
var creditNoteItemAfterDeleteMu sync.Mutex
var creditNoteItemAfterDeleteHooks []CreditNoteItemHook

var creditNoteItemBeforeUpsertMu sync.Mutex
var creditNoteItemBeforeUpsertHooks []CreditNoteItemHook
var creditNoteItemAfterUpsertMu sync.Mutex
var creditNoteItemAfterUpsertHooks []CreditNoteItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CreditNoteItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CreditNoteItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CreditNoteItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CreditNoteItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CreditNoteItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CreditNoteItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CreditNoteItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CreditNoteItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CreditNoteItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCreditNoteItemHook registers your hook function for all future operations.
func AddCreditNoteItemHook(hookPoint boil.HookPoint, creditNoteItemHook CreditNoteItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		creditNoteItemAfterSelectMu.Lock()
		creditNoteItemAfterSelectHooks = append(creditNoteItemAfterSelectHooks, creditNoteItemHook)
		creditNoteItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		creditNoteItemBeforeInsertMu.Lock()
		creditNoteItemBeforeInsertHooks = append(creditNoteItemBeforeInsertHooks, creditNoteItemHook)
		creditNoteItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		creditNoteItemAfterInsertMu.Lock()
		creditNoteItemAfterInsertHooks = append(creditNoteItemAfterInsertHooks, creditNoteItemHook)
		creditNoteItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		creditNoteItemBeforeUpdateMu.Lock()
		creditNoteItemBeforeUpdateHooks = append(creditNoteItemBeforeUpdateHooks, creditNoteItemHook)
		creditNoteItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		creditNoteItemAfterUpdateMu.Lock()
		creditNoteItemAfterUpdateHooks = append(creditNoteItemAfterUpdateHooks, creditNoteItemHook)
		creditNoteItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		creditNoteItemBeforeDeleteMu.Lock()
		creditNoteItemBeforeDeleteHooks = append(creditNoteItemBeforeDeleteHooks, creditNoteItemHook)
		creditNoteItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		creditNoteItemAfterDeleteMu.Lock()
		creditNoteItemAfterDeleteHooks = append(creditNoteItemAfterDeleteHooks, creditNoteItemHook)
		creditNoteItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		creditNoteItemBeforeUpsertMu.Lock()
		creditNoteItemBeforeUpsertHooks = append(creditNoteItemBeforeUpsertHooks, creditNoteItemHook)
		creditNoteItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		creditNoteItemAfterUpsertMu.Lock()
		creditNoteItemAfterUpsertHooks = append(creditNoteItemAfterUpsertHooks, creditNoteItemHook)
		creditNoteItemAfterUpsertMu.Unlock()
	}
}

// One returns a single creditNoteItem record from the query.
func (q creditNoteItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CreditNoteItem, error) {
	o := &CreditNoteItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: failed to execute a one query for credit_note_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CreditNoteItem records from the query.
func (q creditNoteItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (CreditNoteItemSlice, error) {
	var o []*CreditNoteItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "invoice: failed to assign all query results to CreditNoteItem slice")
	}

	if len(creditNoteItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CreditNoteItem records in the query.
func (q creditNoteItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to count credit_note_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q creditNoteItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "invoice: failed to check if credit_note_item exists")
	}

	return count > 0, nil
}

// CreditNote pointed to by the foreign key.
func (o *CreditNoteItem) CreditNote(mods ...qm.QueryMod) creditNoteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreditNoteID),
	}

	queryMods = append(queryMods, mods...)

	return CreditNotes(queryMods...)
}

// InvoiceItem pointed to by the foreign key.
func (o *CreditNoteItem) InvoiceItem(mods ...qm.QueryMod) invoiceItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InvoiceItemID),
	}

	queryMods = append(queryMods, mods...)

	return InvoiceItems(queryMods...)
}

// LoadCreditNote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (creditNoteItemL) LoadCreditNote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCreditNoteItem interface{}, mods queries.Applicator) error {
	var slice []*CreditNoteItem
	var object *CreditNoteItem

	if singular {
		var ok bool
		object, ok = maybeCreditNoteItem.(*CreditNoteItem)
		if !ok {
			object = new(CreditNoteItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCreditNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCreditNoteItem))
			}
		}
	} else {
		s, ok := maybeCreditNoteItem.(*[]*CreditNoteItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCreditNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCreditNoteItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &creditNoteItemR{}
		}
		args[object.CreditNoteID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &creditNoteItemR{}
			}

			args[obj.CreditNoteID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.credit_note`),
		qm.WhereIn(`invoice.credit_note.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CreditNote")
	}

	var resultSlice []*CreditNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CreditNote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for credit_note")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for credit_note")
	}

	if len(creditNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreditNote = foreign
		if foreign.R == nil {
			foreign.R = &creditNoteR{}
		}
		foreign.R.CreditNoteItems = append(foreign.R.CreditNoteItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreditNoteID == foreign.ID {
				local.R.CreditNote = foreign
				if foreign.R == nil {
					foreign.R = &creditNoteR{}
				}
				foreign.R.CreditNoteItems = append(foreign.R.CreditNoteItems, local)
				break
			}
		}
	}

	return nil
}

// LoadInvoiceItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (creditNoteItemL) LoadInvoiceItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCreditNoteItem interface{}, mods queries.Applicator) error {
	var slice []*CreditNoteItem
	var object *CreditNoteItem

	if singular {
		var ok bool
		object, ok = maybeCreditNoteItem.(*CreditNoteItem)
		if !ok {
			object = new(CreditNoteItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCreditNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCreditNoteItem))
			}
		}
	} else {
		s, ok := maybeCreditNoteItem.(*[]*CreditNoteItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCreditNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCreditNoteItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &creditNoteItemR{}
		}
		if !queries.IsNil(object.InvoiceItemID) {
			args[object.InvoiceItemID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &creditNoteItemR{}
			}

			if !queries.IsNil(obj.InvoiceItemID) {
				args[obj.InvoiceItemID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.invoice_item`),
		qm.WhereIn(`invoice.invoice_item.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load InvoiceItem")
	}

	var resultSlice []*InvoiceItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice InvoiceItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for invoice_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice_item")
	}

	if len(invoiceItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvoiceItem = foreign
		if foreign.R == nil {
			foreign.R = &invoiceItemR{}
		}
		foreign.R.CreditNoteItems = append(foreign.R.CreditNoteItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InvoiceItemID, foreign.ID) {
				local.R.InvoiceItem = foreign
				if foreign.R == nil {
					foreign.R = &invoiceItemR{}
				}
				foreign.R.CreditNoteItems = append(foreign.R.CreditNoteItems, local)
				break
			}
		}
	}

	return nil
}

// SetCreditNote of the creditNoteItem to the related item.
// Sets o.R.CreditNote to related.
// Adds o to related.R.CreditNoteItems.
func (o *CreditNoteItem) SetCreditNote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CreditNote) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice\".\"credit_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"credit_note_id"}),
		strmangle.WhereClause("\"", "\"", 2, creditNoteItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreditNoteID = related.ID
	if o.R == nil {
		o.R = &creditNoteItemR{
			CreditNote: related,
		}
	} else {
		o.R.CreditNote = related
	}

	if related.R == nil {
		related.R = &creditNoteR{
			CreditNoteItems: CreditNoteItemSlice{o},
		}
	} else {
		related.R.CreditNoteItems = append(related.R.CreditNoteItems, o)
	}

	return nil
}

// SetInvoiceItem of the creditNoteItem to the related item.
// Sets o.R.InvoiceItem to related.
// Adds o to related.R.CreditNoteItems.
func (o *CreditNoteItem) SetInvoiceItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *InvoiceItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice\".\"credit_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"invoice_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, creditNoteItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InvoiceItemID, related.ID)
	if o.R == nil {
		o.R = &creditNoteItemR{
			InvoiceItem: related,
		}
	} else {
		o.R.InvoiceItem = related
	}

	if related.R == nil {
		related.R = &invoiceItemR{
			CreditNoteItems: CreditNoteItemSlice{o},
		}
	} else {
		related.R.CreditNoteItems = append(related.R.CreditNoteItems, o)
	}

	return nil
}

// RemoveInvoiceItem relationship.
// Sets o.R.InvoiceItem to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CreditNoteItem) RemoveInvoiceItem(ctx context.Context, exec boil.ContextExecutor, related *InvoiceItem) error {
	var err error

	queries.SetScanner(&o.InvoiceItemID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("invoice_item_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.InvoiceItem = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreditNoteItems {
		if queries.Equal(o.InvoiceItemID, ri.InvoiceItemID) {
			continue
		}

		ln := len(related.R.CreditNoteItems)
		if ln > 1 && i < ln-1 {
			related.R.CreditNoteItems[i] = related.R.CreditNoteItems[ln-1]
		}
		related.R.CreditNoteItems = related.R.CreditNoteItems[:ln-1]
		break
	}
	return nil
}

// CreditNoteItems retrieves all the records using an executor.
func CreditNoteItems(mods ...qm.QueryMod) creditNoteItemQuery {
	mods = append(mods, qm.From("\"invoice\".\"credit_note_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice\".\"credit_note_item\".*"})
	}

	return creditNoteItemQuery{q}
}

// FindCreditNoteItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCreditNoteItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CreditNoteItem, error) {
	creditNoteItemObj := &CreditNoteItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice\".\"credit_note_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, creditNoteItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: unable to select from credit_note_item")
	}

	if err = creditNoteItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return creditNoteItemObj, err
	}

	return creditNoteItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CreditNoteItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("invoice: no credit_note_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditNoteItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	creditNoteItemInsertCacheMut.RLock()
	cache, cached := creditNoteItemInsertCache[key]
	creditNoteItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			creditNoteItemAllColumns,
			creditNoteItemColumnsWithDefault,
			creditNoteItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(creditNoteItemType, creditNoteItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(creditNoteItemType, creditNoteItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice\".\"credit_note_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice\".\"credit_note_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "invoice: unable to insert into credit_note_item")
	}

	if !cached {
		creditNoteItemInsertCacheMut.Lock()
		creditNoteItemInsertCache[key] = cache
		creditNoteItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CreditNoteItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CreditNoteItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	creditNoteItemUpdateCacheMut.RLock()
	cache, cached := creditNoteItemUpdateCache[key]
	creditNoteItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			creditNoteItemAllColumns,
			creditNoteItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("invoice: unable to update credit_note_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice\".\"credit_note_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, creditNoteItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(creditNoteItemType, creditNoteItemMapping, append(wl, creditNoteItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update credit_note_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by update for credit_note_item")
	}

	if !cached {
		creditNoteItemUpdateCacheMut.Lock()
		creditNoteItemUpdateCache[key] = cache
		creditNoteItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q creditNoteItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all for credit_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected for credit_note_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CreditNoteItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("invoice: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice\".\"credit_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, creditNoteItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all in creditNoteItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected all in update all creditNoteItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CreditNoteItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("invoice: no credit_note_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditNoteItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	creditNoteItemUpsertCacheMut.RLock()
	cache, cached := creditNoteItemUpsertCache[key]
	creditNoteItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			creditNoteItemAllColumns,
			creditNoteItemColumnsWithDefault,
			creditNoteItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			creditNoteItemAllColumns,
			creditNoteItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("invoice: unable to upsert credit_note_item, could not build update column list")
		}

		ret := strmangle.SetComplement(creditNoteItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(creditNoteItemPrimaryKeyColumns) == 0 {
				return errors.New("invoice: unable to upsert credit_note_item, could not build conflict column list")
			}

			conflict = make([]string, len(creditNoteItemPrimaryKeyColumns))
			copy(conflict, creditNoteItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice\".\"credit_note_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(creditNoteItemType, creditNoteItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(creditNoteItemType, creditNoteItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "invoice: unable to upsert credit_note_item")
	}

	if !cached {
		creditNoteItemUpsertCacheMut.Lock()
		creditNoteItemUpsertCache[key] = cache
		creditNoteItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CreditNoteItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CreditNoteItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("invoice: no CreditNoteItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), creditNoteItemPrimaryKeyMapping)
	sql := "DELETE FROM \"invoice\".\"credit_note_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete from credit_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by delete for credit_note_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q creditNoteItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("invoice: no creditNoteItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from credit_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for credit_note_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CreditNoteItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(creditNoteItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice\".\"credit_note_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, creditNoteItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from creditNoteItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for credit_note_item")
	}

	if len(creditNoteItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CreditNoteItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCreditNoteItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CreditNoteItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CreditNoteItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice\".\"credit_note_item\".* FROM \"invoice\".\"credit_note_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, creditNoteItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "invoice: unable to reload all in CreditNoteItemSlice")
	}

	*o = slice

	return nil
}

// CreditNoteItemExists checks if the CreditNoteItem row exists.
func CreditNoteItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice\".\"credit_note_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "invoice: unable to check if credit_note_item exists")
	}

	return exists, nil
}

// Exists checks if the CreditNoteItem row exists.
func (o *CreditNoteItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CreditNoteItemExists(ctx, exec, o.ID)
}
