// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package invoice

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// DebitNoteView is an object representing the database table.
type DebitNoteView struct {
	ID                 null.Int          `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	BaseDocumentID     null.Int          `boil:"base_document_id" json:"base_document_id,omitempty" toml:"base_document_id" yaml:"base_document_id,omitempty"`
	DebitNoteNumber    null.String       `boil:"debit_note_number" json:"debit_note_number,omitempty" toml:"debit_note_number" yaml:"debit_note_number,omitempty"`
	ReferenceInvoiceID null.Int          `boil:"reference_invoice_id" json:"reference_invoice_id,omitempty" toml:"reference_invoice_id" yaml:"reference_invoice_id,omitempty"`
	AdditionalCharges  types.NullDecimal `boil:"additional_charges" json:"additional_charges,omitempty" toml:"additional_charges" yaml:"additional_charges,omitempty"`
	ReasonForIssuance  null.String       `boil:"reason_for_issuance" json:"reason_for_issuance,omitempty" toml:"reason_for_issuance" yaml:"reason_for_issuance,omitempty"`
	CreatedAt          null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt          null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt          null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	BaseDocument       null.JSON         `boil:"base_document" json:"base_document,omitempty" toml:"base_document" yaml:"base_document,omitempty"`
}

var DebitNoteViewColumns = struct {
	ID                 string
	BaseDocumentID     string
	DebitNoteNumber    string
	ReferenceInvoiceID string
	AdditionalCharges  string
	ReasonForIssuance  string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
	BaseDocument       string
}{
	ID:                 "id",
	BaseDocumentID:     "base_document_id",
	DebitNoteNumber:    "debit_note_number",
	ReferenceInvoiceID: "reference_invoice_id",
	AdditionalCharges:  "additional_charges",
	ReasonForIssuance:  "reason_for_issuance",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
	BaseDocument:       "base_document",
}

var DebitNoteViewTableColumns = struct {
	ID                 string
	BaseDocumentID     string
	DebitNoteNumber    string
	ReferenceInvoiceID string
	AdditionalCharges  string
	ReasonForIssuance  string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
	BaseDocument       string
}{
	ID:                 "debit_note_view.id",
	BaseDocumentID:     "debit_note_view.base_document_id",
	DebitNoteNumber:    "debit_note_view.debit_note_number",
	ReferenceInvoiceID: "debit_note_view.reference_invoice_id",
	AdditionalCharges:  "debit_note_view.additional_charges",
	ReasonForIssuance:  "debit_note_view.reason_for_issuance",
	CreatedAt:          "debit_note_view.created_at",
	UpdatedAt:          "debit_note_view.updated_at",
	DeletedAt:          "debit_note_view.deleted_at",
	BaseDocument:       "debit_note_view.base_document",
}

// Generated where

var DebitNoteViewWhere = struct {
	ID                 whereHelpernull_Int
	BaseDocumentID     whereHelpernull_Int
	DebitNoteNumber    whereHelpernull_String
	ReferenceInvoiceID whereHelpernull_Int
	AdditionalCharges  whereHelpertypes_NullDecimal
	ReasonForIssuance  whereHelpernull_String
	CreatedAt          whereHelpernull_Time
	UpdatedAt          whereHelpernull_Time
	DeletedAt          whereHelpernull_Time
	BaseDocument       whereHelpernull_JSON
}{
	ID:                 whereHelpernull_Int{field: "\"invoice\".\"debit_note_view\".\"id\""},
	BaseDocumentID:     whereHelpernull_Int{field: "\"invoice\".\"debit_note_view\".\"base_document_id\""},
	DebitNoteNumber:    whereHelpernull_String{field: "\"invoice\".\"debit_note_view\".\"debit_note_number\""},
	ReferenceInvoiceID: whereHelpernull_Int{field: "\"invoice\".\"debit_note_view\".\"reference_invoice_id\""},
	AdditionalCharges:  whereHelpertypes_NullDecimal{field: "\"invoice\".\"debit_note_view\".\"additional_charges\""},
	ReasonForIssuance:  whereHelpernull_String{field: "\"invoice\".\"debit_note_view\".\"reason_for_issuance\""},
	CreatedAt:          whereHelpernull_Time{field: "\"invoice\".\"debit_note_view\".\"created_at\""},
	UpdatedAt:          whereHelpernull_Time{field: "\"invoice\".\"debit_note_view\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"invoice\".\"debit_note_view\".\"deleted_at\""},
	BaseDocument:       whereHelpernull_JSON{field: "\"invoice\".\"debit_note_view\".\"base_document\""},
}

var (
	debitNoteViewAllColumns            = []string{"id", "base_document_id", "debit_note_number", "reference_invoice_id", "additional_charges", "reason_for_issuance", "created_at", "updated_at", "deleted_at", "base_document"}
	debitNoteViewColumnsWithoutDefault = []string{}
	debitNoteViewColumnsWithDefault    = []string{"id", "base_document_id", "debit_note_number", "reference_invoice_id", "additional_charges", "reason_for_issuance", "created_at", "updated_at", "deleted_at", "base_document"}
	debitNoteViewPrimaryKeyColumns     = []string{}
	debitNoteViewGeneratedColumns      = []string{}
)

type (
	// DebitNoteViewSlice is an alias for a slice of pointers to DebitNoteView.
	// This should almost always be used instead of []DebitNoteView.
	DebitNoteViewSlice []*DebitNoteView
	// DebitNoteViewHook is the signature for custom DebitNoteView hook methods
	DebitNoteViewHook func(context.Context, boil.ContextExecutor, *DebitNoteView) error

	debitNoteViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	debitNoteViewType           = reflect.TypeOf(&DebitNoteView{})
	debitNoteViewMapping        = queries.MakeStructMapping(debitNoteViewType)
	debitNoteViewInsertCacheMut sync.RWMutex
	debitNoteViewInsertCache    = make(map[string]insertCache)
	debitNoteViewUpdateCacheMut sync.RWMutex
	debitNoteViewUpdateCache    = make(map[string]updateCache)
	debitNoteViewUpsertCacheMut sync.RWMutex
	debitNoteViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var debitNoteViewAfterSelectMu sync.Mutex
var debitNoteViewAfterSelectHooks []DebitNoteViewHook

var debitNoteViewBeforeInsertMu sync.Mutex
var debitNoteViewBeforeInsertHooks []DebitNoteViewHook
var debitNoteViewAfterInsertMu sync.Mutex
var debitNoteViewAfterInsertHooks []DebitNoteViewHook

var debitNoteViewBeforeUpsertMu sync.Mutex
var debitNoteViewBeforeUpsertHooks []DebitNoteViewHook
var debitNoteViewAfterUpsertMu sync.Mutex
var debitNoteViewAfterUpsertHooks []DebitNoteViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DebitNoteView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DebitNoteView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DebitNoteView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DebitNoteView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DebitNoteView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDebitNoteViewHook registers your hook function for all future operations.
func AddDebitNoteViewHook(hookPoint boil.HookPoint, debitNoteViewHook DebitNoteViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		debitNoteViewAfterSelectMu.Lock()
		debitNoteViewAfterSelectHooks = append(debitNoteViewAfterSelectHooks, debitNoteViewHook)
		debitNoteViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		debitNoteViewBeforeInsertMu.Lock()
		debitNoteViewBeforeInsertHooks = append(debitNoteViewBeforeInsertHooks, debitNoteViewHook)
		debitNoteViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		debitNoteViewAfterInsertMu.Lock()
		debitNoteViewAfterInsertHooks = append(debitNoteViewAfterInsertHooks, debitNoteViewHook)
		debitNoteViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		debitNoteViewBeforeUpsertMu.Lock()
		debitNoteViewBeforeUpsertHooks = append(debitNoteViewBeforeUpsertHooks, debitNoteViewHook)
		debitNoteViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		debitNoteViewAfterUpsertMu.Lock()
		debitNoteViewAfterUpsertHooks = append(debitNoteViewAfterUpsertHooks, debitNoteViewHook)
		debitNoteViewAfterUpsertMu.Unlock()
	}
}

// One returns a single debitNoteView record from the query.
func (q debitNoteViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DebitNoteView, error) {
	o := &DebitNoteView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: failed to execute a one query for debit_note_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DebitNoteView records from the query.
func (q debitNoteViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (DebitNoteViewSlice, error) {
	var o []*DebitNoteView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "invoice: failed to assign all query results to DebitNoteView slice")
	}

	if len(debitNoteViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DebitNoteView records in the query.
func (q debitNoteViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to count debit_note_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q debitNoteViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "invoice: failed to check if debit_note_view exists")
	}

	return count > 0, nil
}

// DebitNoteViews retrieves all the records using an executor.
func DebitNoteViews(mods ...qm.QueryMod) debitNoteViewQuery {
	mods = append(mods, qm.From("\"invoice\".\"debit_note_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice\".\"debit_note_view\".*"})
	}

	return debitNoteViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DebitNoteView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("invoice: no debit_note_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(debitNoteViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	debitNoteViewInsertCacheMut.RLock()
	cache, cached := debitNoteViewInsertCache[key]
	debitNoteViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			debitNoteViewAllColumns,
			debitNoteViewColumnsWithDefault,
			debitNoteViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(debitNoteViewType, debitNoteViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(debitNoteViewType, debitNoteViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice\".\"debit_note_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice\".\"debit_note_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "invoice: unable to insert into debit_note_view")
	}

	if !cached {
		debitNoteViewInsertCacheMut.Lock()
		debitNoteViewInsertCache[key] = cache
		debitNoteViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DebitNoteView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("invoice: no debit_note_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(debitNoteViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	debitNoteViewUpsertCacheMut.RLock()
	cache, cached := debitNoteViewUpsertCache[key]
	debitNoteViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			debitNoteViewAllColumns,
			debitNoteViewColumnsWithDefault,
			debitNoteViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			debitNoteViewAllColumns,
			debitNoteViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("invoice: unable to upsert debit_note_view, could not build update column list")
		}

		ret := strmangle.SetComplement(debitNoteViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(debitNoteViewPrimaryKeyColumns) == 0 {
				return errors.New("invoice: unable to upsert debit_note_view, could not build conflict column list")
			}

			conflict = make([]string, len(debitNoteViewPrimaryKeyColumns))
			copy(conflict, debitNoteViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice\".\"debit_note_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(debitNoteViewType, debitNoteViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(debitNoteViewType, debitNoteViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "invoice: unable to upsert debit_note_view")
	}

	if !cached {
		debitNoteViewUpsertCacheMut.Lock()
		debitNoteViewUpsertCache[key] = cache
		debitNoteViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
