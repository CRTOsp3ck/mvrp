// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package invoice

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InvoiceView is an object representing the database table.
type InvoiceView struct {
	ID             null.Int    `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	BaseDocumentID null.Int    `boil:"base_document_id" json:"base_document_id,omitempty" toml:"base_document_id" yaml:"base_document_id,omitempty"`
	InvoiceNumber  null.String `boil:"invoice_number" json:"invoice_number,omitempty" toml:"invoice_number" yaml:"invoice_number,omitempty"`
	VendorID       null.Int    `boil:"vendor_id" json:"vendor_id,omitempty" toml:"vendor_id" yaml:"vendor_id,omitempty"`
	CustomerID     null.Int    `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	PaymentDueDate null.Time   `boil:"payment_due_date" json:"payment_due_date,omitempty" toml:"payment_due_date" yaml:"payment_due_date,omitempty"`
	CreatedAt      null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt      null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	BaseDocument   null.JSON   `boil:"base_document" json:"base_document,omitempty" toml:"base_document" yaml:"base_document,omitempty"`
	InvoiceItems   null.JSON   `boil:"invoice_items" json:"invoice_items,omitempty" toml:"invoice_items" yaml:"invoice_items,omitempty"`
	VendorInfo     null.JSON   `boil:"vendor_info" json:"vendor_info,omitempty" toml:"vendor_info" yaml:"vendor_info,omitempty"`
	CustomerInfo   null.JSON   `boil:"customer_info" json:"customer_info,omitempty" toml:"customer_info" yaml:"customer_info,omitempty"`
}

var InvoiceViewColumns = struct {
	ID             string
	BaseDocumentID string
	InvoiceNumber  string
	VendorID       string
	CustomerID     string
	PaymentDueDate string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
	BaseDocument   string
	InvoiceItems   string
	VendorInfo     string
	CustomerInfo   string
}{
	ID:             "id",
	BaseDocumentID: "base_document_id",
	InvoiceNumber:  "invoice_number",
	VendorID:       "vendor_id",
	CustomerID:     "customer_id",
	PaymentDueDate: "payment_due_date",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
	BaseDocument:   "base_document",
	InvoiceItems:   "invoice_items",
	VendorInfo:     "vendor_info",
	CustomerInfo:   "customer_info",
}

var InvoiceViewTableColumns = struct {
	ID             string
	BaseDocumentID string
	InvoiceNumber  string
	VendorID       string
	CustomerID     string
	PaymentDueDate string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
	BaseDocument   string
	InvoiceItems   string
	VendorInfo     string
	CustomerInfo   string
}{
	ID:             "invoice_view.id",
	BaseDocumentID: "invoice_view.base_document_id",
	InvoiceNumber:  "invoice_view.invoice_number",
	VendorID:       "invoice_view.vendor_id",
	CustomerID:     "invoice_view.customer_id",
	PaymentDueDate: "invoice_view.payment_due_date",
	CreatedAt:      "invoice_view.created_at",
	UpdatedAt:      "invoice_view.updated_at",
	DeletedAt:      "invoice_view.deleted_at",
	BaseDocument:   "invoice_view.base_document",
	InvoiceItems:   "invoice_view.invoice_items",
	VendorInfo:     "invoice_view.vendor_info",
	CustomerInfo:   "invoice_view.customer_info",
}

// Generated where

var InvoiceViewWhere = struct {
	ID             whereHelpernull_Int
	BaseDocumentID whereHelpernull_Int
	InvoiceNumber  whereHelpernull_String
	VendorID       whereHelpernull_Int
	CustomerID     whereHelpernull_Int
	PaymentDueDate whereHelpernull_Time
	CreatedAt      whereHelpernull_Time
	UpdatedAt      whereHelpernull_Time
	DeletedAt      whereHelpernull_Time
	BaseDocument   whereHelpernull_JSON
	InvoiceItems   whereHelpernull_JSON
	VendorInfo     whereHelpernull_JSON
	CustomerInfo   whereHelpernull_JSON
}{
	ID:             whereHelpernull_Int{field: "\"invoice\".\"invoice_view\".\"id\""},
	BaseDocumentID: whereHelpernull_Int{field: "\"invoice\".\"invoice_view\".\"base_document_id\""},
	InvoiceNumber:  whereHelpernull_String{field: "\"invoice\".\"invoice_view\".\"invoice_number\""},
	VendorID:       whereHelpernull_Int{field: "\"invoice\".\"invoice_view\".\"vendor_id\""},
	CustomerID:     whereHelpernull_Int{field: "\"invoice\".\"invoice_view\".\"customer_id\""},
	PaymentDueDate: whereHelpernull_Time{field: "\"invoice\".\"invoice_view\".\"payment_due_date\""},
	CreatedAt:      whereHelpernull_Time{field: "\"invoice\".\"invoice_view\".\"created_at\""},
	UpdatedAt:      whereHelpernull_Time{field: "\"invoice\".\"invoice_view\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"invoice\".\"invoice_view\".\"deleted_at\""},
	BaseDocument:   whereHelpernull_JSON{field: "\"invoice\".\"invoice_view\".\"base_document\""},
	InvoiceItems:   whereHelpernull_JSON{field: "\"invoice\".\"invoice_view\".\"invoice_items\""},
	VendorInfo:     whereHelpernull_JSON{field: "\"invoice\".\"invoice_view\".\"vendor_info\""},
	CustomerInfo:   whereHelpernull_JSON{field: "\"invoice\".\"invoice_view\".\"customer_info\""},
}

var (
	invoiceViewAllColumns            = []string{"id", "base_document_id", "invoice_number", "vendor_id", "customer_id", "payment_due_date", "created_at", "updated_at", "deleted_at", "base_document", "invoice_items", "vendor_info", "customer_info"}
	invoiceViewColumnsWithoutDefault = []string{}
	invoiceViewColumnsWithDefault    = []string{"id", "base_document_id", "invoice_number", "vendor_id", "customer_id", "payment_due_date", "created_at", "updated_at", "deleted_at", "base_document", "invoice_items", "vendor_info", "customer_info"}
	invoiceViewPrimaryKeyColumns     = []string{}
	invoiceViewGeneratedColumns      = []string{}
)

type (
	// InvoiceViewSlice is an alias for a slice of pointers to InvoiceView.
	// This should almost always be used instead of []InvoiceView.
	InvoiceViewSlice []*InvoiceView
	// InvoiceViewHook is the signature for custom InvoiceView hook methods
	InvoiceViewHook func(context.Context, boil.ContextExecutor, *InvoiceView) error

	invoiceViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	invoiceViewType           = reflect.TypeOf(&InvoiceView{})
	invoiceViewMapping        = queries.MakeStructMapping(invoiceViewType)
	invoiceViewInsertCacheMut sync.RWMutex
	invoiceViewInsertCache    = make(map[string]insertCache)
	invoiceViewUpdateCacheMut sync.RWMutex
	invoiceViewUpdateCache    = make(map[string]updateCache)
	invoiceViewUpsertCacheMut sync.RWMutex
	invoiceViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var invoiceViewAfterSelectMu sync.Mutex
var invoiceViewAfterSelectHooks []InvoiceViewHook

var invoiceViewBeforeInsertMu sync.Mutex
var invoiceViewBeforeInsertHooks []InvoiceViewHook
var invoiceViewAfterInsertMu sync.Mutex
var invoiceViewAfterInsertHooks []InvoiceViewHook

var invoiceViewBeforeUpsertMu sync.Mutex
var invoiceViewBeforeUpsertHooks []InvoiceViewHook
var invoiceViewAfterUpsertMu sync.Mutex
var invoiceViewAfterUpsertHooks []InvoiceViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InvoiceView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InvoiceView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InvoiceView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InvoiceView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InvoiceView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInvoiceViewHook registers your hook function for all future operations.
func AddInvoiceViewHook(hookPoint boil.HookPoint, invoiceViewHook InvoiceViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		invoiceViewAfterSelectMu.Lock()
		invoiceViewAfterSelectHooks = append(invoiceViewAfterSelectHooks, invoiceViewHook)
		invoiceViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		invoiceViewBeforeInsertMu.Lock()
		invoiceViewBeforeInsertHooks = append(invoiceViewBeforeInsertHooks, invoiceViewHook)
		invoiceViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		invoiceViewAfterInsertMu.Lock()
		invoiceViewAfterInsertHooks = append(invoiceViewAfterInsertHooks, invoiceViewHook)
		invoiceViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		invoiceViewBeforeUpsertMu.Lock()
		invoiceViewBeforeUpsertHooks = append(invoiceViewBeforeUpsertHooks, invoiceViewHook)
		invoiceViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		invoiceViewAfterUpsertMu.Lock()
		invoiceViewAfterUpsertHooks = append(invoiceViewAfterUpsertHooks, invoiceViewHook)
		invoiceViewAfterUpsertMu.Unlock()
	}
}

// One returns a single invoiceView record from the query.
func (q invoiceViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InvoiceView, error) {
	o := &InvoiceView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: failed to execute a one query for invoice_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InvoiceView records from the query.
func (q invoiceViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvoiceViewSlice, error) {
	var o []*InvoiceView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "invoice: failed to assign all query results to InvoiceView slice")
	}

	if len(invoiceViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InvoiceView records in the query.
func (q invoiceViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to count invoice_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q invoiceViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "invoice: failed to check if invoice_view exists")
	}

	return count > 0, nil
}

// InvoiceViews retrieves all the records using an executor.
func InvoiceViews(mods ...qm.QueryMod) invoiceViewQuery {
	mods = append(mods, qm.From("\"invoice\".\"invoice_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice\".\"invoice_view\".*"})
	}

	return invoiceViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InvoiceView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("invoice: no invoice_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	invoiceViewInsertCacheMut.RLock()
	cache, cached := invoiceViewInsertCache[key]
	invoiceViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			invoiceViewAllColumns,
			invoiceViewColumnsWithDefault,
			invoiceViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(invoiceViewType, invoiceViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(invoiceViewType, invoiceViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice\".\"invoice_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice\".\"invoice_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "invoice: unable to insert into invoice_view")
	}

	if !cached {
		invoiceViewInsertCacheMut.Lock()
		invoiceViewInsertCache[key] = cache
		invoiceViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InvoiceView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("invoice: no invoice_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	invoiceViewUpsertCacheMut.RLock()
	cache, cached := invoiceViewUpsertCache[key]
	invoiceViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			invoiceViewAllColumns,
			invoiceViewColumnsWithDefault,
			invoiceViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			invoiceViewAllColumns,
			invoiceViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("invoice: unable to upsert invoice_view, could not build update column list")
		}

		ret := strmangle.SetComplement(invoiceViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(invoiceViewPrimaryKeyColumns) == 0 {
				return errors.New("invoice: unable to upsert invoice_view, could not build conflict column list")
			}

			conflict = make([]string, len(invoiceViewPrimaryKeyColumns))
			copy(conflict, invoiceViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice\".\"invoice_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(invoiceViewType, invoiceViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(invoiceViewType, invoiceViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "invoice: unable to upsert invoice_view")
	}

	if !cached {
		invoiceViewUpsertCacheMut.Lock()
		invoiceViewUpsertCache[key] = cache
		invoiceViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
