// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package invoice

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// DebitNote is an object representing the database table.
type DebitNote struct {
	ID                 int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentID     int               `boil:"base_document_id" json:"base_document_id" toml:"base_document_id" yaml:"base_document_id"`
	DebitNoteNumber    string            `boil:"debit_note_number" json:"debit_note_number" toml:"debit_note_number" yaml:"debit_note_number"`
	ReferenceInvoiceID null.Int          `boil:"reference_invoice_id" json:"reference_invoice_id,omitempty" toml:"reference_invoice_id" yaml:"reference_invoice_id,omitempty"`
	AdditionalCharges  types.NullDecimal `boil:"additional_charges" json:"additional_charges,omitempty" toml:"additional_charges" yaml:"additional_charges,omitempty"`
	ReasonForIssuance  null.String       `boil:"reason_for_issuance" json:"reason_for_issuance,omitempty" toml:"reason_for_issuance" yaml:"reason_for_issuance,omitempty"`
	CreatedAt          time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *debitNoteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L debitNoteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DebitNoteColumns = struct {
	ID                 string
	BaseDocumentID     string
	DebitNoteNumber    string
	ReferenceInvoiceID string
	AdditionalCharges  string
	ReasonForIssuance  string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	BaseDocumentID:     "base_document_id",
	DebitNoteNumber:    "debit_note_number",
	ReferenceInvoiceID: "reference_invoice_id",
	AdditionalCharges:  "additional_charges",
	ReasonForIssuance:  "reason_for_issuance",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var DebitNoteTableColumns = struct {
	ID                 string
	BaseDocumentID     string
	DebitNoteNumber    string
	ReferenceInvoiceID string
	AdditionalCharges  string
	ReasonForIssuance  string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "debit_note.id",
	BaseDocumentID:     "debit_note.base_document_id",
	DebitNoteNumber:    "debit_note.debit_note_number",
	ReferenceInvoiceID: "debit_note.reference_invoice_id",
	AdditionalCharges:  "debit_note.additional_charges",
	ReasonForIssuance:  "debit_note.reason_for_issuance",
	CreatedAt:          "debit_note.created_at",
	UpdatedAt:          "debit_note.updated_at",
	DeletedAt:          "debit_note.deleted_at",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var DebitNoteWhere = struct {
	ID                 whereHelperint
	BaseDocumentID     whereHelperint
	DebitNoteNumber    whereHelperstring
	ReferenceInvoiceID whereHelpernull_Int
	AdditionalCharges  whereHelpertypes_NullDecimal
	ReasonForIssuance  whereHelpernull_String
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: "\"invoice\".\"debit_note\".\"id\""},
	BaseDocumentID:     whereHelperint{field: "\"invoice\".\"debit_note\".\"base_document_id\""},
	DebitNoteNumber:    whereHelperstring{field: "\"invoice\".\"debit_note\".\"debit_note_number\""},
	ReferenceInvoiceID: whereHelpernull_Int{field: "\"invoice\".\"debit_note\".\"reference_invoice_id\""},
	AdditionalCharges:  whereHelpertypes_NullDecimal{field: "\"invoice\".\"debit_note\".\"additional_charges\""},
	ReasonForIssuance:  whereHelpernull_String{field: "\"invoice\".\"debit_note\".\"reason_for_issuance\""},
	CreatedAt:          whereHelpertime_Time{field: "\"invoice\".\"debit_note\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"invoice\".\"debit_note\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"invoice\".\"debit_note\".\"deleted_at\""},
}

// DebitNoteRels is where relationship names are stored.
var DebitNoteRels = struct {
	ReferenceInvoice string
}{
	ReferenceInvoice: "ReferenceInvoice",
}

// debitNoteR is where relationships are stored.
type debitNoteR struct {
	ReferenceInvoice *Invoice `boil:"ReferenceInvoice" json:"ReferenceInvoice" toml:"ReferenceInvoice" yaml:"ReferenceInvoice"`
}

// NewStruct creates a new relationship struct
func (*debitNoteR) NewStruct() *debitNoteR {
	return &debitNoteR{}
}

func (r *debitNoteR) GetReferenceInvoice() *Invoice {
	if r == nil {
		return nil
	}
	return r.ReferenceInvoice
}

// debitNoteL is where Load methods for each relationship are stored.
type debitNoteL struct{}

var (
	debitNoteAllColumns            = []string{"id", "base_document_id", "debit_note_number", "reference_invoice_id", "additional_charges", "reason_for_issuance", "created_at", "updated_at", "deleted_at"}
	debitNoteColumnsWithoutDefault = []string{"id", "base_document_id", "debit_note_number", "created_at", "updated_at"}
	debitNoteColumnsWithDefault    = []string{"reference_invoice_id", "additional_charges", "reason_for_issuance", "deleted_at"}
	debitNotePrimaryKeyColumns     = []string{"id"}
	debitNoteGeneratedColumns      = []string{}
)

type (
	// DebitNoteSlice is an alias for a slice of pointers to DebitNote.
	// This should almost always be used instead of []DebitNote.
	DebitNoteSlice []*DebitNote
	// DebitNoteHook is the signature for custom DebitNote hook methods
	DebitNoteHook func(context.Context, boil.ContextExecutor, *DebitNote) error

	debitNoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	debitNoteType                 = reflect.TypeOf(&DebitNote{})
	debitNoteMapping              = queries.MakeStructMapping(debitNoteType)
	debitNotePrimaryKeyMapping, _ = queries.BindMapping(debitNoteType, debitNoteMapping, debitNotePrimaryKeyColumns)
	debitNoteInsertCacheMut       sync.RWMutex
	debitNoteInsertCache          = make(map[string]insertCache)
	debitNoteUpdateCacheMut       sync.RWMutex
	debitNoteUpdateCache          = make(map[string]updateCache)
	debitNoteUpsertCacheMut       sync.RWMutex
	debitNoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var debitNoteAfterSelectMu sync.Mutex
var debitNoteAfterSelectHooks []DebitNoteHook

var debitNoteBeforeInsertMu sync.Mutex
var debitNoteBeforeInsertHooks []DebitNoteHook
var debitNoteAfterInsertMu sync.Mutex
var debitNoteAfterInsertHooks []DebitNoteHook

var debitNoteBeforeUpdateMu sync.Mutex
var debitNoteBeforeUpdateHooks []DebitNoteHook
var debitNoteAfterUpdateMu sync.Mutex
var debitNoteAfterUpdateHooks []DebitNoteHook

var debitNoteBeforeDeleteMu sync.Mutex
var debitNoteBeforeDeleteHooks []DebitNoteHook
var debitNoteAfterDeleteMu sync.Mutex
var debitNoteAfterDeleteHooks []DebitNoteHook

var debitNoteBeforeUpsertMu sync.Mutex
var debitNoteBeforeUpsertHooks []DebitNoteHook
var debitNoteAfterUpsertMu sync.Mutex
var debitNoteAfterUpsertHooks []DebitNoteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DebitNote) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DebitNote) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DebitNote) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DebitNote) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DebitNote) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DebitNote) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DebitNote) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DebitNote) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DebitNote) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitNoteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDebitNoteHook registers your hook function for all future operations.
func AddDebitNoteHook(hookPoint boil.HookPoint, debitNoteHook DebitNoteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		debitNoteAfterSelectMu.Lock()
		debitNoteAfterSelectHooks = append(debitNoteAfterSelectHooks, debitNoteHook)
		debitNoteAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		debitNoteBeforeInsertMu.Lock()
		debitNoteBeforeInsertHooks = append(debitNoteBeforeInsertHooks, debitNoteHook)
		debitNoteBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		debitNoteAfterInsertMu.Lock()
		debitNoteAfterInsertHooks = append(debitNoteAfterInsertHooks, debitNoteHook)
		debitNoteAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		debitNoteBeforeUpdateMu.Lock()
		debitNoteBeforeUpdateHooks = append(debitNoteBeforeUpdateHooks, debitNoteHook)
		debitNoteBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		debitNoteAfterUpdateMu.Lock()
		debitNoteAfterUpdateHooks = append(debitNoteAfterUpdateHooks, debitNoteHook)
		debitNoteAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		debitNoteBeforeDeleteMu.Lock()
		debitNoteBeforeDeleteHooks = append(debitNoteBeforeDeleteHooks, debitNoteHook)
		debitNoteBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		debitNoteAfterDeleteMu.Lock()
		debitNoteAfterDeleteHooks = append(debitNoteAfterDeleteHooks, debitNoteHook)
		debitNoteAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		debitNoteBeforeUpsertMu.Lock()
		debitNoteBeforeUpsertHooks = append(debitNoteBeforeUpsertHooks, debitNoteHook)
		debitNoteBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		debitNoteAfterUpsertMu.Lock()
		debitNoteAfterUpsertHooks = append(debitNoteAfterUpsertHooks, debitNoteHook)
		debitNoteAfterUpsertMu.Unlock()
	}
}

// One returns a single debitNote record from the query.
func (q debitNoteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DebitNote, error) {
	o := &DebitNote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: failed to execute a one query for debit_note")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DebitNote records from the query.
func (q debitNoteQuery) All(ctx context.Context, exec boil.ContextExecutor) (DebitNoteSlice, error) {
	var o []*DebitNote

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "invoice: failed to assign all query results to DebitNote slice")
	}

	if len(debitNoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DebitNote records in the query.
func (q debitNoteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to count debit_note rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q debitNoteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "invoice: failed to check if debit_note exists")
	}

	return count > 0, nil
}

// ReferenceInvoice pointed to by the foreign key.
func (o *DebitNote) ReferenceInvoice(mods ...qm.QueryMod) invoiceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ReferenceInvoiceID),
	}

	queryMods = append(queryMods, mods...)

	return Invoices(queryMods...)
}

// LoadReferenceInvoice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (debitNoteL) LoadReferenceInvoice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDebitNote interface{}, mods queries.Applicator) error {
	var slice []*DebitNote
	var object *DebitNote

	if singular {
		var ok bool
		object, ok = maybeDebitNote.(*DebitNote)
		if !ok {
			object = new(DebitNote)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDebitNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDebitNote))
			}
		}
	} else {
		s, ok := maybeDebitNote.(*[]*DebitNote)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDebitNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDebitNote))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &debitNoteR{}
		}
		if !queries.IsNil(object.ReferenceInvoiceID) {
			args[object.ReferenceInvoiceID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &debitNoteR{}
			}

			if !queries.IsNil(obj.ReferenceInvoiceID) {
				args[obj.ReferenceInvoiceID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.invoice`),
		qm.WhereIn(`invoice.invoice.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Invoice")
	}

	var resultSlice []*Invoice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Invoice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for invoice")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReferenceInvoice = foreign
		if foreign.R == nil {
			foreign.R = &invoiceR{}
		}
		foreign.R.ReferenceInvoiceDebitNotes = append(foreign.R.ReferenceInvoiceDebitNotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ReferenceInvoiceID, foreign.ID) {
				local.R.ReferenceInvoice = foreign
				if foreign.R == nil {
					foreign.R = &invoiceR{}
				}
				foreign.R.ReferenceInvoiceDebitNotes = append(foreign.R.ReferenceInvoiceDebitNotes, local)
				break
			}
		}
	}

	return nil
}

// SetReferenceInvoice of the debitNote to the related item.
// Sets o.R.ReferenceInvoice to related.
// Adds o to related.R.ReferenceInvoiceDebitNotes.
func (o *DebitNote) SetReferenceInvoice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Invoice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice\".\"debit_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"reference_invoice_id"}),
		strmangle.WhereClause("\"", "\"", 2, debitNotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ReferenceInvoiceID, related.ID)
	if o.R == nil {
		o.R = &debitNoteR{
			ReferenceInvoice: related,
		}
	} else {
		o.R.ReferenceInvoice = related
	}

	if related.R == nil {
		related.R = &invoiceR{
			ReferenceInvoiceDebitNotes: DebitNoteSlice{o},
		}
	} else {
		related.R.ReferenceInvoiceDebitNotes = append(related.R.ReferenceInvoiceDebitNotes, o)
	}

	return nil
}

// RemoveReferenceInvoice relationship.
// Sets o.R.ReferenceInvoice to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DebitNote) RemoveReferenceInvoice(ctx context.Context, exec boil.ContextExecutor, related *Invoice) error {
	var err error

	queries.SetScanner(&o.ReferenceInvoiceID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("reference_invoice_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ReferenceInvoice = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ReferenceInvoiceDebitNotes {
		if queries.Equal(o.ReferenceInvoiceID, ri.ReferenceInvoiceID) {
			continue
		}

		ln := len(related.R.ReferenceInvoiceDebitNotes)
		if ln > 1 && i < ln-1 {
			related.R.ReferenceInvoiceDebitNotes[i] = related.R.ReferenceInvoiceDebitNotes[ln-1]
		}
		related.R.ReferenceInvoiceDebitNotes = related.R.ReferenceInvoiceDebitNotes[:ln-1]
		break
	}
	return nil
}

// DebitNotes retrieves all the records using an executor.
func DebitNotes(mods ...qm.QueryMod) debitNoteQuery {
	mods = append(mods, qm.From("\"invoice\".\"debit_note\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice\".\"debit_note\".*"})
	}

	return debitNoteQuery{q}
}

// FindDebitNote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDebitNote(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DebitNote, error) {
	debitNoteObj := &DebitNote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice\".\"debit_note\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, debitNoteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: unable to select from debit_note")
	}

	if err = debitNoteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return debitNoteObj, err
	}

	return debitNoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DebitNote) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("invoice: no debit_note provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(debitNoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	debitNoteInsertCacheMut.RLock()
	cache, cached := debitNoteInsertCache[key]
	debitNoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			debitNoteAllColumns,
			debitNoteColumnsWithDefault,
			debitNoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(debitNoteType, debitNoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(debitNoteType, debitNoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice\".\"debit_note\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice\".\"debit_note\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "invoice: unable to insert into debit_note")
	}

	if !cached {
		debitNoteInsertCacheMut.Lock()
		debitNoteInsertCache[key] = cache
		debitNoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DebitNote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DebitNote) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	debitNoteUpdateCacheMut.RLock()
	cache, cached := debitNoteUpdateCache[key]
	debitNoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			debitNoteAllColumns,
			debitNotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("invoice: unable to update debit_note, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice\".\"debit_note\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, debitNotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(debitNoteType, debitNoteMapping, append(wl, debitNotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update debit_note row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by update for debit_note")
	}

	if !cached {
		debitNoteUpdateCacheMut.Lock()
		debitNoteUpdateCache[key] = cache
		debitNoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q debitNoteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all for debit_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected for debit_note")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DebitNoteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("invoice: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), debitNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice\".\"debit_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, debitNotePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all in debitNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected all in update all debitNote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DebitNote) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("invoice: no debit_note provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(debitNoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	debitNoteUpsertCacheMut.RLock()
	cache, cached := debitNoteUpsertCache[key]
	debitNoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			debitNoteAllColumns,
			debitNoteColumnsWithDefault,
			debitNoteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			debitNoteAllColumns,
			debitNotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("invoice: unable to upsert debit_note, could not build update column list")
		}

		ret := strmangle.SetComplement(debitNoteAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(debitNotePrimaryKeyColumns) == 0 {
				return errors.New("invoice: unable to upsert debit_note, could not build conflict column list")
			}

			conflict = make([]string, len(debitNotePrimaryKeyColumns))
			copy(conflict, debitNotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice\".\"debit_note\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(debitNoteType, debitNoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(debitNoteType, debitNoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "invoice: unable to upsert debit_note")
	}

	if !cached {
		debitNoteUpsertCacheMut.Lock()
		debitNoteUpsertCache[key] = cache
		debitNoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DebitNote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DebitNote) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("invoice: no DebitNote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), debitNotePrimaryKeyMapping)
	sql := "DELETE FROM \"invoice\".\"debit_note\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete from debit_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by delete for debit_note")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q debitNoteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("invoice: no debitNoteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from debit_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for debit_note")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DebitNoteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(debitNoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), debitNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice\".\"debit_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, debitNotePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from debitNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for debit_note")
	}

	if len(debitNoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DebitNote) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDebitNote(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DebitNoteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DebitNoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), debitNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice\".\"debit_note\".* FROM \"invoice\".\"debit_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, debitNotePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "invoice: unable to reload all in DebitNoteSlice")
	}

	*o = slice

	return nil
}

// DebitNoteExists checks if the DebitNote row exists.
func DebitNoteExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice\".\"debit_note\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "invoice: unable to check if debit_note exists")
	}

	return exists, nil
}

// Exists checks if the DebitNote row exists.
func (o *DebitNote) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DebitNoteExists(ctx, exec, o.ID)
}
