// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package invoice

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CreditNote is an object representing the database table.
type CreditNote struct {
	ID                 int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentID     int         `boil:"base_document_id" json:"base_document_id" toml:"base_document_id" yaml:"base_document_id"`
	CreditNoteNumber   string      `boil:"credit_note_number" json:"credit_note_number" toml:"credit_note_number" yaml:"credit_note_number"`
	ReferenceInvoiceID null.Int    `boil:"reference_invoice_id" json:"reference_invoice_id,omitempty" toml:"reference_invoice_id" yaml:"reference_invoice_id,omitempty"`
	ReasonForIssuance  null.String `boil:"reason_for_issuance" json:"reason_for_issuance,omitempty" toml:"reason_for_issuance" yaml:"reason_for_issuance,omitempty"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *creditNoteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L creditNoteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CreditNoteColumns = struct {
	ID                 string
	BaseDocumentID     string
	CreditNoteNumber   string
	ReferenceInvoiceID string
	ReasonForIssuance  string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	BaseDocumentID:     "base_document_id",
	CreditNoteNumber:   "credit_note_number",
	ReferenceInvoiceID: "reference_invoice_id",
	ReasonForIssuance:  "reason_for_issuance",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var CreditNoteTableColumns = struct {
	ID                 string
	BaseDocumentID     string
	CreditNoteNumber   string
	ReferenceInvoiceID string
	ReasonForIssuance  string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "credit_note.id",
	BaseDocumentID:     "credit_note.base_document_id",
	CreditNoteNumber:   "credit_note.credit_note_number",
	ReferenceInvoiceID: "credit_note.reference_invoice_id",
	ReasonForIssuance:  "credit_note.reason_for_issuance",
	CreatedAt:          "credit_note.created_at",
	UpdatedAt:          "credit_note.updated_at",
	DeletedAt:          "credit_note.deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CreditNoteWhere = struct {
	ID                 whereHelperint
	BaseDocumentID     whereHelperint
	CreditNoteNumber   whereHelperstring
	ReferenceInvoiceID whereHelpernull_Int
	ReasonForIssuance  whereHelpernull_String
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: "\"invoice\".\"credit_note\".\"id\""},
	BaseDocumentID:     whereHelperint{field: "\"invoice\".\"credit_note\".\"base_document_id\""},
	CreditNoteNumber:   whereHelperstring{field: "\"invoice\".\"credit_note\".\"credit_note_number\""},
	ReferenceInvoiceID: whereHelpernull_Int{field: "\"invoice\".\"credit_note\".\"reference_invoice_id\""},
	ReasonForIssuance:  whereHelpernull_String{field: "\"invoice\".\"credit_note\".\"reason_for_issuance\""},
	CreatedAt:          whereHelpertime_Time{field: "\"invoice\".\"credit_note\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"invoice\".\"credit_note\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"invoice\".\"credit_note\".\"deleted_at\""},
}

// CreditNoteRels is where relationship names are stored.
var CreditNoteRels = struct {
	ReferenceInvoice string
}{
	ReferenceInvoice: "ReferenceInvoice",
}

// creditNoteR is where relationships are stored.
type creditNoteR struct {
	ReferenceInvoice *Invoice `boil:"ReferenceInvoice" json:"ReferenceInvoice" toml:"ReferenceInvoice" yaml:"ReferenceInvoice"`
}

// NewStruct creates a new relationship struct
func (*creditNoteR) NewStruct() *creditNoteR {
	return &creditNoteR{}
}

func (r *creditNoteR) GetReferenceInvoice() *Invoice {
	if r == nil {
		return nil
	}
	return r.ReferenceInvoice
}

// creditNoteL is where Load methods for each relationship are stored.
type creditNoteL struct{}

var (
	creditNoteAllColumns            = []string{"id", "base_document_id", "credit_note_number", "reference_invoice_id", "reason_for_issuance", "created_at", "updated_at", "deleted_at"}
	creditNoteColumnsWithoutDefault = []string{"id", "base_document_id", "credit_note_number", "created_at", "updated_at"}
	creditNoteColumnsWithDefault    = []string{"reference_invoice_id", "reason_for_issuance", "deleted_at"}
	creditNotePrimaryKeyColumns     = []string{"id"}
	creditNoteGeneratedColumns      = []string{}
)

type (
	// CreditNoteSlice is an alias for a slice of pointers to CreditNote.
	// This should almost always be used instead of []CreditNote.
	CreditNoteSlice []*CreditNote
	// CreditNoteHook is the signature for custom CreditNote hook methods
	CreditNoteHook func(context.Context, boil.ContextExecutor, *CreditNote) error

	creditNoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	creditNoteType                 = reflect.TypeOf(&CreditNote{})
	creditNoteMapping              = queries.MakeStructMapping(creditNoteType)
	creditNotePrimaryKeyMapping, _ = queries.BindMapping(creditNoteType, creditNoteMapping, creditNotePrimaryKeyColumns)
	creditNoteInsertCacheMut       sync.RWMutex
	creditNoteInsertCache          = make(map[string]insertCache)
	creditNoteUpdateCacheMut       sync.RWMutex
	creditNoteUpdateCache          = make(map[string]updateCache)
	creditNoteUpsertCacheMut       sync.RWMutex
	creditNoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var creditNoteAfterSelectMu sync.Mutex
var creditNoteAfterSelectHooks []CreditNoteHook

var creditNoteBeforeInsertMu sync.Mutex
var creditNoteBeforeInsertHooks []CreditNoteHook
var creditNoteAfterInsertMu sync.Mutex
var creditNoteAfterInsertHooks []CreditNoteHook

var creditNoteBeforeUpdateMu sync.Mutex
var creditNoteBeforeUpdateHooks []CreditNoteHook
var creditNoteAfterUpdateMu sync.Mutex
var creditNoteAfterUpdateHooks []CreditNoteHook

var creditNoteBeforeDeleteMu sync.Mutex
var creditNoteBeforeDeleteHooks []CreditNoteHook
var creditNoteAfterDeleteMu sync.Mutex
var creditNoteAfterDeleteHooks []CreditNoteHook

var creditNoteBeforeUpsertMu sync.Mutex
var creditNoteBeforeUpsertHooks []CreditNoteHook
var creditNoteAfterUpsertMu sync.Mutex
var creditNoteAfterUpsertHooks []CreditNoteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CreditNote) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CreditNote) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CreditNote) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CreditNote) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CreditNote) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CreditNote) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CreditNote) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CreditNote) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CreditNote) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditNoteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCreditNoteHook registers your hook function for all future operations.
func AddCreditNoteHook(hookPoint boil.HookPoint, creditNoteHook CreditNoteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		creditNoteAfterSelectMu.Lock()
		creditNoteAfterSelectHooks = append(creditNoteAfterSelectHooks, creditNoteHook)
		creditNoteAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		creditNoteBeforeInsertMu.Lock()
		creditNoteBeforeInsertHooks = append(creditNoteBeforeInsertHooks, creditNoteHook)
		creditNoteBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		creditNoteAfterInsertMu.Lock()
		creditNoteAfterInsertHooks = append(creditNoteAfterInsertHooks, creditNoteHook)
		creditNoteAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		creditNoteBeforeUpdateMu.Lock()
		creditNoteBeforeUpdateHooks = append(creditNoteBeforeUpdateHooks, creditNoteHook)
		creditNoteBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		creditNoteAfterUpdateMu.Lock()
		creditNoteAfterUpdateHooks = append(creditNoteAfterUpdateHooks, creditNoteHook)
		creditNoteAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		creditNoteBeforeDeleteMu.Lock()
		creditNoteBeforeDeleteHooks = append(creditNoteBeforeDeleteHooks, creditNoteHook)
		creditNoteBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		creditNoteAfterDeleteMu.Lock()
		creditNoteAfterDeleteHooks = append(creditNoteAfterDeleteHooks, creditNoteHook)
		creditNoteAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		creditNoteBeforeUpsertMu.Lock()
		creditNoteBeforeUpsertHooks = append(creditNoteBeforeUpsertHooks, creditNoteHook)
		creditNoteBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		creditNoteAfterUpsertMu.Lock()
		creditNoteAfterUpsertHooks = append(creditNoteAfterUpsertHooks, creditNoteHook)
		creditNoteAfterUpsertMu.Unlock()
	}
}

// One returns a single creditNote record from the query.
func (q creditNoteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CreditNote, error) {
	o := &CreditNote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: failed to execute a one query for credit_note")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CreditNote records from the query.
func (q creditNoteQuery) All(ctx context.Context, exec boil.ContextExecutor) (CreditNoteSlice, error) {
	var o []*CreditNote

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "invoice: failed to assign all query results to CreditNote slice")
	}

	if len(creditNoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CreditNote records in the query.
func (q creditNoteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to count credit_note rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q creditNoteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "invoice: failed to check if credit_note exists")
	}

	return count > 0, nil
}

// ReferenceInvoice pointed to by the foreign key.
func (o *CreditNote) ReferenceInvoice(mods ...qm.QueryMod) invoiceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ReferenceInvoiceID),
	}

	queryMods = append(queryMods, mods...)

	return Invoices(queryMods...)
}

// LoadReferenceInvoice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (creditNoteL) LoadReferenceInvoice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCreditNote interface{}, mods queries.Applicator) error {
	var slice []*CreditNote
	var object *CreditNote

	if singular {
		var ok bool
		object, ok = maybeCreditNote.(*CreditNote)
		if !ok {
			object = new(CreditNote)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCreditNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCreditNote))
			}
		}
	} else {
		s, ok := maybeCreditNote.(*[]*CreditNote)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCreditNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCreditNote))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &creditNoteR{}
		}
		if !queries.IsNil(object.ReferenceInvoiceID) {
			args[object.ReferenceInvoiceID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &creditNoteR{}
			}

			if !queries.IsNil(obj.ReferenceInvoiceID) {
				args[obj.ReferenceInvoiceID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.invoice`),
		qm.WhereIn(`invoice.invoice.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Invoice")
	}

	var resultSlice []*Invoice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Invoice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for invoice")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReferenceInvoice = foreign
		if foreign.R == nil {
			foreign.R = &invoiceR{}
		}
		foreign.R.ReferenceInvoiceCreditNotes = append(foreign.R.ReferenceInvoiceCreditNotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ReferenceInvoiceID, foreign.ID) {
				local.R.ReferenceInvoice = foreign
				if foreign.R == nil {
					foreign.R = &invoiceR{}
				}
				foreign.R.ReferenceInvoiceCreditNotes = append(foreign.R.ReferenceInvoiceCreditNotes, local)
				break
			}
		}
	}

	return nil
}

// SetReferenceInvoice of the creditNote to the related item.
// Sets o.R.ReferenceInvoice to related.
// Adds o to related.R.ReferenceInvoiceCreditNotes.
func (o *CreditNote) SetReferenceInvoice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Invoice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice\".\"credit_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"reference_invoice_id"}),
		strmangle.WhereClause("\"", "\"", 2, creditNotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ReferenceInvoiceID, related.ID)
	if o.R == nil {
		o.R = &creditNoteR{
			ReferenceInvoice: related,
		}
	} else {
		o.R.ReferenceInvoice = related
	}

	if related.R == nil {
		related.R = &invoiceR{
			ReferenceInvoiceCreditNotes: CreditNoteSlice{o},
		}
	} else {
		related.R.ReferenceInvoiceCreditNotes = append(related.R.ReferenceInvoiceCreditNotes, o)
	}

	return nil
}

// RemoveReferenceInvoice relationship.
// Sets o.R.ReferenceInvoice to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CreditNote) RemoveReferenceInvoice(ctx context.Context, exec boil.ContextExecutor, related *Invoice) error {
	var err error

	queries.SetScanner(&o.ReferenceInvoiceID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("reference_invoice_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ReferenceInvoice = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ReferenceInvoiceCreditNotes {
		if queries.Equal(o.ReferenceInvoiceID, ri.ReferenceInvoiceID) {
			continue
		}

		ln := len(related.R.ReferenceInvoiceCreditNotes)
		if ln > 1 && i < ln-1 {
			related.R.ReferenceInvoiceCreditNotes[i] = related.R.ReferenceInvoiceCreditNotes[ln-1]
		}
		related.R.ReferenceInvoiceCreditNotes = related.R.ReferenceInvoiceCreditNotes[:ln-1]
		break
	}
	return nil
}

// CreditNotes retrieves all the records using an executor.
func CreditNotes(mods ...qm.QueryMod) creditNoteQuery {
	mods = append(mods, qm.From("\"invoice\".\"credit_note\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice\".\"credit_note\".*"})
	}

	return creditNoteQuery{q}
}

// FindCreditNote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCreditNote(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CreditNote, error) {
	creditNoteObj := &CreditNote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice\".\"credit_note\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, creditNoteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: unable to select from credit_note")
	}

	if err = creditNoteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return creditNoteObj, err
	}

	return creditNoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CreditNote) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("invoice: no credit_note provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditNoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	creditNoteInsertCacheMut.RLock()
	cache, cached := creditNoteInsertCache[key]
	creditNoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			creditNoteAllColumns,
			creditNoteColumnsWithDefault,
			creditNoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(creditNoteType, creditNoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(creditNoteType, creditNoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice\".\"credit_note\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice\".\"credit_note\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "invoice: unable to insert into credit_note")
	}

	if !cached {
		creditNoteInsertCacheMut.Lock()
		creditNoteInsertCache[key] = cache
		creditNoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CreditNote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CreditNote) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	creditNoteUpdateCacheMut.RLock()
	cache, cached := creditNoteUpdateCache[key]
	creditNoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			creditNoteAllColumns,
			creditNotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("invoice: unable to update credit_note, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice\".\"credit_note\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, creditNotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(creditNoteType, creditNoteMapping, append(wl, creditNotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update credit_note row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by update for credit_note")
	}

	if !cached {
		creditNoteUpdateCacheMut.Lock()
		creditNoteUpdateCache[key] = cache
		creditNoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q creditNoteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all for credit_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected for credit_note")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CreditNoteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("invoice: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice\".\"credit_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, creditNotePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all in creditNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected all in update all creditNote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CreditNote) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("invoice: no credit_note provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditNoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	creditNoteUpsertCacheMut.RLock()
	cache, cached := creditNoteUpsertCache[key]
	creditNoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			creditNoteAllColumns,
			creditNoteColumnsWithDefault,
			creditNoteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			creditNoteAllColumns,
			creditNotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("invoice: unable to upsert credit_note, could not build update column list")
		}

		ret := strmangle.SetComplement(creditNoteAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(creditNotePrimaryKeyColumns) == 0 {
				return errors.New("invoice: unable to upsert credit_note, could not build conflict column list")
			}

			conflict = make([]string, len(creditNotePrimaryKeyColumns))
			copy(conflict, creditNotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice\".\"credit_note\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(creditNoteType, creditNoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(creditNoteType, creditNoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "invoice: unable to upsert credit_note")
	}

	if !cached {
		creditNoteUpsertCacheMut.Lock()
		creditNoteUpsertCache[key] = cache
		creditNoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CreditNote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CreditNote) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("invoice: no CreditNote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), creditNotePrimaryKeyMapping)
	sql := "DELETE FROM \"invoice\".\"credit_note\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete from credit_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by delete for credit_note")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q creditNoteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("invoice: no creditNoteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from credit_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for credit_note")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CreditNoteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(creditNoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice\".\"credit_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, creditNotePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from creditNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for credit_note")
	}

	if len(creditNoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CreditNote) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCreditNote(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CreditNoteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CreditNoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice\".\"credit_note\".* FROM \"invoice\".\"credit_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, creditNotePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "invoice: unable to reload all in CreditNoteSlice")
	}

	*o = slice

	return nil
}

// CreditNoteExists checks if the CreditNote row exists.
func CreditNoteExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice\".\"credit_note\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "invoice: unable to check if credit_note exists")
	}

	return exists, nil
}

// Exists checks if the CreditNote row exists.
func (o *CreditNote) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CreditNoteExists(ctx, exec, o.ID)
}
