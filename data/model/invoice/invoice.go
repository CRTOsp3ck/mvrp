// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package invoice

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Invoice is an object representing the database table.
type Invoice struct {
	ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentID int       `boil:"base_document_id" json:"base_document_id" toml:"base_document_id" yaml:"base_document_id"`
	InvoiceNumber  string    `boil:"invoice_number" json:"invoice_number" toml:"invoice_number" yaml:"invoice_number"`
	VendorID       null.Int  `boil:"vendor_id" json:"vendor_id,omitempty" toml:"vendor_id" yaml:"vendor_id,omitempty"`
	CustomerID     null.Int  `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	PaymentDueDate null.Time `boil:"payment_due_date" json:"payment_due_date,omitempty" toml:"payment_due_date" yaml:"payment_due_date,omitempty"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *invoiceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L invoiceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InvoiceColumns = struct {
	ID             string
	BaseDocumentID string
	InvoiceNumber  string
	VendorID       string
	CustomerID     string
	PaymentDueDate string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	BaseDocumentID: "base_document_id",
	InvoiceNumber:  "invoice_number",
	VendorID:       "vendor_id",
	CustomerID:     "customer_id",
	PaymentDueDate: "payment_due_date",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var InvoiceTableColumns = struct {
	ID             string
	BaseDocumentID string
	InvoiceNumber  string
	VendorID       string
	CustomerID     string
	PaymentDueDate string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "invoice.id",
	BaseDocumentID: "invoice.base_document_id",
	InvoiceNumber:  "invoice.invoice_number",
	VendorID:       "invoice.vendor_id",
	CustomerID:     "invoice.customer_id",
	PaymentDueDate: "invoice.payment_due_date",
	CreatedAt:      "invoice.created_at",
	UpdatedAt:      "invoice.updated_at",
	DeletedAt:      "invoice.deleted_at",
}

// Generated where

var InvoiceWhere = struct {
	ID             whereHelperint
	BaseDocumentID whereHelperint
	InvoiceNumber  whereHelperstring
	VendorID       whereHelpernull_Int
	CustomerID     whereHelpernull_Int
	PaymentDueDate whereHelpernull_Time
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	ID:             whereHelperint{field: "\"invoice\".\"invoice\".\"id\""},
	BaseDocumentID: whereHelperint{field: "\"invoice\".\"invoice\".\"base_document_id\""},
	InvoiceNumber:  whereHelperstring{field: "\"invoice\".\"invoice\".\"invoice_number\""},
	VendorID:       whereHelpernull_Int{field: "\"invoice\".\"invoice\".\"vendor_id\""},
	CustomerID:     whereHelpernull_Int{field: "\"invoice\".\"invoice\".\"customer_id\""},
	PaymentDueDate: whereHelpernull_Time{field: "\"invoice\".\"invoice\".\"payment_due_date\""},
	CreatedAt:      whereHelpertime_Time{field: "\"invoice\".\"invoice\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"invoice\".\"invoice\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"invoice\".\"invoice\".\"deleted_at\""},
}

// InvoiceRels is where relationship names are stored.
var InvoiceRels = struct {
	ReferenceInvoiceCreditNotes string
	ReferenceInvoiceDebitNotes  string
	InvoiceItems                string
	PaymentReceipts             string
}{
	ReferenceInvoiceCreditNotes: "ReferenceInvoiceCreditNotes",
	ReferenceInvoiceDebitNotes:  "ReferenceInvoiceDebitNotes",
	InvoiceItems:                "InvoiceItems",
	PaymentReceipts:             "PaymentReceipts",
}

// invoiceR is where relationships are stored.
type invoiceR struct {
	ReferenceInvoiceCreditNotes CreditNoteSlice     `boil:"ReferenceInvoiceCreditNotes" json:"ReferenceInvoiceCreditNotes" toml:"ReferenceInvoiceCreditNotes" yaml:"ReferenceInvoiceCreditNotes"`
	ReferenceInvoiceDebitNotes  DebitNoteSlice      `boil:"ReferenceInvoiceDebitNotes" json:"ReferenceInvoiceDebitNotes" toml:"ReferenceInvoiceDebitNotes" yaml:"ReferenceInvoiceDebitNotes"`
	InvoiceItems                InvoiceItemSlice    `boil:"InvoiceItems" json:"InvoiceItems" toml:"InvoiceItems" yaml:"InvoiceItems"`
	PaymentReceipts             PaymentReceiptSlice `boil:"PaymentReceipts" json:"PaymentReceipts" toml:"PaymentReceipts" yaml:"PaymentReceipts"`
}

// NewStruct creates a new relationship struct
func (*invoiceR) NewStruct() *invoiceR {
	return &invoiceR{}
}

func (r *invoiceR) GetReferenceInvoiceCreditNotes() CreditNoteSlice {
	if r == nil {
		return nil
	}
	return r.ReferenceInvoiceCreditNotes
}

func (r *invoiceR) GetReferenceInvoiceDebitNotes() DebitNoteSlice {
	if r == nil {
		return nil
	}
	return r.ReferenceInvoiceDebitNotes
}

func (r *invoiceR) GetInvoiceItems() InvoiceItemSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceItems
}

func (r *invoiceR) GetPaymentReceipts() PaymentReceiptSlice {
	if r == nil {
		return nil
	}
	return r.PaymentReceipts
}

// invoiceL is where Load methods for each relationship are stored.
type invoiceL struct{}

var (
	invoiceAllColumns            = []string{"id", "base_document_id", "invoice_number", "vendor_id", "customer_id", "payment_due_date", "created_at", "updated_at", "deleted_at"}
	invoiceColumnsWithoutDefault = []string{"id", "base_document_id", "invoice_number", "created_at", "updated_at"}
	invoiceColumnsWithDefault    = []string{"vendor_id", "customer_id", "payment_due_date", "deleted_at"}
	invoicePrimaryKeyColumns     = []string{"id"}
	invoiceGeneratedColumns      = []string{}
)

type (
	// InvoiceSlice is an alias for a slice of pointers to Invoice.
	// This should almost always be used instead of []Invoice.
	InvoiceSlice []*Invoice
	// InvoiceHook is the signature for custom Invoice hook methods
	InvoiceHook func(context.Context, boil.ContextExecutor, *Invoice) error

	invoiceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	invoiceType                 = reflect.TypeOf(&Invoice{})
	invoiceMapping              = queries.MakeStructMapping(invoiceType)
	invoicePrimaryKeyMapping, _ = queries.BindMapping(invoiceType, invoiceMapping, invoicePrimaryKeyColumns)
	invoiceInsertCacheMut       sync.RWMutex
	invoiceInsertCache          = make(map[string]insertCache)
	invoiceUpdateCacheMut       sync.RWMutex
	invoiceUpdateCache          = make(map[string]updateCache)
	invoiceUpsertCacheMut       sync.RWMutex
	invoiceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var invoiceAfterSelectMu sync.Mutex
var invoiceAfterSelectHooks []InvoiceHook

var invoiceBeforeInsertMu sync.Mutex
var invoiceBeforeInsertHooks []InvoiceHook
var invoiceAfterInsertMu sync.Mutex
var invoiceAfterInsertHooks []InvoiceHook

var invoiceBeforeUpdateMu sync.Mutex
var invoiceBeforeUpdateHooks []InvoiceHook
var invoiceAfterUpdateMu sync.Mutex
var invoiceAfterUpdateHooks []InvoiceHook

var invoiceBeforeDeleteMu sync.Mutex
var invoiceBeforeDeleteHooks []InvoiceHook
var invoiceAfterDeleteMu sync.Mutex
var invoiceAfterDeleteHooks []InvoiceHook

var invoiceBeforeUpsertMu sync.Mutex
var invoiceBeforeUpsertHooks []InvoiceHook
var invoiceAfterUpsertMu sync.Mutex
var invoiceAfterUpsertHooks []InvoiceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Invoice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Invoice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Invoice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Invoice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Invoice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Invoice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Invoice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Invoice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Invoice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInvoiceHook registers your hook function for all future operations.
func AddInvoiceHook(hookPoint boil.HookPoint, invoiceHook InvoiceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		invoiceAfterSelectMu.Lock()
		invoiceAfterSelectHooks = append(invoiceAfterSelectHooks, invoiceHook)
		invoiceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		invoiceBeforeInsertMu.Lock()
		invoiceBeforeInsertHooks = append(invoiceBeforeInsertHooks, invoiceHook)
		invoiceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		invoiceAfterInsertMu.Lock()
		invoiceAfterInsertHooks = append(invoiceAfterInsertHooks, invoiceHook)
		invoiceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		invoiceBeforeUpdateMu.Lock()
		invoiceBeforeUpdateHooks = append(invoiceBeforeUpdateHooks, invoiceHook)
		invoiceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		invoiceAfterUpdateMu.Lock()
		invoiceAfterUpdateHooks = append(invoiceAfterUpdateHooks, invoiceHook)
		invoiceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		invoiceBeforeDeleteMu.Lock()
		invoiceBeforeDeleteHooks = append(invoiceBeforeDeleteHooks, invoiceHook)
		invoiceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		invoiceAfterDeleteMu.Lock()
		invoiceAfterDeleteHooks = append(invoiceAfterDeleteHooks, invoiceHook)
		invoiceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		invoiceBeforeUpsertMu.Lock()
		invoiceBeforeUpsertHooks = append(invoiceBeforeUpsertHooks, invoiceHook)
		invoiceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		invoiceAfterUpsertMu.Lock()
		invoiceAfterUpsertHooks = append(invoiceAfterUpsertHooks, invoiceHook)
		invoiceAfterUpsertMu.Unlock()
	}
}

// One returns a single invoice record from the query.
func (q invoiceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Invoice, error) {
	o := &Invoice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: failed to execute a one query for invoice")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Invoice records from the query.
func (q invoiceQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvoiceSlice, error) {
	var o []*Invoice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "invoice: failed to assign all query results to Invoice slice")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Invoice records in the query.
func (q invoiceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to count invoice rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q invoiceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "invoice: failed to check if invoice exists")
	}

	return count > 0, nil
}

// ReferenceInvoiceCreditNotes retrieves all the credit_note's CreditNotes with an executor via reference_invoice_id column.
func (o *Invoice) ReferenceInvoiceCreditNotes(mods ...qm.QueryMod) creditNoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoice\".\"credit_note\".\"reference_invoice_id\"=?", o.ID),
	)

	return CreditNotes(queryMods...)
}

// ReferenceInvoiceDebitNotes retrieves all the debit_note's DebitNotes with an executor via reference_invoice_id column.
func (o *Invoice) ReferenceInvoiceDebitNotes(mods ...qm.QueryMod) debitNoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoice\".\"debit_note\".\"reference_invoice_id\"=?", o.ID),
	)

	return DebitNotes(queryMods...)
}

// InvoiceItems retrieves all the invoice_item's InvoiceItems with an executor.
func (o *Invoice) InvoiceItems(mods ...qm.QueryMod) invoiceItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoice\".\"invoice_item\".\"invoice_id\"=?", o.ID),
	)

	return InvoiceItems(queryMods...)
}

// PaymentReceipts retrieves all the payment_receipt's PaymentReceipts with an executor.
func (o *Invoice) PaymentReceipts(mods ...qm.QueryMod) paymentReceiptQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoice\".\"payment_receipt\".\"invoice_id\"=?", o.ID),
	)

	return PaymentReceipts(queryMods...)
}

// LoadReferenceInvoiceCreditNotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (invoiceL) LoadReferenceInvoiceCreditNotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoice interface{}, mods queries.Applicator) error {
	var slice []*Invoice
	var object *Invoice

	if singular {
		var ok bool
		object, ok = maybeInvoice.(*Invoice)
		if !ok {
			object = new(Invoice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoice))
			}
		}
	} else {
		s, ok := maybeInvoice.(*[]*Invoice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.credit_note`),
		qm.WhereIn(`invoice.credit_note.reference_invoice_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load credit_note")
	}

	var resultSlice []*CreditNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice credit_note")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on credit_note")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for credit_note")
	}

	if len(creditNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReferenceInvoiceCreditNotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &creditNoteR{}
			}
			foreign.R.ReferenceInvoice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ReferenceInvoiceID) {
				local.R.ReferenceInvoiceCreditNotes = append(local.R.ReferenceInvoiceCreditNotes, foreign)
				if foreign.R == nil {
					foreign.R = &creditNoteR{}
				}
				foreign.R.ReferenceInvoice = local
				break
			}
		}
	}

	return nil
}

// LoadReferenceInvoiceDebitNotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (invoiceL) LoadReferenceInvoiceDebitNotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoice interface{}, mods queries.Applicator) error {
	var slice []*Invoice
	var object *Invoice

	if singular {
		var ok bool
		object, ok = maybeInvoice.(*Invoice)
		if !ok {
			object = new(Invoice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoice))
			}
		}
	} else {
		s, ok := maybeInvoice.(*[]*Invoice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.debit_note`),
		qm.WhereIn(`invoice.debit_note.reference_invoice_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load debit_note")
	}

	var resultSlice []*DebitNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice debit_note")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on debit_note")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for debit_note")
	}

	if len(debitNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReferenceInvoiceDebitNotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &debitNoteR{}
			}
			foreign.R.ReferenceInvoice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ReferenceInvoiceID) {
				local.R.ReferenceInvoiceDebitNotes = append(local.R.ReferenceInvoiceDebitNotes, foreign)
				if foreign.R == nil {
					foreign.R = &debitNoteR{}
				}
				foreign.R.ReferenceInvoice = local
				break
			}
		}
	}

	return nil
}

// LoadInvoiceItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (invoiceL) LoadInvoiceItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoice interface{}, mods queries.Applicator) error {
	var slice []*Invoice
	var object *Invoice

	if singular {
		var ok bool
		object, ok = maybeInvoice.(*Invoice)
		if !ok {
			object = new(Invoice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoice))
			}
		}
	} else {
		s, ok := maybeInvoice.(*[]*Invoice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.invoice_item`),
		qm.WhereIn(`invoice.invoice_item.invoice_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load invoice_item")
	}

	var resultSlice []*InvoiceItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice invoice_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on invoice_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice_item")
	}

	if len(invoiceItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InvoiceItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &invoiceItemR{}
			}
			foreign.R.Invoice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.InvoiceID {
				local.R.InvoiceItems = append(local.R.InvoiceItems, foreign)
				if foreign.R == nil {
					foreign.R = &invoiceItemR{}
				}
				foreign.R.Invoice = local
				break
			}
		}
	}

	return nil
}

// LoadPaymentReceipts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (invoiceL) LoadPaymentReceipts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoice interface{}, mods queries.Applicator) error {
	var slice []*Invoice
	var object *Invoice

	if singular {
		var ok bool
		object, ok = maybeInvoice.(*Invoice)
		if !ok {
			object = new(Invoice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoice))
			}
		}
	} else {
		s, ok := maybeInvoice.(*[]*Invoice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.payment_receipt`),
		qm.WhereIn(`invoice.payment_receipt.invoice_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payment_receipt")
	}

	var resultSlice []*PaymentReceipt
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payment_receipt")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payment_receipt")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payment_receipt")
	}

	if len(paymentReceiptAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PaymentReceipts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentReceiptR{}
			}
			foreign.R.Invoice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.InvoiceID {
				local.R.PaymentReceipts = append(local.R.PaymentReceipts, foreign)
				if foreign.R == nil {
					foreign.R = &paymentReceiptR{}
				}
				foreign.R.Invoice = local
				break
			}
		}
	}

	return nil
}

// AddReferenceInvoiceCreditNotes adds the given related objects to the existing relationships
// of the invoice, optionally inserting them as new records.
// Appends related to o.R.ReferenceInvoiceCreditNotes.
// Sets related.R.ReferenceInvoice appropriately.
func (o *Invoice) AddReferenceInvoiceCreditNotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CreditNote) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ReferenceInvoiceID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoice\".\"credit_note\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"reference_invoice_id"}),
				strmangle.WhereClause("\"", "\"", 2, creditNotePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ReferenceInvoiceID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &invoiceR{
			ReferenceInvoiceCreditNotes: related,
		}
	} else {
		o.R.ReferenceInvoiceCreditNotes = append(o.R.ReferenceInvoiceCreditNotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &creditNoteR{
				ReferenceInvoice: o,
			}
		} else {
			rel.R.ReferenceInvoice = o
		}
	}
	return nil
}

// SetReferenceInvoiceCreditNotes removes all previously related items of the
// invoice replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ReferenceInvoice's ReferenceInvoiceCreditNotes accordingly.
// Replaces o.R.ReferenceInvoiceCreditNotes with related.
// Sets related.R.ReferenceInvoice's ReferenceInvoiceCreditNotes accordingly.
func (o *Invoice) SetReferenceInvoiceCreditNotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CreditNote) error {
	query := "update \"invoice\".\"credit_note\" set \"reference_invoice_id\" = null where \"reference_invoice_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ReferenceInvoiceCreditNotes {
			queries.SetScanner(&rel.ReferenceInvoiceID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ReferenceInvoice = nil
		}
		o.R.ReferenceInvoiceCreditNotes = nil
	}

	return o.AddReferenceInvoiceCreditNotes(ctx, exec, insert, related...)
}

// RemoveReferenceInvoiceCreditNotes relationships from objects passed in.
// Removes related items from R.ReferenceInvoiceCreditNotes (uses pointer comparison, removal does not keep order)
// Sets related.R.ReferenceInvoice.
func (o *Invoice) RemoveReferenceInvoiceCreditNotes(ctx context.Context, exec boil.ContextExecutor, related ...*CreditNote) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ReferenceInvoiceID, nil)
		if rel.R != nil {
			rel.R.ReferenceInvoice = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("reference_invoice_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ReferenceInvoiceCreditNotes {
			if rel != ri {
				continue
			}

			ln := len(o.R.ReferenceInvoiceCreditNotes)
			if ln > 1 && i < ln-1 {
				o.R.ReferenceInvoiceCreditNotes[i] = o.R.ReferenceInvoiceCreditNotes[ln-1]
			}
			o.R.ReferenceInvoiceCreditNotes = o.R.ReferenceInvoiceCreditNotes[:ln-1]
			break
		}
	}

	return nil
}

// AddReferenceInvoiceDebitNotes adds the given related objects to the existing relationships
// of the invoice, optionally inserting them as new records.
// Appends related to o.R.ReferenceInvoiceDebitNotes.
// Sets related.R.ReferenceInvoice appropriately.
func (o *Invoice) AddReferenceInvoiceDebitNotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DebitNote) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ReferenceInvoiceID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoice\".\"debit_note\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"reference_invoice_id"}),
				strmangle.WhereClause("\"", "\"", 2, debitNotePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ReferenceInvoiceID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &invoiceR{
			ReferenceInvoiceDebitNotes: related,
		}
	} else {
		o.R.ReferenceInvoiceDebitNotes = append(o.R.ReferenceInvoiceDebitNotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &debitNoteR{
				ReferenceInvoice: o,
			}
		} else {
			rel.R.ReferenceInvoice = o
		}
	}
	return nil
}

// SetReferenceInvoiceDebitNotes removes all previously related items of the
// invoice replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ReferenceInvoice's ReferenceInvoiceDebitNotes accordingly.
// Replaces o.R.ReferenceInvoiceDebitNotes with related.
// Sets related.R.ReferenceInvoice's ReferenceInvoiceDebitNotes accordingly.
func (o *Invoice) SetReferenceInvoiceDebitNotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DebitNote) error {
	query := "update \"invoice\".\"debit_note\" set \"reference_invoice_id\" = null where \"reference_invoice_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ReferenceInvoiceDebitNotes {
			queries.SetScanner(&rel.ReferenceInvoiceID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ReferenceInvoice = nil
		}
		o.R.ReferenceInvoiceDebitNotes = nil
	}

	return o.AddReferenceInvoiceDebitNotes(ctx, exec, insert, related...)
}

// RemoveReferenceInvoiceDebitNotes relationships from objects passed in.
// Removes related items from R.ReferenceInvoiceDebitNotes (uses pointer comparison, removal does not keep order)
// Sets related.R.ReferenceInvoice.
func (o *Invoice) RemoveReferenceInvoiceDebitNotes(ctx context.Context, exec boil.ContextExecutor, related ...*DebitNote) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ReferenceInvoiceID, nil)
		if rel.R != nil {
			rel.R.ReferenceInvoice = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("reference_invoice_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ReferenceInvoiceDebitNotes {
			if rel != ri {
				continue
			}

			ln := len(o.R.ReferenceInvoiceDebitNotes)
			if ln > 1 && i < ln-1 {
				o.R.ReferenceInvoiceDebitNotes[i] = o.R.ReferenceInvoiceDebitNotes[ln-1]
			}
			o.R.ReferenceInvoiceDebitNotes = o.R.ReferenceInvoiceDebitNotes[:ln-1]
			break
		}
	}

	return nil
}

// AddInvoiceItems adds the given related objects to the existing relationships
// of the invoice, optionally inserting them as new records.
// Appends related to o.R.InvoiceItems.
// Sets related.R.Invoice appropriately.
func (o *Invoice) AddInvoiceItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InvoiceItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoice\".\"invoice_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"invoice_id"}),
				strmangle.WhereClause("\"", "\"", 2, invoiceItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &invoiceR{
			InvoiceItems: related,
		}
	} else {
		o.R.InvoiceItems = append(o.R.InvoiceItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &invoiceItemR{
				Invoice: o,
			}
		} else {
			rel.R.Invoice = o
		}
	}
	return nil
}

// AddPaymentReceipts adds the given related objects to the existing relationships
// of the invoice, optionally inserting them as new records.
// Appends related to o.R.PaymentReceipts.
// Sets related.R.Invoice appropriately.
func (o *Invoice) AddPaymentReceipts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PaymentReceipt) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoice\".\"payment_receipt\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"invoice_id"}),
				strmangle.WhereClause("\"", "\"", 2, paymentReceiptPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &invoiceR{
			PaymentReceipts: related,
		}
	} else {
		o.R.PaymentReceipts = append(o.R.PaymentReceipts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentReceiptR{
				Invoice: o,
			}
		} else {
			rel.R.Invoice = o
		}
	}
	return nil
}

// Invoices retrieves all the records using an executor.
func Invoices(mods ...qm.QueryMod) invoiceQuery {
	mods = append(mods, qm.From("\"invoice\".\"invoice\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice\".\"invoice\".*"})
	}

	return invoiceQuery{q}
}

// FindInvoice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvoice(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Invoice, error) {
	invoiceObj := &Invoice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice\".\"invoice\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, invoiceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: unable to select from invoice")
	}

	if err = invoiceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return invoiceObj, err
	}

	return invoiceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Invoice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("invoice: no invoice provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	invoiceInsertCacheMut.RLock()
	cache, cached := invoiceInsertCache[key]
	invoiceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			invoiceAllColumns,
			invoiceColumnsWithDefault,
			invoiceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(invoiceType, invoiceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice\".\"invoice\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice\".\"invoice\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "invoice: unable to insert into invoice")
	}

	if !cached {
		invoiceInsertCacheMut.Lock()
		invoiceInsertCache[key] = cache
		invoiceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Invoice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Invoice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	invoiceUpdateCacheMut.RLock()
	cache, cached := invoiceUpdateCache[key]
	invoiceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			invoiceAllColumns,
			invoicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("invoice: unable to update invoice, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice\".\"invoice\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, invoicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, append(wl, invoicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update invoice row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by update for invoice")
	}

	if !cached {
		invoiceUpdateCacheMut.Lock()
		invoiceUpdateCache[key] = cache
		invoiceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q invoiceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all for invoice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected for invoice")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InvoiceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("invoice: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice\".\"invoice\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, invoicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all in invoice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected all in update all invoice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Invoice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("invoice: no invoice provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	invoiceUpsertCacheMut.RLock()
	cache, cached := invoiceUpsertCache[key]
	invoiceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			invoiceAllColumns,
			invoiceColumnsWithDefault,
			invoiceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			invoiceAllColumns,
			invoicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("invoice: unable to upsert invoice, could not build update column list")
		}

		ret := strmangle.SetComplement(invoiceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(invoicePrimaryKeyColumns) == 0 {
				return errors.New("invoice: unable to upsert invoice, could not build conflict column list")
			}

			conflict = make([]string, len(invoicePrimaryKeyColumns))
			copy(conflict, invoicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice\".\"invoice\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(invoiceType, invoiceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "invoice: unable to upsert invoice")
	}

	if !cached {
		invoiceUpsertCacheMut.Lock()
		invoiceUpsertCache[key] = cache
		invoiceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Invoice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Invoice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("invoice: no Invoice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), invoicePrimaryKeyMapping)
	sql := "DELETE FROM \"invoice\".\"invoice\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete from invoice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by delete for invoice")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q invoiceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("invoice: no invoiceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from invoice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for invoice")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InvoiceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(invoiceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice\".\"invoice\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from invoice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for invoice")
	}

	if len(invoiceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Invoice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvoice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InvoiceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InvoiceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice\".\"invoice\".* FROM \"invoice\".\"invoice\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "invoice: unable to reload all in InvoiceSlice")
	}

	*o = slice

	return nil
}

// InvoiceExists checks if the Invoice row exists.
func InvoiceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice\".\"invoice\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "invoice: unable to check if invoice exists")
	}

	return exists, nil
}

// Exists checks if the Invoice row exists.
func (o *Invoice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InvoiceExists(ctx, exec, o.ID)
}
