// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package invoice

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PaymentReceipt is an object representing the database table.
type PaymentReceipt struct {
	ID                   int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	PaymentReceiptNumber string        `boil:"payment_receipt_number" json:"payment_receipt_number" toml:"payment_receipt_number" yaml:"payment_receipt_number"`
	InvoiceID            int           `boil:"invoice_id" json:"invoice_id" toml:"invoice_id" yaml:"invoice_id"`
	DateOfPayment        null.Time     `boil:"date_of_payment" json:"date_of_payment,omitempty" toml:"date_of_payment" yaml:"date_of_payment,omitempty"`
	PayerID              null.Int      `boil:"payer_id" json:"payer_id,omitempty" toml:"payer_id" yaml:"payer_id,omitempty"`
	PayeeID              null.Int      `boil:"payee_id" json:"payee_id,omitempty" toml:"payee_id" yaml:"payee_id,omitempty"`
	TotalValueGen        types.Decimal `boil:"total_value_gen" json:"total_value_gen" toml:"total_value_gen" yaml:"total_value_gen"`
	CreatedAt            time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt            null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *paymentReceiptR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentReceiptL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentReceiptColumns = struct {
	ID                   string
	PaymentReceiptNumber string
	InvoiceID            string
	DateOfPayment        string
	PayerID              string
	PayeeID              string
	TotalValueGen        string
	CreatedAt            string
	UpdatedAt            string
	DeletedAt            string
}{
	ID:                   "id",
	PaymentReceiptNumber: "payment_receipt_number",
	InvoiceID:            "invoice_id",
	DateOfPayment:        "date_of_payment",
	PayerID:              "payer_id",
	PayeeID:              "payee_id",
	TotalValueGen:        "total_value_gen",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	DeletedAt:            "deleted_at",
}

var PaymentReceiptTableColumns = struct {
	ID                   string
	PaymentReceiptNumber string
	InvoiceID            string
	DateOfPayment        string
	PayerID              string
	PayeeID              string
	TotalValueGen        string
	CreatedAt            string
	UpdatedAt            string
	DeletedAt            string
}{
	ID:                   "payment_receipt.id",
	PaymentReceiptNumber: "payment_receipt.payment_receipt_number",
	InvoiceID:            "payment_receipt.invoice_id",
	DateOfPayment:        "payment_receipt.date_of_payment",
	PayerID:              "payment_receipt.payer_id",
	PayeeID:              "payment_receipt.payee_id",
	TotalValueGen:        "payment_receipt.total_value_gen",
	CreatedAt:            "payment_receipt.created_at",
	UpdatedAt:            "payment_receipt.updated_at",
	DeletedAt:            "payment_receipt.deleted_at",
}

// Generated where

var PaymentReceiptWhere = struct {
	ID                   whereHelperint
	PaymentReceiptNumber whereHelperstring
	InvoiceID            whereHelperint
	DateOfPayment        whereHelpernull_Time
	PayerID              whereHelpernull_Int
	PayeeID              whereHelpernull_Int
	TotalValueGen        whereHelpertypes_Decimal
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	DeletedAt            whereHelpernull_Time
}{
	ID:                   whereHelperint{field: "\"invoice\".\"payment_receipt\".\"id\""},
	PaymentReceiptNumber: whereHelperstring{field: "\"invoice\".\"payment_receipt\".\"payment_receipt_number\""},
	InvoiceID:            whereHelperint{field: "\"invoice\".\"payment_receipt\".\"invoice_id\""},
	DateOfPayment:        whereHelpernull_Time{field: "\"invoice\".\"payment_receipt\".\"date_of_payment\""},
	PayerID:              whereHelpernull_Int{field: "\"invoice\".\"payment_receipt\".\"payer_id\""},
	PayeeID:              whereHelpernull_Int{field: "\"invoice\".\"payment_receipt\".\"payee_id\""},
	TotalValueGen:        whereHelpertypes_Decimal{field: "\"invoice\".\"payment_receipt\".\"total_value_gen\""},
	CreatedAt:            whereHelpertime_Time{field: "\"invoice\".\"payment_receipt\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"invoice\".\"payment_receipt\".\"updated_at\""},
	DeletedAt:            whereHelpernull_Time{field: "\"invoice\".\"payment_receipt\".\"deleted_at\""},
}

// PaymentReceiptRels is where relationship names are stored.
var PaymentReceiptRels = struct {
	Invoice             string
	PaymentReceiptItems string
}{
	Invoice:             "Invoice",
	PaymentReceiptItems: "PaymentReceiptItems",
}

// paymentReceiptR is where relationships are stored.
type paymentReceiptR struct {
	Invoice             *Invoice                `boil:"Invoice" json:"Invoice" toml:"Invoice" yaml:"Invoice"`
	PaymentReceiptItems PaymentReceiptItemSlice `boil:"PaymentReceiptItems" json:"PaymentReceiptItems" toml:"PaymentReceiptItems" yaml:"PaymentReceiptItems"`
}

// NewStruct creates a new relationship struct
func (*paymentReceiptR) NewStruct() *paymentReceiptR {
	return &paymentReceiptR{}
}

func (r *paymentReceiptR) GetInvoice() *Invoice {
	if r == nil {
		return nil
	}
	return r.Invoice
}

func (r *paymentReceiptR) GetPaymentReceiptItems() PaymentReceiptItemSlice {
	if r == nil {
		return nil
	}
	return r.PaymentReceiptItems
}

// paymentReceiptL is where Load methods for each relationship are stored.
type paymentReceiptL struct{}

var (
	paymentReceiptAllColumns            = []string{"id", "payment_receipt_number", "invoice_id", "date_of_payment", "payer_id", "payee_id", "total_value_gen", "created_at", "updated_at", "deleted_at"}
	paymentReceiptColumnsWithoutDefault = []string{"id", "payment_receipt_number", "invoice_id", "created_at", "updated_at"}
	paymentReceiptColumnsWithDefault    = []string{"date_of_payment", "payer_id", "payee_id", "total_value_gen", "deleted_at"}
	paymentReceiptPrimaryKeyColumns     = []string{"id"}
	paymentReceiptGeneratedColumns      = []string{}
)

type (
	// PaymentReceiptSlice is an alias for a slice of pointers to PaymentReceipt.
	// This should almost always be used instead of []PaymentReceipt.
	PaymentReceiptSlice []*PaymentReceipt
	// PaymentReceiptHook is the signature for custom PaymentReceipt hook methods
	PaymentReceiptHook func(context.Context, boil.ContextExecutor, *PaymentReceipt) error

	paymentReceiptQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentReceiptType                 = reflect.TypeOf(&PaymentReceipt{})
	paymentReceiptMapping              = queries.MakeStructMapping(paymentReceiptType)
	paymentReceiptPrimaryKeyMapping, _ = queries.BindMapping(paymentReceiptType, paymentReceiptMapping, paymentReceiptPrimaryKeyColumns)
	paymentReceiptInsertCacheMut       sync.RWMutex
	paymentReceiptInsertCache          = make(map[string]insertCache)
	paymentReceiptUpdateCacheMut       sync.RWMutex
	paymentReceiptUpdateCache          = make(map[string]updateCache)
	paymentReceiptUpsertCacheMut       sync.RWMutex
	paymentReceiptUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentReceiptAfterSelectMu sync.Mutex
var paymentReceiptAfterSelectHooks []PaymentReceiptHook

var paymentReceiptBeforeInsertMu sync.Mutex
var paymentReceiptBeforeInsertHooks []PaymentReceiptHook
var paymentReceiptAfterInsertMu sync.Mutex
var paymentReceiptAfterInsertHooks []PaymentReceiptHook

var paymentReceiptBeforeUpdateMu sync.Mutex
var paymentReceiptBeforeUpdateHooks []PaymentReceiptHook
var paymentReceiptAfterUpdateMu sync.Mutex
var paymentReceiptAfterUpdateHooks []PaymentReceiptHook

var paymentReceiptBeforeDeleteMu sync.Mutex
var paymentReceiptBeforeDeleteHooks []PaymentReceiptHook
var paymentReceiptAfterDeleteMu sync.Mutex
var paymentReceiptAfterDeleteHooks []PaymentReceiptHook

var paymentReceiptBeforeUpsertMu sync.Mutex
var paymentReceiptBeforeUpsertHooks []PaymentReceiptHook
var paymentReceiptAfterUpsertMu sync.Mutex
var paymentReceiptAfterUpsertHooks []PaymentReceiptHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentReceipt) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentReceipt) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentReceipt) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentReceipt) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentReceipt) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentReceipt) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentReceipt) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentReceipt) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentReceipt) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentReceiptHook registers your hook function for all future operations.
func AddPaymentReceiptHook(hookPoint boil.HookPoint, paymentReceiptHook PaymentReceiptHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		paymentReceiptAfterSelectMu.Lock()
		paymentReceiptAfterSelectHooks = append(paymentReceiptAfterSelectHooks, paymentReceiptHook)
		paymentReceiptAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		paymentReceiptBeforeInsertMu.Lock()
		paymentReceiptBeforeInsertHooks = append(paymentReceiptBeforeInsertHooks, paymentReceiptHook)
		paymentReceiptBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		paymentReceiptAfterInsertMu.Lock()
		paymentReceiptAfterInsertHooks = append(paymentReceiptAfterInsertHooks, paymentReceiptHook)
		paymentReceiptAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		paymentReceiptBeforeUpdateMu.Lock()
		paymentReceiptBeforeUpdateHooks = append(paymentReceiptBeforeUpdateHooks, paymentReceiptHook)
		paymentReceiptBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		paymentReceiptAfterUpdateMu.Lock()
		paymentReceiptAfterUpdateHooks = append(paymentReceiptAfterUpdateHooks, paymentReceiptHook)
		paymentReceiptAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		paymentReceiptBeforeDeleteMu.Lock()
		paymentReceiptBeforeDeleteHooks = append(paymentReceiptBeforeDeleteHooks, paymentReceiptHook)
		paymentReceiptBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		paymentReceiptAfterDeleteMu.Lock()
		paymentReceiptAfterDeleteHooks = append(paymentReceiptAfterDeleteHooks, paymentReceiptHook)
		paymentReceiptAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		paymentReceiptBeforeUpsertMu.Lock()
		paymentReceiptBeforeUpsertHooks = append(paymentReceiptBeforeUpsertHooks, paymentReceiptHook)
		paymentReceiptBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		paymentReceiptAfterUpsertMu.Lock()
		paymentReceiptAfterUpsertHooks = append(paymentReceiptAfterUpsertHooks, paymentReceiptHook)
		paymentReceiptAfterUpsertMu.Unlock()
	}
}

// One returns a single paymentReceipt record from the query.
func (q paymentReceiptQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentReceipt, error) {
	o := &PaymentReceipt{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: failed to execute a one query for payment_receipt")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentReceipt records from the query.
func (q paymentReceiptQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentReceiptSlice, error) {
	var o []*PaymentReceipt

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "invoice: failed to assign all query results to PaymentReceipt slice")
	}

	if len(paymentReceiptAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentReceipt records in the query.
func (q paymentReceiptQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to count payment_receipt rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentReceiptQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "invoice: failed to check if payment_receipt exists")
	}

	return count > 0, nil
}

// Invoice pointed to by the foreign key.
func (o *PaymentReceipt) Invoice(mods ...qm.QueryMod) invoiceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InvoiceID),
	}

	queryMods = append(queryMods, mods...)

	return Invoices(queryMods...)
}

// PaymentReceiptItems retrieves all the payment_receipt_item's PaymentReceiptItems with an executor.
func (o *PaymentReceipt) PaymentReceiptItems(mods ...qm.QueryMod) paymentReceiptItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoice\".\"payment_receipt_item\".\"payment_receipt_id\"=?", o.ID),
	)

	return PaymentReceiptItems(queryMods...)
}

// LoadInvoice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentReceiptL) LoadInvoice(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentReceipt interface{}, mods queries.Applicator) error {
	var slice []*PaymentReceipt
	var object *PaymentReceipt

	if singular {
		var ok bool
		object, ok = maybePaymentReceipt.(*PaymentReceipt)
		if !ok {
			object = new(PaymentReceipt)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentReceipt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentReceipt))
			}
		}
	} else {
		s, ok := maybePaymentReceipt.(*[]*PaymentReceipt)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentReceipt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentReceipt))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &paymentReceiptR{}
		}
		args[object.InvoiceID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentReceiptR{}
			}

			args[obj.InvoiceID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.invoice`),
		qm.WhereIn(`invoice.invoice.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Invoice")
	}

	var resultSlice []*Invoice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Invoice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for invoice")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Invoice = foreign
		if foreign.R == nil {
			foreign.R = &invoiceR{}
		}
		foreign.R.PaymentReceipts = append(foreign.R.PaymentReceipts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InvoiceID == foreign.ID {
				local.R.Invoice = foreign
				if foreign.R == nil {
					foreign.R = &invoiceR{}
				}
				foreign.R.PaymentReceipts = append(foreign.R.PaymentReceipts, local)
				break
			}
		}
	}

	return nil
}

// LoadPaymentReceiptItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (paymentReceiptL) LoadPaymentReceiptItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentReceipt interface{}, mods queries.Applicator) error {
	var slice []*PaymentReceipt
	var object *PaymentReceipt

	if singular {
		var ok bool
		object, ok = maybePaymentReceipt.(*PaymentReceipt)
		if !ok {
			object = new(PaymentReceipt)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentReceipt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentReceipt))
			}
		}
	} else {
		s, ok := maybePaymentReceipt.(*[]*PaymentReceipt)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentReceipt)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentReceipt))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &paymentReceiptR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentReceiptR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.payment_receipt_item`),
		qm.WhereIn(`invoice.payment_receipt_item.payment_receipt_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payment_receipt_item")
	}

	var resultSlice []*PaymentReceiptItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payment_receipt_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payment_receipt_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payment_receipt_item")
	}

	if len(paymentReceiptItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PaymentReceiptItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentReceiptItemR{}
			}
			foreign.R.PaymentReceipt = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PaymentReceiptID {
				local.R.PaymentReceiptItems = append(local.R.PaymentReceiptItems, foreign)
				if foreign.R == nil {
					foreign.R = &paymentReceiptItemR{}
				}
				foreign.R.PaymentReceipt = local
				break
			}
		}
	}

	return nil
}

// SetInvoice of the paymentReceipt to the related item.
// Sets o.R.Invoice to related.
// Adds o to related.R.PaymentReceipts.
func (o *PaymentReceipt) SetInvoice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Invoice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice\".\"payment_receipt\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"invoice_id"}),
		strmangle.WhereClause("\"", "\"", 2, paymentReceiptPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InvoiceID = related.ID
	if o.R == nil {
		o.R = &paymentReceiptR{
			Invoice: related,
		}
	} else {
		o.R.Invoice = related
	}

	if related.R == nil {
		related.R = &invoiceR{
			PaymentReceipts: PaymentReceiptSlice{o},
		}
	} else {
		related.R.PaymentReceipts = append(related.R.PaymentReceipts, o)
	}

	return nil
}

// AddPaymentReceiptItems adds the given related objects to the existing relationships
// of the payment_receipt, optionally inserting them as new records.
// Appends related to o.R.PaymentReceiptItems.
// Sets related.R.PaymentReceipt appropriately.
func (o *PaymentReceipt) AddPaymentReceiptItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PaymentReceiptItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PaymentReceiptID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoice\".\"payment_receipt_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"payment_receipt_id"}),
				strmangle.WhereClause("\"", "\"", 2, paymentReceiptItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PaymentReceiptID = o.ID
		}
	}

	if o.R == nil {
		o.R = &paymentReceiptR{
			PaymentReceiptItems: related,
		}
	} else {
		o.R.PaymentReceiptItems = append(o.R.PaymentReceiptItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentReceiptItemR{
				PaymentReceipt: o,
			}
		} else {
			rel.R.PaymentReceipt = o
		}
	}
	return nil
}

// PaymentReceipts retrieves all the records using an executor.
func PaymentReceipts(mods ...qm.QueryMod) paymentReceiptQuery {
	mods = append(mods, qm.From("\"invoice\".\"payment_receipt\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice\".\"payment_receipt\".*"})
	}

	return paymentReceiptQuery{q}
}

// FindPaymentReceipt retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentReceipt(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PaymentReceipt, error) {
	paymentReceiptObj := &PaymentReceipt{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice\".\"payment_receipt\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, paymentReceiptObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: unable to select from payment_receipt")
	}

	if err = paymentReceiptObj.doAfterSelectHooks(ctx, exec); err != nil {
		return paymentReceiptObj, err
	}

	return paymentReceiptObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentReceipt) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("invoice: no payment_receipt provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentReceiptColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentReceiptInsertCacheMut.RLock()
	cache, cached := paymentReceiptInsertCache[key]
	paymentReceiptInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentReceiptAllColumns,
			paymentReceiptColumnsWithDefault,
			paymentReceiptColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentReceiptType, paymentReceiptMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentReceiptType, paymentReceiptMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice\".\"payment_receipt\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice\".\"payment_receipt\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "invoice: unable to insert into payment_receipt")
	}

	if !cached {
		paymentReceiptInsertCacheMut.Lock()
		paymentReceiptInsertCache[key] = cache
		paymentReceiptInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentReceipt.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentReceipt) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentReceiptUpdateCacheMut.RLock()
	cache, cached := paymentReceiptUpdateCache[key]
	paymentReceiptUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentReceiptAllColumns,
			paymentReceiptPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("invoice: unable to update payment_receipt, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice\".\"payment_receipt\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, paymentReceiptPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentReceiptType, paymentReceiptMapping, append(wl, paymentReceiptPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update payment_receipt row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by update for payment_receipt")
	}

	if !cached {
		paymentReceiptUpdateCacheMut.Lock()
		paymentReceiptUpdateCache[key] = cache
		paymentReceiptUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentReceiptQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all for payment_receipt")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected for payment_receipt")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentReceiptSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("invoice: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentReceiptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice\".\"payment_receipt\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, paymentReceiptPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all in paymentReceipt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected all in update all paymentReceipt")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentReceipt) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("invoice: no payment_receipt provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentReceiptColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentReceiptUpsertCacheMut.RLock()
	cache, cached := paymentReceiptUpsertCache[key]
	paymentReceiptUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			paymentReceiptAllColumns,
			paymentReceiptColumnsWithDefault,
			paymentReceiptColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			paymentReceiptAllColumns,
			paymentReceiptPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("invoice: unable to upsert payment_receipt, could not build update column list")
		}

		ret := strmangle.SetComplement(paymentReceiptAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(paymentReceiptPrimaryKeyColumns) == 0 {
				return errors.New("invoice: unable to upsert payment_receipt, could not build conflict column list")
			}

			conflict = make([]string, len(paymentReceiptPrimaryKeyColumns))
			copy(conflict, paymentReceiptPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice\".\"payment_receipt\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(paymentReceiptType, paymentReceiptMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentReceiptType, paymentReceiptMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "invoice: unable to upsert payment_receipt")
	}

	if !cached {
		paymentReceiptUpsertCacheMut.Lock()
		paymentReceiptUpsertCache[key] = cache
		paymentReceiptUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentReceipt record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentReceipt) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("invoice: no PaymentReceipt provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentReceiptPrimaryKeyMapping)
	sql := "DELETE FROM \"invoice\".\"payment_receipt\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete from payment_receipt")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by delete for payment_receipt")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentReceiptQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("invoice: no paymentReceiptQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from payment_receipt")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for payment_receipt")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentReceiptSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentReceiptBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentReceiptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice\".\"payment_receipt\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentReceiptPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from paymentReceipt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for payment_receipt")
	}

	if len(paymentReceiptAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentReceipt) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentReceipt(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentReceiptSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentReceiptSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentReceiptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice\".\"payment_receipt\".* FROM \"invoice\".\"payment_receipt\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentReceiptPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "invoice: unable to reload all in PaymentReceiptSlice")
	}

	*o = slice

	return nil
}

// PaymentReceiptExists checks if the PaymentReceipt row exists.
func PaymentReceiptExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice\".\"payment_receipt\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "invoice: unable to check if payment_receipt exists")
	}

	return exists, nil
}

// Exists checks if the PaymentReceipt row exists.
func (o *PaymentReceipt) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PaymentReceiptExists(ctx, exec, o.ID)
}
