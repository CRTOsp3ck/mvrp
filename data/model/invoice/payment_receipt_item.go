// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package invoice

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PaymentReceiptItem is an object representing the database table.
type PaymentReceiptItem struct {
	ID               int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	PaymentReceiptID int           `boil:"payment_receipt_id" json:"payment_receipt_id" toml:"payment_receipt_id" yaml:"payment_receipt_id"`
	Name             string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description      string        `boil:"description" json:"description" toml:"description" yaml:"description"`
	Quantity         types.Decimal `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	UnitValue        types.Decimal `boil:"unit_value" json:"unit_value" toml:"unit_value" yaml:"unit_value"`
	TotalValueGen    types.Decimal `boil:"total_value_gen" json:"total_value_gen" toml:"total_value_gen" yaml:"total_value_gen"`
	CreatedAt        time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt        null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *paymentReceiptItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentReceiptItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentReceiptItemColumns = struct {
	ID               string
	PaymentReceiptID string
	Name             string
	Description      string
	Quantity         string
	UnitValue        string
	TotalValueGen    string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	PaymentReceiptID: "payment_receipt_id",
	Name:             "name",
	Description:      "description",
	Quantity:         "quantity",
	UnitValue:        "unit_value",
	TotalValueGen:    "total_value_gen",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

var PaymentReceiptItemTableColumns = struct {
	ID               string
	PaymentReceiptID string
	Name             string
	Description      string
	Quantity         string
	UnitValue        string
	TotalValueGen    string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "payment_receipt_item.id",
	PaymentReceiptID: "payment_receipt_item.payment_receipt_id",
	Name:             "payment_receipt_item.name",
	Description:      "payment_receipt_item.description",
	Quantity:         "payment_receipt_item.quantity",
	UnitValue:        "payment_receipt_item.unit_value",
	TotalValueGen:    "payment_receipt_item.total_value_gen",
	CreatedAt:        "payment_receipt_item.created_at",
	UpdatedAt:        "payment_receipt_item.updated_at",
	DeletedAt:        "payment_receipt_item.deleted_at",
}

// Generated where

var PaymentReceiptItemWhere = struct {
	ID               whereHelperint
	PaymentReceiptID whereHelperint
	Name             whereHelperstring
	Description      whereHelperstring
	Quantity         whereHelpertypes_Decimal
	UnitValue        whereHelpertypes_Decimal
	TotalValueGen    whereHelpertypes_Decimal
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperint{field: "\"invoice\".\"payment_receipt_item\".\"id\""},
	PaymentReceiptID: whereHelperint{field: "\"invoice\".\"payment_receipt_item\".\"payment_receipt_id\""},
	Name:             whereHelperstring{field: "\"invoice\".\"payment_receipt_item\".\"name\""},
	Description:      whereHelperstring{field: "\"invoice\".\"payment_receipt_item\".\"description\""},
	Quantity:         whereHelpertypes_Decimal{field: "\"invoice\".\"payment_receipt_item\".\"quantity\""},
	UnitValue:        whereHelpertypes_Decimal{field: "\"invoice\".\"payment_receipt_item\".\"unit_value\""},
	TotalValueGen:    whereHelpertypes_Decimal{field: "\"invoice\".\"payment_receipt_item\".\"total_value_gen\""},
	CreatedAt:        whereHelpertime_Time{field: "\"invoice\".\"payment_receipt_item\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"invoice\".\"payment_receipt_item\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"invoice\".\"payment_receipt_item\".\"deleted_at\""},
}

// PaymentReceiptItemRels is where relationship names are stored.
var PaymentReceiptItemRels = struct {
	PaymentReceipt string
}{
	PaymentReceipt: "PaymentReceipt",
}

// paymentReceiptItemR is where relationships are stored.
type paymentReceiptItemR struct {
	PaymentReceipt *PaymentReceipt `boil:"PaymentReceipt" json:"PaymentReceipt" toml:"PaymentReceipt" yaml:"PaymentReceipt"`
}

// NewStruct creates a new relationship struct
func (*paymentReceiptItemR) NewStruct() *paymentReceiptItemR {
	return &paymentReceiptItemR{}
}

func (r *paymentReceiptItemR) GetPaymentReceipt() *PaymentReceipt {
	if r == nil {
		return nil
	}
	return r.PaymentReceipt
}

// paymentReceiptItemL is where Load methods for each relationship are stored.
type paymentReceiptItemL struct{}

var (
	paymentReceiptItemAllColumns            = []string{"id", "payment_receipt_id", "name", "description", "quantity", "unit_value", "total_value_gen", "created_at", "updated_at", "deleted_at"}
	paymentReceiptItemColumnsWithoutDefault = []string{"id", "payment_receipt_id", "name", "description", "created_at", "updated_at"}
	paymentReceiptItemColumnsWithDefault    = []string{"quantity", "unit_value", "total_value_gen", "deleted_at"}
	paymentReceiptItemPrimaryKeyColumns     = []string{"id"}
	paymentReceiptItemGeneratedColumns      = []string{}
)

type (
	// PaymentReceiptItemSlice is an alias for a slice of pointers to PaymentReceiptItem.
	// This should almost always be used instead of []PaymentReceiptItem.
	PaymentReceiptItemSlice []*PaymentReceiptItem
	// PaymentReceiptItemHook is the signature for custom PaymentReceiptItem hook methods
	PaymentReceiptItemHook func(context.Context, boil.ContextExecutor, *PaymentReceiptItem) error

	paymentReceiptItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentReceiptItemType                 = reflect.TypeOf(&PaymentReceiptItem{})
	paymentReceiptItemMapping              = queries.MakeStructMapping(paymentReceiptItemType)
	paymentReceiptItemPrimaryKeyMapping, _ = queries.BindMapping(paymentReceiptItemType, paymentReceiptItemMapping, paymentReceiptItemPrimaryKeyColumns)
	paymentReceiptItemInsertCacheMut       sync.RWMutex
	paymentReceiptItemInsertCache          = make(map[string]insertCache)
	paymentReceiptItemUpdateCacheMut       sync.RWMutex
	paymentReceiptItemUpdateCache          = make(map[string]updateCache)
	paymentReceiptItemUpsertCacheMut       sync.RWMutex
	paymentReceiptItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentReceiptItemAfterSelectMu sync.Mutex
var paymentReceiptItemAfterSelectHooks []PaymentReceiptItemHook

var paymentReceiptItemBeforeInsertMu sync.Mutex
var paymentReceiptItemBeforeInsertHooks []PaymentReceiptItemHook
var paymentReceiptItemAfterInsertMu sync.Mutex
var paymentReceiptItemAfterInsertHooks []PaymentReceiptItemHook

var paymentReceiptItemBeforeUpdateMu sync.Mutex
var paymentReceiptItemBeforeUpdateHooks []PaymentReceiptItemHook
var paymentReceiptItemAfterUpdateMu sync.Mutex
var paymentReceiptItemAfterUpdateHooks []PaymentReceiptItemHook

var paymentReceiptItemBeforeDeleteMu sync.Mutex
var paymentReceiptItemBeforeDeleteHooks []PaymentReceiptItemHook
var paymentReceiptItemAfterDeleteMu sync.Mutex
var paymentReceiptItemAfterDeleteHooks []PaymentReceiptItemHook

var paymentReceiptItemBeforeUpsertMu sync.Mutex
var paymentReceiptItemBeforeUpsertHooks []PaymentReceiptItemHook
var paymentReceiptItemAfterUpsertMu sync.Mutex
var paymentReceiptItemAfterUpsertHooks []PaymentReceiptItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentReceiptItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentReceiptItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentReceiptItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentReceiptItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentReceiptItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentReceiptItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentReceiptItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentReceiptItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentReceiptItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentReceiptItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentReceiptItemHook registers your hook function for all future operations.
func AddPaymentReceiptItemHook(hookPoint boil.HookPoint, paymentReceiptItemHook PaymentReceiptItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		paymentReceiptItemAfterSelectMu.Lock()
		paymentReceiptItemAfterSelectHooks = append(paymentReceiptItemAfterSelectHooks, paymentReceiptItemHook)
		paymentReceiptItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		paymentReceiptItemBeforeInsertMu.Lock()
		paymentReceiptItemBeforeInsertHooks = append(paymentReceiptItemBeforeInsertHooks, paymentReceiptItemHook)
		paymentReceiptItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		paymentReceiptItemAfterInsertMu.Lock()
		paymentReceiptItemAfterInsertHooks = append(paymentReceiptItemAfterInsertHooks, paymentReceiptItemHook)
		paymentReceiptItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		paymentReceiptItemBeforeUpdateMu.Lock()
		paymentReceiptItemBeforeUpdateHooks = append(paymentReceiptItemBeforeUpdateHooks, paymentReceiptItemHook)
		paymentReceiptItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		paymentReceiptItemAfterUpdateMu.Lock()
		paymentReceiptItemAfterUpdateHooks = append(paymentReceiptItemAfterUpdateHooks, paymentReceiptItemHook)
		paymentReceiptItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		paymentReceiptItemBeforeDeleteMu.Lock()
		paymentReceiptItemBeforeDeleteHooks = append(paymentReceiptItemBeforeDeleteHooks, paymentReceiptItemHook)
		paymentReceiptItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		paymentReceiptItemAfterDeleteMu.Lock()
		paymentReceiptItemAfterDeleteHooks = append(paymentReceiptItemAfterDeleteHooks, paymentReceiptItemHook)
		paymentReceiptItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		paymentReceiptItemBeforeUpsertMu.Lock()
		paymentReceiptItemBeforeUpsertHooks = append(paymentReceiptItemBeforeUpsertHooks, paymentReceiptItemHook)
		paymentReceiptItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		paymentReceiptItemAfterUpsertMu.Lock()
		paymentReceiptItemAfterUpsertHooks = append(paymentReceiptItemAfterUpsertHooks, paymentReceiptItemHook)
		paymentReceiptItemAfterUpsertMu.Unlock()
	}
}

// One returns a single paymentReceiptItem record from the query.
func (q paymentReceiptItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentReceiptItem, error) {
	o := &PaymentReceiptItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: failed to execute a one query for payment_receipt_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentReceiptItem records from the query.
func (q paymentReceiptItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentReceiptItemSlice, error) {
	var o []*PaymentReceiptItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "invoice: failed to assign all query results to PaymentReceiptItem slice")
	}

	if len(paymentReceiptItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentReceiptItem records in the query.
func (q paymentReceiptItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to count payment_receipt_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentReceiptItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "invoice: failed to check if payment_receipt_item exists")
	}

	return count > 0, nil
}

// PaymentReceipt pointed to by the foreign key.
func (o *PaymentReceiptItem) PaymentReceipt(mods ...qm.QueryMod) paymentReceiptQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PaymentReceiptID),
	}

	queryMods = append(queryMods, mods...)

	return PaymentReceipts(queryMods...)
}

// LoadPaymentReceipt allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentReceiptItemL) LoadPaymentReceipt(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentReceiptItem interface{}, mods queries.Applicator) error {
	var slice []*PaymentReceiptItem
	var object *PaymentReceiptItem

	if singular {
		var ok bool
		object, ok = maybePaymentReceiptItem.(*PaymentReceiptItem)
		if !ok {
			object = new(PaymentReceiptItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentReceiptItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentReceiptItem))
			}
		}
	} else {
		s, ok := maybePaymentReceiptItem.(*[]*PaymentReceiptItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentReceiptItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentReceiptItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &paymentReceiptItemR{}
		}
		args[object.PaymentReceiptID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentReceiptItemR{}
			}

			args[obj.PaymentReceiptID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice.payment_receipt`),
		qm.WhereIn(`invoice.payment_receipt.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentReceipt")
	}

	var resultSlice []*PaymentReceipt
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentReceipt")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for payment_receipt")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payment_receipt")
	}

	if len(paymentReceiptAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentReceipt = foreign
		if foreign.R == nil {
			foreign.R = &paymentReceiptR{}
		}
		foreign.R.PaymentReceiptItems = append(foreign.R.PaymentReceiptItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentReceiptID == foreign.ID {
				local.R.PaymentReceipt = foreign
				if foreign.R == nil {
					foreign.R = &paymentReceiptR{}
				}
				foreign.R.PaymentReceiptItems = append(foreign.R.PaymentReceiptItems, local)
				break
			}
		}
	}

	return nil
}

// SetPaymentReceipt of the paymentReceiptItem to the related item.
// Sets o.R.PaymentReceipt to related.
// Adds o to related.R.PaymentReceiptItems.
func (o *PaymentReceiptItem) SetPaymentReceipt(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PaymentReceipt) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice\".\"payment_receipt_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"payment_receipt_id"}),
		strmangle.WhereClause("\"", "\"", 2, paymentReceiptItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentReceiptID = related.ID
	if o.R == nil {
		o.R = &paymentReceiptItemR{
			PaymentReceipt: related,
		}
	} else {
		o.R.PaymentReceipt = related
	}

	if related.R == nil {
		related.R = &paymentReceiptR{
			PaymentReceiptItems: PaymentReceiptItemSlice{o},
		}
	} else {
		related.R.PaymentReceiptItems = append(related.R.PaymentReceiptItems, o)
	}

	return nil
}

// PaymentReceiptItems retrieves all the records using an executor.
func PaymentReceiptItems(mods ...qm.QueryMod) paymentReceiptItemQuery {
	mods = append(mods, qm.From("\"invoice\".\"payment_receipt_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice\".\"payment_receipt_item\".*"})
	}

	return paymentReceiptItemQuery{q}
}

// FindPaymentReceiptItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentReceiptItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PaymentReceiptItem, error) {
	paymentReceiptItemObj := &PaymentReceiptItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice\".\"payment_receipt_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, paymentReceiptItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "invoice: unable to select from payment_receipt_item")
	}

	if err = paymentReceiptItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return paymentReceiptItemObj, err
	}

	return paymentReceiptItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentReceiptItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("invoice: no payment_receipt_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentReceiptItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentReceiptItemInsertCacheMut.RLock()
	cache, cached := paymentReceiptItemInsertCache[key]
	paymentReceiptItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentReceiptItemAllColumns,
			paymentReceiptItemColumnsWithDefault,
			paymentReceiptItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentReceiptItemType, paymentReceiptItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentReceiptItemType, paymentReceiptItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice\".\"payment_receipt_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice\".\"payment_receipt_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "invoice: unable to insert into payment_receipt_item")
	}

	if !cached {
		paymentReceiptItemInsertCacheMut.Lock()
		paymentReceiptItemInsertCache[key] = cache
		paymentReceiptItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentReceiptItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentReceiptItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentReceiptItemUpdateCacheMut.RLock()
	cache, cached := paymentReceiptItemUpdateCache[key]
	paymentReceiptItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentReceiptItemAllColumns,
			paymentReceiptItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("invoice: unable to update payment_receipt_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice\".\"payment_receipt_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, paymentReceiptItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentReceiptItemType, paymentReceiptItemMapping, append(wl, paymentReceiptItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update payment_receipt_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by update for payment_receipt_item")
	}

	if !cached {
		paymentReceiptItemUpdateCacheMut.Lock()
		paymentReceiptItemUpdateCache[key] = cache
		paymentReceiptItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentReceiptItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all for payment_receipt_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected for payment_receipt_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentReceiptItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("invoice: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentReceiptItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice\".\"payment_receipt_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, paymentReceiptItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to update all in paymentReceiptItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to retrieve rows affected all in update all paymentReceiptItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentReceiptItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("invoice: no payment_receipt_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentReceiptItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentReceiptItemUpsertCacheMut.RLock()
	cache, cached := paymentReceiptItemUpsertCache[key]
	paymentReceiptItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			paymentReceiptItemAllColumns,
			paymentReceiptItemColumnsWithDefault,
			paymentReceiptItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			paymentReceiptItemAllColumns,
			paymentReceiptItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("invoice: unable to upsert payment_receipt_item, could not build update column list")
		}

		ret := strmangle.SetComplement(paymentReceiptItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(paymentReceiptItemPrimaryKeyColumns) == 0 {
				return errors.New("invoice: unable to upsert payment_receipt_item, could not build conflict column list")
			}

			conflict = make([]string, len(paymentReceiptItemPrimaryKeyColumns))
			copy(conflict, paymentReceiptItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice\".\"payment_receipt_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(paymentReceiptItemType, paymentReceiptItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentReceiptItemType, paymentReceiptItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "invoice: unable to upsert payment_receipt_item")
	}

	if !cached {
		paymentReceiptItemUpsertCacheMut.Lock()
		paymentReceiptItemUpsertCache[key] = cache
		paymentReceiptItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentReceiptItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentReceiptItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("invoice: no PaymentReceiptItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentReceiptItemPrimaryKeyMapping)
	sql := "DELETE FROM \"invoice\".\"payment_receipt_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete from payment_receipt_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by delete for payment_receipt_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentReceiptItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("invoice: no paymentReceiptItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from payment_receipt_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for payment_receipt_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentReceiptItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentReceiptItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentReceiptItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice\".\"payment_receipt_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentReceiptItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "invoice: unable to delete all from paymentReceiptItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "invoice: failed to get rows affected by deleteall for payment_receipt_item")
	}

	if len(paymentReceiptItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentReceiptItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentReceiptItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentReceiptItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentReceiptItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentReceiptItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice\".\"payment_receipt_item\".* FROM \"invoice\".\"payment_receipt_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentReceiptItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "invoice: unable to reload all in PaymentReceiptItemSlice")
	}

	*o = slice

	return nil
}

// PaymentReceiptItemExists checks if the PaymentReceiptItem row exists.
func PaymentReceiptItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice\".\"payment_receipt_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "invoice: unable to check if payment_receipt_item exists")
	}

	return exists, nil
}

// Exists checks if the PaymentReceiptItem row exists.
func (o *PaymentReceiptItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PaymentReceiptItemExists(ctx, exec, o.ID)
}
