// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package inventory

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// InventoryTransaction is an object representing the database table.
type InventoryTransaction struct {
	ID              int                      `boil:"id" json:"id" toml:"id" yaml:"id"`
	InventoryID     null.Int                 `boil:"inventory_id" json:"inventory_id,omitempty" toml:"inventory_id" yaml:"inventory_id,omitempty"`
	TransactionType InventoryTransactionType `boil:"transaction_type" json:"transaction_type" toml:"transaction_type" yaml:"transaction_type"`
	Quantity        types.Decimal            `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	Reason          null.String              `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	TransactionDate null.Time                `boil:"transaction_date" json:"transaction_date,omitempty" toml:"transaction_date" yaml:"transaction_date,omitempty"`
	CreatedBy       null.String              `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	CreatedAt       time.Time                `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time                `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt       null.Time                `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *inventoryTransactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inventoryTransactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InventoryTransactionColumns = struct {
	ID              string
	InventoryID     string
	TransactionType string
	Quantity        string
	Reason          string
	TransactionDate string
	CreatedBy       string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
}{
	ID:              "id",
	InventoryID:     "inventory_id",
	TransactionType: "transaction_type",
	Quantity:        "quantity",
	Reason:          "reason",
	TransactionDate: "transaction_date",
	CreatedBy:       "created_by",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
}

var InventoryTransactionTableColumns = struct {
	ID              string
	InventoryID     string
	TransactionType string
	Quantity        string
	Reason          string
	TransactionDate string
	CreatedBy       string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
}{
	ID:              "inventory_transaction.id",
	InventoryID:     "inventory_transaction.inventory_id",
	TransactionType: "inventory_transaction.transaction_type",
	Quantity:        "inventory_transaction.quantity",
	Reason:          "inventory_transaction.reason",
	TransactionDate: "inventory_transaction.transaction_date",
	CreatedBy:       "inventory_transaction.created_by",
	CreatedAt:       "inventory_transaction.created_at",
	UpdatedAt:       "inventory_transaction.updated_at",
	DeletedAt:       "inventory_transaction.deleted_at",
}

// Generated where

type whereHelperInventoryTransactionType struct{ field string }

func (w whereHelperInventoryTransactionType) EQ(x InventoryTransactionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperInventoryTransactionType) NEQ(x InventoryTransactionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperInventoryTransactionType) LT(x InventoryTransactionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperInventoryTransactionType) LTE(x InventoryTransactionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperInventoryTransactionType) GT(x InventoryTransactionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperInventoryTransactionType) GTE(x InventoryTransactionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperInventoryTransactionType) IN(slice []InventoryTransactionType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperInventoryTransactionType) NIN(slice []InventoryTransactionType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var InventoryTransactionWhere = struct {
	ID              whereHelperint
	InventoryID     whereHelpernull_Int
	TransactionType whereHelperInventoryTransactionType
	Quantity        whereHelpertypes_Decimal
	Reason          whereHelpernull_String
	TransactionDate whereHelpernull_Time
	CreatedBy       whereHelpernull_String
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	DeletedAt       whereHelpernull_Time
}{
	ID:              whereHelperint{field: "\"inventory\".\"inventory_transaction\".\"id\""},
	InventoryID:     whereHelpernull_Int{field: "\"inventory\".\"inventory_transaction\".\"inventory_id\""},
	TransactionType: whereHelperInventoryTransactionType{field: "\"inventory\".\"inventory_transaction\".\"transaction_type\""},
	Quantity:        whereHelpertypes_Decimal{field: "\"inventory\".\"inventory_transaction\".\"quantity\""},
	Reason:          whereHelpernull_String{field: "\"inventory\".\"inventory_transaction\".\"reason\""},
	TransactionDate: whereHelpernull_Time{field: "\"inventory\".\"inventory_transaction\".\"transaction_date\""},
	CreatedBy:       whereHelpernull_String{field: "\"inventory\".\"inventory_transaction\".\"created_by\""},
	CreatedAt:       whereHelpertime_Time{field: "\"inventory\".\"inventory_transaction\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"inventory\".\"inventory_transaction\".\"updated_at\""},
	DeletedAt:       whereHelpernull_Time{field: "\"inventory\".\"inventory_transaction\".\"deleted_at\""},
}

// InventoryTransactionRels is where relationship names are stored.
var InventoryTransactionRels = struct {
	Inventory string
}{
	Inventory: "Inventory",
}

// inventoryTransactionR is where relationships are stored.
type inventoryTransactionR struct {
	Inventory *Inventory `boil:"Inventory" json:"Inventory" toml:"Inventory" yaml:"Inventory"`
}

// NewStruct creates a new relationship struct
func (*inventoryTransactionR) NewStruct() *inventoryTransactionR {
	return &inventoryTransactionR{}
}

func (r *inventoryTransactionR) GetInventory() *Inventory {
	if r == nil {
		return nil
	}
	return r.Inventory
}

// inventoryTransactionL is where Load methods for each relationship are stored.
type inventoryTransactionL struct{}

var (
	inventoryTransactionAllColumns            = []string{"id", "inventory_id", "transaction_type", "quantity", "reason", "transaction_date", "created_by", "created_at", "updated_at", "deleted_at"}
	inventoryTransactionColumnsWithoutDefault = []string{"id", "transaction_type", "quantity", "created_at", "updated_at"}
	inventoryTransactionColumnsWithDefault    = []string{"inventory_id", "reason", "transaction_date", "created_by", "deleted_at"}
	inventoryTransactionPrimaryKeyColumns     = []string{"id"}
	inventoryTransactionGeneratedColumns      = []string{}
)

type (
	// InventoryTransactionSlice is an alias for a slice of pointers to InventoryTransaction.
	// This should almost always be used instead of []InventoryTransaction.
	InventoryTransactionSlice []*InventoryTransaction
	// InventoryTransactionHook is the signature for custom InventoryTransaction hook methods
	InventoryTransactionHook func(context.Context, boil.ContextExecutor, *InventoryTransaction) error

	inventoryTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inventoryTransactionType                 = reflect.TypeOf(&InventoryTransaction{})
	inventoryTransactionMapping              = queries.MakeStructMapping(inventoryTransactionType)
	inventoryTransactionPrimaryKeyMapping, _ = queries.BindMapping(inventoryTransactionType, inventoryTransactionMapping, inventoryTransactionPrimaryKeyColumns)
	inventoryTransactionInsertCacheMut       sync.RWMutex
	inventoryTransactionInsertCache          = make(map[string]insertCache)
	inventoryTransactionUpdateCacheMut       sync.RWMutex
	inventoryTransactionUpdateCache          = make(map[string]updateCache)
	inventoryTransactionUpsertCacheMut       sync.RWMutex
	inventoryTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var inventoryTransactionAfterSelectMu sync.Mutex
var inventoryTransactionAfterSelectHooks []InventoryTransactionHook

var inventoryTransactionBeforeInsertMu sync.Mutex
var inventoryTransactionBeforeInsertHooks []InventoryTransactionHook
var inventoryTransactionAfterInsertMu sync.Mutex
var inventoryTransactionAfterInsertHooks []InventoryTransactionHook

var inventoryTransactionBeforeUpdateMu sync.Mutex
var inventoryTransactionBeforeUpdateHooks []InventoryTransactionHook
var inventoryTransactionAfterUpdateMu sync.Mutex
var inventoryTransactionAfterUpdateHooks []InventoryTransactionHook

var inventoryTransactionBeforeDeleteMu sync.Mutex
var inventoryTransactionBeforeDeleteHooks []InventoryTransactionHook
var inventoryTransactionAfterDeleteMu sync.Mutex
var inventoryTransactionAfterDeleteHooks []InventoryTransactionHook

var inventoryTransactionBeforeUpsertMu sync.Mutex
var inventoryTransactionBeforeUpsertHooks []InventoryTransactionHook
var inventoryTransactionAfterUpsertMu sync.Mutex
var inventoryTransactionAfterUpsertHooks []InventoryTransactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InventoryTransaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryTransactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InventoryTransaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryTransactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InventoryTransaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryTransactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InventoryTransaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryTransactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InventoryTransaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryTransactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InventoryTransaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryTransactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InventoryTransaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryTransactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InventoryTransaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryTransactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InventoryTransaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inventoryTransactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInventoryTransactionHook registers your hook function for all future operations.
func AddInventoryTransactionHook(hookPoint boil.HookPoint, inventoryTransactionHook InventoryTransactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		inventoryTransactionAfterSelectMu.Lock()
		inventoryTransactionAfterSelectHooks = append(inventoryTransactionAfterSelectHooks, inventoryTransactionHook)
		inventoryTransactionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		inventoryTransactionBeforeInsertMu.Lock()
		inventoryTransactionBeforeInsertHooks = append(inventoryTransactionBeforeInsertHooks, inventoryTransactionHook)
		inventoryTransactionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		inventoryTransactionAfterInsertMu.Lock()
		inventoryTransactionAfterInsertHooks = append(inventoryTransactionAfterInsertHooks, inventoryTransactionHook)
		inventoryTransactionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		inventoryTransactionBeforeUpdateMu.Lock()
		inventoryTransactionBeforeUpdateHooks = append(inventoryTransactionBeforeUpdateHooks, inventoryTransactionHook)
		inventoryTransactionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		inventoryTransactionAfterUpdateMu.Lock()
		inventoryTransactionAfterUpdateHooks = append(inventoryTransactionAfterUpdateHooks, inventoryTransactionHook)
		inventoryTransactionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		inventoryTransactionBeforeDeleteMu.Lock()
		inventoryTransactionBeforeDeleteHooks = append(inventoryTransactionBeforeDeleteHooks, inventoryTransactionHook)
		inventoryTransactionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		inventoryTransactionAfterDeleteMu.Lock()
		inventoryTransactionAfterDeleteHooks = append(inventoryTransactionAfterDeleteHooks, inventoryTransactionHook)
		inventoryTransactionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		inventoryTransactionBeforeUpsertMu.Lock()
		inventoryTransactionBeforeUpsertHooks = append(inventoryTransactionBeforeUpsertHooks, inventoryTransactionHook)
		inventoryTransactionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		inventoryTransactionAfterUpsertMu.Lock()
		inventoryTransactionAfterUpsertHooks = append(inventoryTransactionAfterUpsertHooks, inventoryTransactionHook)
		inventoryTransactionAfterUpsertMu.Unlock()
	}
}

// One returns a single inventoryTransaction record from the query.
func (q inventoryTransactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InventoryTransaction, error) {
	o := &InventoryTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: failed to execute a one query for inventory_transaction")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InventoryTransaction records from the query.
func (q inventoryTransactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (InventoryTransactionSlice, error) {
	var o []*InventoryTransaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "inventory: failed to assign all query results to InventoryTransaction slice")
	}

	if len(inventoryTransactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InventoryTransaction records in the query.
func (q inventoryTransactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to count inventory_transaction rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q inventoryTransactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "inventory: failed to check if inventory_transaction exists")
	}

	return count > 0, nil
}

// Inventory pointed to by the foreign key.
func (o *InventoryTransaction) Inventory(mods ...qm.QueryMod) inventoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InventoryID),
	}

	queryMods = append(queryMods, mods...)

	return Inventories(queryMods...)
}

// LoadInventory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (inventoryTransactionL) LoadInventory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInventoryTransaction interface{}, mods queries.Applicator) error {
	var slice []*InventoryTransaction
	var object *InventoryTransaction

	if singular {
		var ok bool
		object, ok = maybeInventoryTransaction.(*InventoryTransaction)
		if !ok {
			object = new(InventoryTransaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInventoryTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInventoryTransaction))
			}
		}
	} else {
		s, ok := maybeInventoryTransaction.(*[]*InventoryTransaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInventoryTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInventoryTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &inventoryTransactionR{}
		}
		if !queries.IsNil(object.InventoryID) {
			args[object.InventoryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inventoryTransactionR{}
			}

			if !queries.IsNil(obj.InventoryID) {
				args[obj.InventoryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`inventory.inventory`),
		qm.WhereIn(`inventory.inventory.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Inventory")
	}

	var resultSlice []*Inventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for inventory")
	}

	if len(inventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Inventory = foreign
		if foreign.R == nil {
			foreign.R = &inventoryR{}
		}
		foreign.R.InventoryTransactions = append(foreign.R.InventoryTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InventoryID, foreign.ID) {
				local.R.Inventory = foreign
				if foreign.R == nil {
					foreign.R = &inventoryR{}
				}
				foreign.R.InventoryTransactions = append(foreign.R.InventoryTransactions, local)
				break
			}
		}
	}

	return nil
}

// SetInventory of the inventoryTransaction to the related item.
// Sets o.R.Inventory to related.
// Adds o to related.R.InventoryTransactions.
func (o *InventoryTransaction) SetInventory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Inventory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"inventory\".\"inventory_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"inventory_id"}),
		strmangle.WhereClause("\"", "\"", 2, inventoryTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InventoryID, related.ID)
	if o.R == nil {
		o.R = &inventoryTransactionR{
			Inventory: related,
		}
	} else {
		o.R.Inventory = related
	}

	if related.R == nil {
		related.R = &inventoryR{
			InventoryTransactions: InventoryTransactionSlice{o},
		}
	} else {
		related.R.InventoryTransactions = append(related.R.InventoryTransactions, o)
	}

	return nil
}

// RemoveInventory relationship.
// Sets o.R.Inventory to nil.
// Removes o from all passed in related items' relationships struct.
func (o *InventoryTransaction) RemoveInventory(ctx context.Context, exec boil.ContextExecutor, related *Inventory) error {
	var err error

	queries.SetScanner(&o.InventoryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("inventory_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Inventory = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.InventoryTransactions {
		if queries.Equal(o.InventoryID, ri.InventoryID) {
			continue
		}

		ln := len(related.R.InventoryTransactions)
		if ln > 1 && i < ln-1 {
			related.R.InventoryTransactions[i] = related.R.InventoryTransactions[ln-1]
		}
		related.R.InventoryTransactions = related.R.InventoryTransactions[:ln-1]
		break
	}
	return nil
}

// InventoryTransactions retrieves all the records using an executor.
func InventoryTransactions(mods ...qm.QueryMod) inventoryTransactionQuery {
	mods = append(mods, qm.From("\"inventory\".\"inventory_transaction\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"inventory\".\"inventory_transaction\".*"})
	}

	return inventoryTransactionQuery{q}
}

// FindInventoryTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInventoryTransaction(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*InventoryTransaction, error) {
	inventoryTransactionObj := &InventoryTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"inventory\".\"inventory_transaction\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, inventoryTransactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: unable to select from inventory_transaction")
	}

	if err = inventoryTransactionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return inventoryTransactionObj, err
	}

	return inventoryTransactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InventoryTransaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("inventory: no inventory_transaction provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inventoryTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	inventoryTransactionInsertCacheMut.RLock()
	cache, cached := inventoryTransactionInsertCache[key]
	inventoryTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			inventoryTransactionAllColumns,
			inventoryTransactionColumnsWithDefault,
			inventoryTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(inventoryTransactionType, inventoryTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inventoryTransactionType, inventoryTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inventory\".\"inventory_transaction\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inventory\".\"inventory_transaction\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "inventory: unable to insert into inventory_transaction")
	}

	if !cached {
		inventoryTransactionInsertCacheMut.Lock()
		inventoryTransactionInsertCache[key] = cache
		inventoryTransactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InventoryTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InventoryTransaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	inventoryTransactionUpdateCacheMut.RLock()
	cache, cached := inventoryTransactionUpdateCache[key]
	inventoryTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			inventoryTransactionAllColumns,
			inventoryTransactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("inventory: unable to update inventory_transaction, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"inventory\".\"inventory_transaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, inventoryTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inventoryTransactionType, inventoryTransactionMapping, append(wl, inventoryTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update inventory_transaction row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by update for inventory_transaction")
	}

	if !cached {
		inventoryTransactionUpdateCacheMut.Lock()
		inventoryTransactionUpdateCache[key] = cache
		inventoryTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q inventoryTransactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update all for inventory_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to retrieve rows affected for inventory_transaction")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InventoryTransactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("inventory: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inventoryTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"inventory\".\"inventory_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, inventoryTransactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update all in inventoryTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to retrieve rows affected all in update all inventoryTransaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InventoryTransaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("inventory: no inventory_transaction provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inventoryTransactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inventoryTransactionUpsertCacheMut.RLock()
	cache, cached := inventoryTransactionUpsertCache[key]
	inventoryTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			inventoryTransactionAllColumns,
			inventoryTransactionColumnsWithDefault,
			inventoryTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			inventoryTransactionAllColumns,
			inventoryTransactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("inventory: unable to upsert inventory_transaction, could not build update column list")
		}

		ret := strmangle.SetComplement(inventoryTransactionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(inventoryTransactionPrimaryKeyColumns) == 0 {
				return errors.New("inventory: unable to upsert inventory_transaction, could not build conflict column list")
			}

			conflict = make([]string, len(inventoryTransactionPrimaryKeyColumns))
			copy(conflict, inventoryTransactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inventory\".\"inventory_transaction\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(inventoryTransactionType, inventoryTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inventoryTransactionType, inventoryTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "inventory: unable to upsert inventory_transaction")
	}

	if !cached {
		inventoryTransactionUpsertCacheMut.Lock()
		inventoryTransactionUpsertCache[key] = cache
		inventoryTransactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InventoryTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InventoryTransaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("inventory: no InventoryTransaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inventoryTransactionPrimaryKeyMapping)
	sql := "DELETE FROM \"inventory\".\"inventory_transaction\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete from inventory_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by delete for inventory_transaction")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q inventoryTransactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("inventory: no inventoryTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete all from inventory_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by deleteall for inventory_transaction")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InventoryTransactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(inventoryTransactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inventoryTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"inventory\".\"inventory_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, inventoryTransactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete all from inventoryTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by deleteall for inventory_transaction")
	}

	if len(inventoryTransactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InventoryTransaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInventoryTransaction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InventoryTransactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InventoryTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inventoryTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"inventory\".\"inventory_transaction\".* FROM \"inventory\".\"inventory_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, inventoryTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "inventory: unable to reload all in InventoryTransactionSlice")
	}

	*o = slice

	return nil
}

// InventoryTransactionExists checks if the InventoryTransaction row exists.
func InventoryTransactionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"inventory\".\"inventory_transaction\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "inventory: unable to check if inventory_transaction exists")
	}

	return exists, nil
}

// Exists checks if the InventoryTransaction row exists.
func (o *InventoryTransaction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InventoryTransactionExists(ctx, exec, o.ID)
}
