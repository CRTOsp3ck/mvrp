// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package inventory

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ReturnMerchandiseAuthorizationView is an object representing the database table.
type ReturnMerchandiseAuthorizationView struct {
	ID             null.Int          `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	RmaNumber      null.String       `boil:"rma_number" json:"rma_number,omitempty" toml:"rma_number" yaml:"rma_number,omitempty"`
	RmaDate        null.Time         `boil:"rma_date" json:"rma_date,omitempty" toml:"rma_date" yaml:"rma_date,omitempty"`
	TotalValueGen  types.NullDecimal `boil:"total_value_gen" json:"total_value_gen,omitempty" toml:"total_value_gen" yaml:"total_value_gen,omitempty"`
	ReceivedBy     null.Int          `boil:"received_by" json:"received_by,omitempty" toml:"received_by" yaml:"received_by,omitempty"`
	Notes          null.String       `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	CreatedAt      null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt      null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	ReceivedByInfo null.JSON         `boil:"received_by_info" json:"received_by_info,omitempty" toml:"received_by_info" yaml:"received_by_info,omitempty"`
	Items          null.JSON         `boil:"items" json:"items,omitempty" toml:"items" yaml:"items,omitempty"`
}

var ReturnMerchandiseAuthorizationViewColumns = struct {
	ID             string
	RmaNumber      string
	RmaDate        string
	TotalValueGen  string
	ReceivedBy     string
	Notes          string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
	ReceivedByInfo string
	Items          string
}{
	ID:             "id",
	RmaNumber:      "rma_number",
	RmaDate:        "rma_date",
	TotalValueGen:  "total_value_gen",
	ReceivedBy:     "received_by",
	Notes:          "notes",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
	ReceivedByInfo: "received_by_info",
	Items:          "items",
}

var ReturnMerchandiseAuthorizationViewTableColumns = struct {
	ID             string
	RmaNumber      string
	RmaDate        string
	TotalValueGen  string
	ReceivedBy     string
	Notes          string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
	ReceivedByInfo string
	Items          string
}{
	ID:             "return_merchandise_authorization_view.id",
	RmaNumber:      "return_merchandise_authorization_view.rma_number",
	RmaDate:        "return_merchandise_authorization_view.rma_date",
	TotalValueGen:  "return_merchandise_authorization_view.total_value_gen",
	ReceivedBy:     "return_merchandise_authorization_view.received_by",
	Notes:          "return_merchandise_authorization_view.notes",
	CreatedAt:      "return_merchandise_authorization_view.created_at",
	UpdatedAt:      "return_merchandise_authorization_view.updated_at",
	DeletedAt:      "return_merchandise_authorization_view.deleted_at",
	ReceivedByInfo: "return_merchandise_authorization_view.received_by_info",
	Items:          "return_merchandise_authorization_view.items",
}

// Generated where

var ReturnMerchandiseAuthorizationViewWhere = struct {
	ID             whereHelpernull_Int
	RmaNumber      whereHelpernull_String
	RmaDate        whereHelpernull_Time
	TotalValueGen  whereHelpertypes_NullDecimal
	ReceivedBy     whereHelpernull_Int
	Notes          whereHelpernull_String
	CreatedAt      whereHelpernull_Time
	UpdatedAt      whereHelpernull_Time
	DeletedAt      whereHelpernull_Time
	ReceivedByInfo whereHelpernull_JSON
	Items          whereHelpernull_JSON
}{
	ID:             whereHelpernull_Int{field: "\"inventory\".\"return_merchandise_authorization_view\".\"id\""},
	RmaNumber:      whereHelpernull_String{field: "\"inventory\".\"return_merchandise_authorization_view\".\"rma_number\""},
	RmaDate:        whereHelpernull_Time{field: "\"inventory\".\"return_merchandise_authorization_view\".\"rma_date\""},
	TotalValueGen:  whereHelpertypes_NullDecimal{field: "\"inventory\".\"return_merchandise_authorization_view\".\"total_value_gen\""},
	ReceivedBy:     whereHelpernull_Int{field: "\"inventory\".\"return_merchandise_authorization_view\".\"received_by\""},
	Notes:          whereHelpernull_String{field: "\"inventory\".\"return_merchandise_authorization_view\".\"notes\""},
	CreatedAt:      whereHelpernull_Time{field: "\"inventory\".\"return_merchandise_authorization_view\".\"created_at\""},
	UpdatedAt:      whereHelpernull_Time{field: "\"inventory\".\"return_merchandise_authorization_view\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"inventory\".\"return_merchandise_authorization_view\".\"deleted_at\""},
	ReceivedByInfo: whereHelpernull_JSON{field: "\"inventory\".\"return_merchandise_authorization_view\".\"received_by_info\""},
	Items:          whereHelpernull_JSON{field: "\"inventory\".\"return_merchandise_authorization_view\".\"items\""},
}

var (
	returnMerchandiseAuthorizationViewAllColumns            = []string{"id", "rma_number", "rma_date", "total_value_gen", "received_by", "notes", "created_at", "updated_at", "deleted_at", "received_by_info", "items"}
	returnMerchandiseAuthorizationViewColumnsWithoutDefault = []string{}
	returnMerchandiseAuthorizationViewColumnsWithDefault    = []string{"id", "rma_number", "rma_date", "total_value_gen", "received_by", "notes", "created_at", "updated_at", "deleted_at", "received_by_info", "items"}
	returnMerchandiseAuthorizationViewPrimaryKeyColumns     = []string{}
	returnMerchandiseAuthorizationViewGeneratedColumns      = []string{}
)

type (
	// ReturnMerchandiseAuthorizationViewSlice is an alias for a slice of pointers to ReturnMerchandiseAuthorizationView.
	// This should almost always be used instead of []ReturnMerchandiseAuthorizationView.
	ReturnMerchandiseAuthorizationViewSlice []*ReturnMerchandiseAuthorizationView
	// ReturnMerchandiseAuthorizationViewHook is the signature for custom ReturnMerchandiseAuthorizationView hook methods
	ReturnMerchandiseAuthorizationViewHook func(context.Context, boil.ContextExecutor, *ReturnMerchandiseAuthorizationView) error

	returnMerchandiseAuthorizationViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	returnMerchandiseAuthorizationViewType           = reflect.TypeOf(&ReturnMerchandiseAuthorizationView{})
	returnMerchandiseAuthorizationViewMapping        = queries.MakeStructMapping(returnMerchandiseAuthorizationViewType)
	returnMerchandiseAuthorizationViewInsertCacheMut sync.RWMutex
	returnMerchandiseAuthorizationViewInsertCache    = make(map[string]insertCache)
	returnMerchandiseAuthorizationViewUpdateCacheMut sync.RWMutex
	returnMerchandiseAuthorizationViewUpdateCache    = make(map[string]updateCache)
	returnMerchandiseAuthorizationViewUpsertCacheMut sync.RWMutex
	returnMerchandiseAuthorizationViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var returnMerchandiseAuthorizationViewAfterSelectMu sync.Mutex
var returnMerchandiseAuthorizationViewAfterSelectHooks []ReturnMerchandiseAuthorizationViewHook

var returnMerchandiseAuthorizationViewBeforeInsertMu sync.Mutex
var returnMerchandiseAuthorizationViewBeforeInsertHooks []ReturnMerchandiseAuthorizationViewHook
var returnMerchandiseAuthorizationViewAfterInsertMu sync.Mutex
var returnMerchandiseAuthorizationViewAfterInsertHooks []ReturnMerchandiseAuthorizationViewHook

var returnMerchandiseAuthorizationViewBeforeUpsertMu sync.Mutex
var returnMerchandiseAuthorizationViewBeforeUpsertHooks []ReturnMerchandiseAuthorizationViewHook
var returnMerchandiseAuthorizationViewAfterUpsertMu sync.Mutex
var returnMerchandiseAuthorizationViewAfterUpsertHooks []ReturnMerchandiseAuthorizationViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReturnMerchandiseAuthorizationView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReturnMerchandiseAuthorizationView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReturnMerchandiseAuthorizationView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReturnMerchandiseAuthorizationView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReturnMerchandiseAuthorizationView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReturnMerchandiseAuthorizationViewHook registers your hook function for all future operations.
func AddReturnMerchandiseAuthorizationViewHook(hookPoint boil.HookPoint, returnMerchandiseAuthorizationViewHook ReturnMerchandiseAuthorizationViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		returnMerchandiseAuthorizationViewAfterSelectMu.Lock()
		returnMerchandiseAuthorizationViewAfterSelectHooks = append(returnMerchandiseAuthorizationViewAfterSelectHooks, returnMerchandiseAuthorizationViewHook)
		returnMerchandiseAuthorizationViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		returnMerchandiseAuthorizationViewBeforeInsertMu.Lock()
		returnMerchandiseAuthorizationViewBeforeInsertHooks = append(returnMerchandiseAuthorizationViewBeforeInsertHooks, returnMerchandiseAuthorizationViewHook)
		returnMerchandiseAuthorizationViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		returnMerchandiseAuthorizationViewAfterInsertMu.Lock()
		returnMerchandiseAuthorizationViewAfterInsertHooks = append(returnMerchandiseAuthorizationViewAfterInsertHooks, returnMerchandiseAuthorizationViewHook)
		returnMerchandiseAuthorizationViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		returnMerchandiseAuthorizationViewBeforeUpsertMu.Lock()
		returnMerchandiseAuthorizationViewBeforeUpsertHooks = append(returnMerchandiseAuthorizationViewBeforeUpsertHooks, returnMerchandiseAuthorizationViewHook)
		returnMerchandiseAuthorizationViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		returnMerchandiseAuthorizationViewAfterUpsertMu.Lock()
		returnMerchandiseAuthorizationViewAfterUpsertHooks = append(returnMerchandiseAuthorizationViewAfterUpsertHooks, returnMerchandiseAuthorizationViewHook)
		returnMerchandiseAuthorizationViewAfterUpsertMu.Unlock()
	}
}

// One returns a single returnMerchandiseAuthorizationView record from the query.
func (q returnMerchandiseAuthorizationViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReturnMerchandiseAuthorizationView, error) {
	o := &ReturnMerchandiseAuthorizationView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: failed to execute a one query for return_merchandise_authorization_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReturnMerchandiseAuthorizationView records from the query.
func (q returnMerchandiseAuthorizationViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReturnMerchandiseAuthorizationViewSlice, error) {
	var o []*ReturnMerchandiseAuthorizationView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "inventory: failed to assign all query results to ReturnMerchandiseAuthorizationView slice")
	}

	if len(returnMerchandiseAuthorizationViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReturnMerchandiseAuthorizationView records in the query.
func (q returnMerchandiseAuthorizationViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to count return_merchandise_authorization_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q returnMerchandiseAuthorizationViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "inventory: failed to check if return_merchandise_authorization_view exists")
	}

	return count > 0, nil
}

// ReturnMerchandiseAuthorizationViews retrieves all the records using an executor.
func ReturnMerchandiseAuthorizationViews(mods ...qm.QueryMod) returnMerchandiseAuthorizationViewQuery {
	mods = append(mods, qm.From("\"inventory\".\"return_merchandise_authorization_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"inventory\".\"return_merchandise_authorization_view\".*"})
	}

	return returnMerchandiseAuthorizationViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReturnMerchandiseAuthorizationView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("inventory: no return_merchandise_authorization_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(returnMerchandiseAuthorizationViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	returnMerchandiseAuthorizationViewInsertCacheMut.RLock()
	cache, cached := returnMerchandiseAuthorizationViewInsertCache[key]
	returnMerchandiseAuthorizationViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			returnMerchandiseAuthorizationViewAllColumns,
			returnMerchandiseAuthorizationViewColumnsWithDefault,
			returnMerchandiseAuthorizationViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(returnMerchandiseAuthorizationViewType, returnMerchandiseAuthorizationViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(returnMerchandiseAuthorizationViewType, returnMerchandiseAuthorizationViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inventory\".\"return_merchandise_authorization_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inventory\".\"return_merchandise_authorization_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "inventory: unable to insert into return_merchandise_authorization_view")
	}

	if !cached {
		returnMerchandiseAuthorizationViewInsertCacheMut.Lock()
		returnMerchandiseAuthorizationViewInsertCache[key] = cache
		returnMerchandiseAuthorizationViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReturnMerchandiseAuthorizationView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("inventory: no return_merchandise_authorization_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(returnMerchandiseAuthorizationViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	returnMerchandiseAuthorizationViewUpsertCacheMut.RLock()
	cache, cached := returnMerchandiseAuthorizationViewUpsertCache[key]
	returnMerchandiseAuthorizationViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			returnMerchandiseAuthorizationViewAllColumns,
			returnMerchandiseAuthorizationViewColumnsWithDefault,
			returnMerchandiseAuthorizationViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			returnMerchandiseAuthorizationViewAllColumns,
			returnMerchandiseAuthorizationViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("inventory: unable to upsert return_merchandise_authorization_view, could not build update column list")
		}

		ret := strmangle.SetComplement(returnMerchandiseAuthorizationViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(returnMerchandiseAuthorizationViewPrimaryKeyColumns) == 0 {
				return errors.New("inventory: unable to upsert return_merchandise_authorization_view, could not build conflict column list")
			}

			conflict = make([]string, len(returnMerchandiseAuthorizationViewPrimaryKeyColumns))
			copy(conflict, returnMerchandiseAuthorizationViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inventory\".\"return_merchandise_authorization_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(returnMerchandiseAuthorizationViewType, returnMerchandiseAuthorizationViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(returnMerchandiseAuthorizationViewType, returnMerchandiseAuthorizationViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "inventory: unable to upsert return_merchandise_authorization_view")
	}

	if !cached {
		returnMerchandiseAuthorizationViewUpsertCacheMut.Lock()
		returnMerchandiseAuthorizationViewUpsertCache[key] = cache
		returnMerchandiseAuthorizationViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
