// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package inventory

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// GoodsIssueNoteItemView is an object representing the database table.
type GoodsIssueNoteItemView struct {
	ID            null.Int          `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	GinID         null.Int          `boil:"gin_id" json:"gin_id,omitempty" toml:"gin_id" yaml:"gin_id,omitempty"`
	InventoryID   null.Int          `boil:"inventory_id" json:"inventory_id,omitempty" toml:"inventory_id" yaml:"inventory_id,omitempty"`
	Quantity      types.NullDecimal `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	UnitValue     types.NullDecimal `boil:"unit_value" json:"unit_value,omitempty" toml:"unit_value" yaml:"unit_value,omitempty"`
	TotalValueGen types.NullDecimal `boil:"total_value_gen" json:"total_value_gen,omitempty" toml:"total_value_gen" yaml:"total_value_gen,omitempty"`
	CreatedAt     null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt     null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Inventory     null.JSON         `boil:"inventory" json:"inventory,omitempty" toml:"inventory" yaml:"inventory,omitempty"`
}

var GoodsIssueNoteItemViewColumns = struct {
	ID            string
	GinID         string
	InventoryID   string
	Quantity      string
	UnitValue     string
	TotalValueGen string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	Inventory     string
}{
	ID:            "id",
	GinID:         "gin_id",
	InventoryID:   "inventory_id",
	Quantity:      "quantity",
	UnitValue:     "unit_value",
	TotalValueGen: "total_value_gen",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
	Inventory:     "inventory",
}

var GoodsIssueNoteItemViewTableColumns = struct {
	ID            string
	GinID         string
	InventoryID   string
	Quantity      string
	UnitValue     string
	TotalValueGen string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	Inventory     string
}{
	ID:            "goods_issue_note_item_view.id",
	GinID:         "goods_issue_note_item_view.gin_id",
	InventoryID:   "goods_issue_note_item_view.inventory_id",
	Quantity:      "goods_issue_note_item_view.quantity",
	UnitValue:     "goods_issue_note_item_view.unit_value",
	TotalValueGen: "goods_issue_note_item_view.total_value_gen",
	CreatedAt:     "goods_issue_note_item_view.created_at",
	UpdatedAt:     "goods_issue_note_item_view.updated_at",
	DeletedAt:     "goods_issue_note_item_view.deleted_at",
	Inventory:     "goods_issue_note_item_view.inventory",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GoodsIssueNoteItemViewWhere = struct {
	ID            whereHelpernull_Int
	GinID         whereHelpernull_Int
	InventoryID   whereHelpernull_Int
	Quantity      whereHelpertypes_NullDecimal
	UnitValue     whereHelpertypes_NullDecimal
	TotalValueGen whereHelpertypes_NullDecimal
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
	DeletedAt     whereHelpernull_Time
	Inventory     whereHelpernull_JSON
}{
	ID:            whereHelpernull_Int{field: "\"inventory\".\"goods_issue_note_item_view\".\"id\""},
	GinID:         whereHelpernull_Int{field: "\"inventory\".\"goods_issue_note_item_view\".\"gin_id\""},
	InventoryID:   whereHelpernull_Int{field: "\"inventory\".\"goods_issue_note_item_view\".\"inventory_id\""},
	Quantity:      whereHelpertypes_NullDecimal{field: "\"inventory\".\"goods_issue_note_item_view\".\"quantity\""},
	UnitValue:     whereHelpertypes_NullDecimal{field: "\"inventory\".\"goods_issue_note_item_view\".\"unit_value\""},
	TotalValueGen: whereHelpertypes_NullDecimal{field: "\"inventory\".\"goods_issue_note_item_view\".\"total_value_gen\""},
	CreatedAt:     whereHelpernull_Time{field: "\"inventory\".\"goods_issue_note_item_view\".\"created_at\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"inventory\".\"goods_issue_note_item_view\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"inventory\".\"goods_issue_note_item_view\".\"deleted_at\""},
	Inventory:     whereHelpernull_JSON{field: "\"inventory\".\"goods_issue_note_item_view\".\"inventory\""},
}

var (
	goodsIssueNoteItemViewAllColumns            = []string{"id", "gin_id", "inventory_id", "quantity", "unit_value", "total_value_gen", "created_at", "updated_at", "deleted_at", "inventory"}
	goodsIssueNoteItemViewColumnsWithoutDefault = []string{}
	goodsIssueNoteItemViewColumnsWithDefault    = []string{"id", "gin_id", "inventory_id", "quantity", "unit_value", "total_value_gen", "created_at", "updated_at", "deleted_at", "inventory"}
	goodsIssueNoteItemViewPrimaryKeyColumns     = []string{}
	goodsIssueNoteItemViewGeneratedColumns      = []string{}
)

type (
	// GoodsIssueNoteItemViewSlice is an alias for a slice of pointers to GoodsIssueNoteItemView.
	// This should almost always be used instead of []GoodsIssueNoteItemView.
	GoodsIssueNoteItemViewSlice []*GoodsIssueNoteItemView
	// GoodsIssueNoteItemViewHook is the signature for custom GoodsIssueNoteItemView hook methods
	GoodsIssueNoteItemViewHook func(context.Context, boil.ContextExecutor, *GoodsIssueNoteItemView) error

	goodsIssueNoteItemViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goodsIssueNoteItemViewType           = reflect.TypeOf(&GoodsIssueNoteItemView{})
	goodsIssueNoteItemViewMapping        = queries.MakeStructMapping(goodsIssueNoteItemViewType)
	goodsIssueNoteItemViewInsertCacheMut sync.RWMutex
	goodsIssueNoteItemViewInsertCache    = make(map[string]insertCache)
	goodsIssueNoteItemViewUpdateCacheMut sync.RWMutex
	goodsIssueNoteItemViewUpdateCache    = make(map[string]updateCache)
	goodsIssueNoteItemViewUpsertCacheMut sync.RWMutex
	goodsIssueNoteItemViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var goodsIssueNoteItemViewAfterSelectMu sync.Mutex
var goodsIssueNoteItemViewAfterSelectHooks []GoodsIssueNoteItemViewHook

var goodsIssueNoteItemViewBeforeInsertMu sync.Mutex
var goodsIssueNoteItemViewBeforeInsertHooks []GoodsIssueNoteItemViewHook
var goodsIssueNoteItemViewAfterInsertMu sync.Mutex
var goodsIssueNoteItemViewAfterInsertHooks []GoodsIssueNoteItemViewHook

var goodsIssueNoteItemViewBeforeUpsertMu sync.Mutex
var goodsIssueNoteItemViewBeforeUpsertHooks []GoodsIssueNoteItemViewHook
var goodsIssueNoteItemViewAfterUpsertMu sync.Mutex
var goodsIssueNoteItemViewAfterUpsertHooks []GoodsIssueNoteItemViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoodsIssueNoteItemView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoodsIssueNoteItemView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoodsIssueNoteItemView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoodsIssueNoteItemView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoodsIssueNoteItemView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoodsIssueNoteItemViewHook registers your hook function for all future operations.
func AddGoodsIssueNoteItemViewHook(hookPoint boil.HookPoint, goodsIssueNoteItemViewHook GoodsIssueNoteItemViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goodsIssueNoteItemViewAfterSelectMu.Lock()
		goodsIssueNoteItemViewAfterSelectHooks = append(goodsIssueNoteItemViewAfterSelectHooks, goodsIssueNoteItemViewHook)
		goodsIssueNoteItemViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goodsIssueNoteItemViewBeforeInsertMu.Lock()
		goodsIssueNoteItemViewBeforeInsertHooks = append(goodsIssueNoteItemViewBeforeInsertHooks, goodsIssueNoteItemViewHook)
		goodsIssueNoteItemViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goodsIssueNoteItemViewAfterInsertMu.Lock()
		goodsIssueNoteItemViewAfterInsertHooks = append(goodsIssueNoteItemViewAfterInsertHooks, goodsIssueNoteItemViewHook)
		goodsIssueNoteItemViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		goodsIssueNoteItemViewBeforeUpsertMu.Lock()
		goodsIssueNoteItemViewBeforeUpsertHooks = append(goodsIssueNoteItemViewBeforeUpsertHooks, goodsIssueNoteItemViewHook)
		goodsIssueNoteItemViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goodsIssueNoteItemViewAfterUpsertMu.Lock()
		goodsIssueNoteItemViewAfterUpsertHooks = append(goodsIssueNoteItemViewAfterUpsertHooks, goodsIssueNoteItemViewHook)
		goodsIssueNoteItemViewAfterUpsertMu.Unlock()
	}
}

// One returns a single goodsIssueNoteItemView record from the query.
func (q goodsIssueNoteItemViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoodsIssueNoteItemView, error) {
	o := &GoodsIssueNoteItemView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: failed to execute a one query for goods_issue_note_item_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoodsIssueNoteItemView records from the query.
func (q goodsIssueNoteItemViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoodsIssueNoteItemViewSlice, error) {
	var o []*GoodsIssueNoteItemView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "inventory: failed to assign all query results to GoodsIssueNoteItemView slice")
	}

	if len(goodsIssueNoteItemViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoodsIssueNoteItemView records in the query.
func (q goodsIssueNoteItemViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to count goods_issue_note_item_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goodsIssueNoteItemViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "inventory: failed to check if goods_issue_note_item_view exists")
	}

	return count > 0, nil
}

// GoodsIssueNoteItemViews retrieves all the records using an executor.
func GoodsIssueNoteItemViews(mods ...qm.QueryMod) goodsIssueNoteItemViewQuery {
	mods = append(mods, qm.From("\"inventory\".\"goods_issue_note_item_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"inventory\".\"goods_issue_note_item_view\".*"})
	}

	return goodsIssueNoteItemViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoodsIssueNoteItemView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("inventory: no goods_issue_note_item_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsIssueNoteItemViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goodsIssueNoteItemViewInsertCacheMut.RLock()
	cache, cached := goodsIssueNoteItemViewInsertCache[key]
	goodsIssueNoteItemViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goodsIssueNoteItemViewAllColumns,
			goodsIssueNoteItemViewColumnsWithDefault,
			goodsIssueNoteItemViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goodsIssueNoteItemViewType, goodsIssueNoteItemViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goodsIssueNoteItemViewType, goodsIssueNoteItemViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inventory\".\"goods_issue_note_item_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inventory\".\"goods_issue_note_item_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "inventory: unable to insert into goods_issue_note_item_view")
	}

	if !cached {
		goodsIssueNoteItemViewInsertCacheMut.Lock()
		goodsIssueNoteItemViewInsertCache[key] = cache
		goodsIssueNoteItemViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoodsIssueNoteItemView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("inventory: no goods_issue_note_item_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsIssueNoteItemViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goodsIssueNoteItemViewUpsertCacheMut.RLock()
	cache, cached := goodsIssueNoteItemViewUpsertCache[key]
	goodsIssueNoteItemViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goodsIssueNoteItemViewAllColumns,
			goodsIssueNoteItemViewColumnsWithDefault,
			goodsIssueNoteItemViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goodsIssueNoteItemViewAllColumns,
			goodsIssueNoteItemViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("inventory: unable to upsert goods_issue_note_item_view, could not build update column list")
		}

		ret := strmangle.SetComplement(goodsIssueNoteItemViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goodsIssueNoteItemViewPrimaryKeyColumns) == 0 {
				return errors.New("inventory: unable to upsert goods_issue_note_item_view, could not build conflict column list")
			}

			conflict = make([]string, len(goodsIssueNoteItemViewPrimaryKeyColumns))
			copy(conflict, goodsIssueNoteItemViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inventory\".\"goods_issue_note_item_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goodsIssueNoteItemViewType, goodsIssueNoteItemViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goodsIssueNoteItemViewType, goodsIssueNoteItemViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "inventory: unable to upsert goods_issue_note_item_view")
	}

	if !cached {
		goodsIssueNoteItemViewUpsertCacheMut.Lock()
		goodsIssueNoteItemViewUpsertCache[key] = cache
		goodsIssueNoteItemViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
