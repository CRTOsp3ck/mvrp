// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package inventory

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("inventory: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type InventoryTransactionType string

// Enum values for InventoryTransactionType
const (
	InventoryTransactionTypeSale                   InventoryTransactionType = "sale"
	InventoryTransactionTypePurchase               InventoryTransactionType = "purchase"
	InventoryTransactionTypeTransfer               InventoryTransactionType = "transfer"
	InventoryTransactionTypeIssue                  InventoryTransactionType = "issue"
	InventoryTransactionTypeReturn                 InventoryTransactionType = "return"
	InventoryTransactionTypeShipping               InventoryTransactionType = "shipping"
	InventoryTransactionTypeStockCount             InventoryTransactionType = "stock_count"
	InventoryTransactionTypeSaleCancellation       InventoryTransactionType = "sale_cancellation"
	InventoryTransactionTypePurchaseCancellation   InventoryTransactionType = "purchase_cancellation"
	InventoryTransactionTypeTransferCancellation   InventoryTransactionType = "transfer_cancellation"
	InventoryTransactionTypeIssueCancellation      InventoryTransactionType = "issue_cancellation"
	InventoryTransactionTypeReturnCancellation     InventoryTransactionType = "return_cancellation"
	InventoryTransactionTypeShippingCancellation   InventoryTransactionType = "shipping_cancellation"
	InventoryTransactionTypeStockCountCancellation InventoryTransactionType = "stock_count_cancellation"
	InventoryTransactionTypeSaleAdjustment         InventoryTransactionType = "sale_adjustment"
	InventoryTransactionTypePurchaseAdjustment     InventoryTransactionType = "purchase_adjustment"
	InventoryTransactionTypeTransferAdjustment     InventoryTransactionType = "transfer_adjustment"
	InventoryTransactionTypeIssueAdjustment        InventoryTransactionType = "issue_adjustment"
	InventoryTransactionTypeReturnAdjustment       InventoryTransactionType = "return_adjustment"
	InventoryTransactionTypeShippingAdjustment     InventoryTransactionType = "shipping_adjustment"
	InventoryTransactionTypeStockCountAdjustment   InventoryTransactionType = "stock_count_adjustment"
	InventoryTransactionTypeGeneralAdjustment      InventoryTransactionType = "general_adjustment"
)

func AllInventoryTransactionType() []InventoryTransactionType {
	return []InventoryTransactionType{
		InventoryTransactionTypeSale,
		InventoryTransactionTypePurchase,
		InventoryTransactionTypeTransfer,
		InventoryTransactionTypeIssue,
		InventoryTransactionTypeReturn,
		InventoryTransactionTypeShipping,
		InventoryTransactionTypeStockCount,
		InventoryTransactionTypeSaleCancellation,
		InventoryTransactionTypePurchaseCancellation,
		InventoryTransactionTypeTransferCancellation,
		InventoryTransactionTypeIssueCancellation,
		InventoryTransactionTypeReturnCancellation,
		InventoryTransactionTypeShippingCancellation,
		InventoryTransactionTypeStockCountCancellation,
		InventoryTransactionTypeSaleAdjustment,
		InventoryTransactionTypePurchaseAdjustment,
		InventoryTransactionTypeTransferAdjustment,
		InventoryTransactionTypeIssueAdjustment,
		InventoryTransactionTypeReturnAdjustment,
		InventoryTransactionTypeShippingAdjustment,
		InventoryTransactionTypeStockCountAdjustment,
		InventoryTransactionTypeGeneralAdjustment,
	}
}

func (e InventoryTransactionType) IsValid() error {
	switch e {
	case InventoryTransactionTypeSale, InventoryTransactionTypePurchase, InventoryTransactionTypeTransfer, InventoryTransactionTypeIssue, InventoryTransactionTypeReturn, InventoryTransactionTypeShipping, InventoryTransactionTypeStockCount, InventoryTransactionTypeSaleCancellation, InventoryTransactionTypePurchaseCancellation, InventoryTransactionTypeTransferCancellation, InventoryTransactionTypeIssueCancellation, InventoryTransactionTypeReturnCancellation, InventoryTransactionTypeShippingCancellation, InventoryTransactionTypeStockCountCancellation, InventoryTransactionTypeSaleAdjustment, InventoryTransactionTypePurchaseAdjustment, InventoryTransactionTypeTransferAdjustment, InventoryTransactionTypeIssueAdjustment, InventoryTransactionTypeReturnAdjustment, InventoryTransactionTypeShippingAdjustment, InventoryTransactionTypeStockCountAdjustment, InventoryTransactionTypeGeneralAdjustment:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e InventoryTransactionType) String() string {
	return string(e)
}

func (e InventoryTransactionType) Ordinal() int {
	switch e {
	case InventoryTransactionTypeSale:
		return 0
	case InventoryTransactionTypePurchase:
		return 1
	case InventoryTransactionTypeTransfer:
		return 2
	case InventoryTransactionTypeIssue:
		return 3
	case InventoryTransactionTypeReturn:
		return 4
	case InventoryTransactionTypeShipping:
		return 5
	case InventoryTransactionTypeStockCount:
		return 6
	case InventoryTransactionTypeSaleCancellation:
		return 7
	case InventoryTransactionTypePurchaseCancellation:
		return 8
	case InventoryTransactionTypeTransferCancellation:
		return 9
	case InventoryTransactionTypeIssueCancellation:
		return 10
	case InventoryTransactionTypeReturnCancellation:
		return 11
	case InventoryTransactionTypeShippingCancellation:
		return 12
	case InventoryTransactionTypeStockCountCancellation:
		return 13
	case InventoryTransactionTypeSaleAdjustment:
		return 14
	case InventoryTransactionTypePurchaseAdjustment:
		return 15
	case InventoryTransactionTypeTransferAdjustment:
		return 16
	case InventoryTransactionTypeIssueAdjustment:
		return 17
	case InventoryTransactionTypeReturnAdjustment:
		return 18
	case InventoryTransactionTypeShippingAdjustment:
		return 19
	case InventoryTransactionTypeStockCountAdjustment:
		return 20
	case InventoryTransactionTypeGeneralAdjustment:
		return 21

	default:
		panic(errors.New("enum is not valid"))
	}
}
