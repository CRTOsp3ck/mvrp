// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package inventory

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// StockCountSheetView is an object representing the database table.
type StockCountSheetView struct {
	ID                  null.Int          `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	SCSNumber           null.String       `boil:"scs_number" json:"scs_number,omitempty" toml:"scs_number" yaml:"scs_number,omitempty"`
	InventoryID         null.Int          `boil:"inventory_id" json:"inventory_id,omitempty" toml:"inventory_id" yaml:"inventory_id,omitempty"`
	CountDate           null.Time         `boil:"count_date" json:"count_date,omitempty" toml:"count_date" yaml:"count_date,omitempty"`
	CountedByEmployeeID null.Int          `boil:"counted_by_employee_id" json:"counted_by_employee_id,omitempty" toml:"counted_by_employee_id" yaml:"counted_by_employee_id,omitempty"`
	TotalQuantity       types.NullDecimal `boil:"total_quantity" json:"total_quantity,omitempty" toml:"total_quantity" yaml:"total_quantity,omitempty"`
	DiscrepanciesGen    types.NullDecimal `boil:"discrepancies_gen" json:"discrepancies_gen,omitempty" toml:"discrepancies_gen" yaml:"discrepancies_gen,omitempty"`
	Notes               null.String       `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	CreatedAt           null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt           null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt           null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Inventory           null.JSON         `boil:"inventory" json:"inventory,omitempty" toml:"inventory" yaml:"inventory,omitempty"`
	CountedByInfo       null.JSON         `boil:"counted_by_info" json:"counted_by_info,omitempty" toml:"counted_by_info" yaml:"counted_by_info,omitempty"`
}

var StockCountSheetViewColumns = struct {
	ID                  string
	SCSNumber           string
	InventoryID         string
	CountDate           string
	CountedByEmployeeID string
	TotalQuantity       string
	DiscrepanciesGen    string
	Notes               string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
	Inventory           string
	CountedByInfo       string
}{
	ID:                  "id",
	SCSNumber:           "scs_number",
	InventoryID:         "inventory_id",
	CountDate:           "count_date",
	CountedByEmployeeID: "counted_by_employee_id",
	TotalQuantity:       "total_quantity",
	DiscrepanciesGen:    "discrepancies_gen",
	Notes:               "notes",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
	Inventory:           "inventory",
	CountedByInfo:       "counted_by_info",
}

var StockCountSheetViewTableColumns = struct {
	ID                  string
	SCSNumber           string
	InventoryID         string
	CountDate           string
	CountedByEmployeeID string
	TotalQuantity       string
	DiscrepanciesGen    string
	Notes               string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
	Inventory           string
	CountedByInfo       string
}{
	ID:                  "stock_count_sheet_view.id",
	SCSNumber:           "stock_count_sheet_view.scs_number",
	InventoryID:         "stock_count_sheet_view.inventory_id",
	CountDate:           "stock_count_sheet_view.count_date",
	CountedByEmployeeID: "stock_count_sheet_view.counted_by_employee_id",
	TotalQuantity:       "stock_count_sheet_view.total_quantity",
	DiscrepanciesGen:    "stock_count_sheet_view.discrepancies_gen",
	Notes:               "stock_count_sheet_view.notes",
	CreatedAt:           "stock_count_sheet_view.created_at",
	UpdatedAt:           "stock_count_sheet_view.updated_at",
	DeletedAt:           "stock_count_sheet_view.deleted_at",
	Inventory:           "stock_count_sheet_view.inventory",
	CountedByInfo:       "stock_count_sheet_view.counted_by_info",
}

// Generated where

var StockCountSheetViewWhere = struct {
	ID                  whereHelpernull_Int
	SCSNumber           whereHelpernull_String
	InventoryID         whereHelpernull_Int
	CountDate           whereHelpernull_Time
	CountedByEmployeeID whereHelpernull_Int
	TotalQuantity       whereHelpertypes_NullDecimal
	DiscrepanciesGen    whereHelpertypes_NullDecimal
	Notes               whereHelpernull_String
	CreatedAt           whereHelpernull_Time
	UpdatedAt           whereHelpernull_Time
	DeletedAt           whereHelpernull_Time
	Inventory           whereHelpernull_JSON
	CountedByInfo       whereHelpernull_JSON
}{
	ID:                  whereHelpernull_Int{field: "\"inventory\".\"stock_count_sheet_view\".\"id\""},
	SCSNumber:           whereHelpernull_String{field: "\"inventory\".\"stock_count_sheet_view\".\"scs_number\""},
	InventoryID:         whereHelpernull_Int{field: "\"inventory\".\"stock_count_sheet_view\".\"inventory_id\""},
	CountDate:           whereHelpernull_Time{field: "\"inventory\".\"stock_count_sheet_view\".\"count_date\""},
	CountedByEmployeeID: whereHelpernull_Int{field: "\"inventory\".\"stock_count_sheet_view\".\"counted_by_employee_id\""},
	TotalQuantity:       whereHelpertypes_NullDecimal{field: "\"inventory\".\"stock_count_sheet_view\".\"total_quantity\""},
	DiscrepanciesGen:    whereHelpertypes_NullDecimal{field: "\"inventory\".\"stock_count_sheet_view\".\"discrepancies_gen\""},
	Notes:               whereHelpernull_String{field: "\"inventory\".\"stock_count_sheet_view\".\"notes\""},
	CreatedAt:           whereHelpernull_Time{field: "\"inventory\".\"stock_count_sheet_view\".\"created_at\""},
	UpdatedAt:           whereHelpernull_Time{field: "\"inventory\".\"stock_count_sheet_view\".\"updated_at\""},
	DeletedAt:           whereHelpernull_Time{field: "\"inventory\".\"stock_count_sheet_view\".\"deleted_at\""},
	Inventory:           whereHelpernull_JSON{field: "\"inventory\".\"stock_count_sheet_view\".\"inventory\""},
	CountedByInfo:       whereHelpernull_JSON{field: "\"inventory\".\"stock_count_sheet_view\".\"counted_by_info\""},
}

var (
	stockCountSheetViewAllColumns            = []string{"id", "scs_number", "inventory_id", "count_date", "counted_by_employee_id", "total_quantity", "discrepancies_gen", "notes", "created_at", "updated_at", "deleted_at", "inventory", "counted_by_info"}
	stockCountSheetViewColumnsWithoutDefault = []string{}
	stockCountSheetViewColumnsWithDefault    = []string{"id", "scs_number", "inventory_id", "count_date", "counted_by_employee_id", "total_quantity", "discrepancies_gen", "notes", "created_at", "updated_at", "deleted_at", "inventory", "counted_by_info"}
	stockCountSheetViewPrimaryKeyColumns     = []string{}
	stockCountSheetViewGeneratedColumns      = []string{}
)

type (
	// StockCountSheetViewSlice is an alias for a slice of pointers to StockCountSheetView.
	// This should almost always be used instead of []StockCountSheetView.
	StockCountSheetViewSlice []*StockCountSheetView
	// StockCountSheetViewHook is the signature for custom StockCountSheetView hook methods
	StockCountSheetViewHook func(context.Context, boil.ContextExecutor, *StockCountSheetView) error

	stockCountSheetViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stockCountSheetViewType           = reflect.TypeOf(&StockCountSheetView{})
	stockCountSheetViewMapping        = queries.MakeStructMapping(stockCountSheetViewType)
	stockCountSheetViewInsertCacheMut sync.RWMutex
	stockCountSheetViewInsertCache    = make(map[string]insertCache)
	stockCountSheetViewUpdateCacheMut sync.RWMutex
	stockCountSheetViewUpdateCache    = make(map[string]updateCache)
	stockCountSheetViewUpsertCacheMut sync.RWMutex
	stockCountSheetViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var stockCountSheetViewAfterSelectMu sync.Mutex
var stockCountSheetViewAfterSelectHooks []StockCountSheetViewHook

var stockCountSheetViewBeforeInsertMu sync.Mutex
var stockCountSheetViewBeforeInsertHooks []StockCountSheetViewHook
var stockCountSheetViewAfterInsertMu sync.Mutex
var stockCountSheetViewAfterInsertHooks []StockCountSheetViewHook

var stockCountSheetViewBeforeUpsertMu sync.Mutex
var stockCountSheetViewBeforeUpsertHooks []StockCountSheetViewHook
var stockCountSheetViewAfterUpsertMu sync.Mutex
var stockCountSheetViewAfterUpsertHooks []StockCountSheetViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StockCountSheetView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StockCountSheetView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StockCountSheetView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StockCountSheetView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StockCountSheetView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStockCountSheetViewHook registers your hook function for all future operations.
func AddStockCountSheetViewHook(hookPoint boil.HookPoint, stockCountSheetViewHook StockCountSheetViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		stockCountSheetViewAfterSelectMu.Lock()
		stockCountSheetViewAfterSelectHooks = append(stockCountSheetViewAfterSelectHooks, stockCountSheetViewHook)
		stockCountSheetViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		stockCountSheetViewBeforeInsertMu.Lock()
		stockCountSheetViewBeforeInsertHooks = append(stockCountSheetViewBeforeInsertHooks, stockCountSheetViewHook)
		stockCountSheetViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		stockCountSheetViewAfterInsertMu.Lock()
		stockCountSheetViewAfterInsertHooks = append(stockCountSheetViewAfterInsertHooks, stockCountSheetViewHook)
		stockCountSheetViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		stockCountSheetViewBeforeUpsertMu.Lock()
		stockCountSheetViewBeforeUpsertHooks = append(stockCountSheetViewBeforeUpsertHooks, stockCountSheetViewHook)
		stockCountSheetViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		stockCountSheetViewAfterUpsertMu.Lock()
		stockCountSheetViewAfterUpsertHooks = append(stockCountSheetViewAfterUpsertHooks, stockCountSheetViewHook)
		stockCountSheetViewAfterUpsertMu.Unlock()
	}
}

// One returns a single stockCountSheetView record from the query.
func (q stockCountSheetViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StockCountSheetView, error) {
	o := &StockCountSheetView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: failed to execute a one query for stock_count_sheet_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StockCountSheetView records from the query.
func (q stockCountSheetViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (StockCountSheetViewSlice, error) {
	var o []*StockCountSheetView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "inventory: failed to assign all query results to StockCountSheetView slice")
	}

	if len(stockCountSheetViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StockCountSheetView records in the query.
func (q stockCountSheetViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to count stock_count_sheet_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stockCountSheetViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "inventory: failed to check if stock_count_sheet_view exists")
	}

	return count > 0, nil
}

// StockCountSheetViews retrieves all the records using an executor.
func StockCountSheetViews(mods ...qm.QueryMod) stockCountSheetViewQuery {
	mods = append(mods, qm.From("\"inventory\".\"stock_count_sheet_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"inventory\".\"stock_count_sheet_view\".*"})
	}

	return stockCountSheetViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StockCountSheetView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("inventory: no stock_count_sheet_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockCountSheetViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stockCountSheetViewInsertCacheMut.RLock()
	cache, cached := stockCountSheetViewInsertCache[key]
	stockCountSheetViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stockCountSheetViewAllColumns,
			stockCountSheetViewColumnsWithDefault,
			stockCountSheetViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stockCountSheetViewType, stockCountSheetViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stockCountSheetViewType, stockCountSheetViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inventory\".\"stock_count_sheet_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inventory\".\"stock_count_sheet_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "inventory: unable to insert into stock_count_sheet_view")
	}

	if !cached {
		stockCountSheetViewInsertCacheMut.Lock()
		stockCountSheetViewInsertCache[key] = cache
		stockCountSheetViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StockCountSheetView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("inventory: no stock_count_sheet_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockCountSheetViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stockCountSheetViewUpsertCacheMut.RLock()
	cache, cached := stockCountSheetViewUpsertCache[key]
	stockCountSheetViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			stockCountSheetViewAllColumns,
			stockCountSheetViewColumnsWithDefault,
			stockCountSheetViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			stockCountSheetViewAllColumns,
			stockCountSheetViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("inventory: unable to upsert stock_count_sheet_view, could not build update column list")
		}

		ret := strmangle.SetComplement(stockCountSheetViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(stockCountSheetViewPrimaryKeyColumns) == 0 {
				return errors.New("inventory: unable to upsert stock_count_sheet_view, could not build conflict column list")
			}

			conflict = make([]string, len(stockCountSheetViewPrimaryKeyColumns))
			copy(conflict, stockCountSheetViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inventory\".\"stock_count_sheet_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(stockCountSheetViewType, stockCountSheetViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stockCountSheetViewType, stockCountSheetViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "inventory: unable to upsert stock_count_sheet_view")
	}

	if !cached {
		stockCountSheetViewUpsertCacheMut.Lock()
		stockCountSheetViewUpsertCache[key] = cache
		stockCountSheetViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
