// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package inventory

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// GoodsIssueNote is an object representing the database table.
type GoodsIssueNote struct {
	ID           int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	GinNumber    string        `boil:"gin_number" json:"gin_number" toml:"gin_number" yaml:"gin_number"`
	ReceipientID null.Int      `boil:"receipient_id" json:"receipient_id,omitempty" toml:"receipient_id" yaml:"receipient_id,omitempty"`
	IssueDate    null.Time     `boil:"issue_date" json:"issue_date,omitempty" toml:"issue_date" yaml:"issue_date,omitempty"`
	TotalValue   types.Decimal `boil:"total_value" json:"total_value" toml:"total_value" yaml:"total_value"`
	Notes        null.String   `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	CreatedAt    time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *goodsIssueNoteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L goodsIssueNoteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoodsIssueNoteColumns = struct {
	ID           string
	GinNumber    string
	ReceipientID string
	IssueDate    string
	TotalValue   string
	Notes        string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	GinNumber:    "gin_number",
	ReceipientID: "receipient_id",
	IssueDate:    "issue_date",
	TotalValue:   "total_value",
	Notes:        "notes",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

var GoodsIssueNoteTableColumns = struct {
	ID           string
	GinNumber    string
	ReceipientID string
	IssueDate    string
	TotalValue   string
	Notes        string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "goods_issue_note.id",
	GinNumber:    "goods_issue_note.gin_number",
	ReceipientID: "goods_issue_note.receipient_id",
	IssueDate:    "goods_issue_note.issue_date",
	TotalValue:   "goods_issue_note.total_value",
	Notes:        "goods_issue_note.notes",
	CreatedAt:    "goods_issue_note.created_at",
	UpdatedAt:    "goods_issue_note.updated_at",
	DeletedAt:    "goods_issue_note.deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var GoodsIssueNoteWhere = struct {
	ID           whereHelperint
	GinNumber    whereHelperstring
	ReceipientID whereHelpernull_Int
	IssueDate    whereHelpernull_Time
	TotalValue   whereHelpertypes_Decimal
	Notes        whereHelpernull_String
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperint{field: "\"inventory\".\"goods_issue_note\".\"id\""},
	GinNumber:    whereHelperstring{field: "\"inventory\".\"goods_issue_note\".\"gin_number\""},
	ReceipientID: whereHelpernull_Int{field: "\"inventory\".\"goods_issue_note\".\"receipient_id\""},
	IssueDate:    whereHelpernull_Time{field: "\"inventory\".\"goods_issue_note\".\"issue_date\""},
	TotalValue:   whereHelpertypes_Decimal{field: "\"inventory\".\"goods_issue_note\".\"total_value\""},
	Notes:        whereHelpernull_String{field: "\"inventory\".\"goods_issue_note\".\"notes\""},
	CreatedAt:    whereHelpertime_Time{field: "\"inventory\".\"goods_issue_note\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"inventory\".\"goods_issue_note\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"inventory\".\"goods_issue_note\".\"deleted_at\""},
}

// GoodsIssueNoteRels is where relationship names are stored.
var GoodsIssueNoteRels = struct {
	GinGoodsIssueNoteItems string
}{
	GinGoodsIssueNoteItems: "GinGoodsIssueNoteItems",
}

// goodsIssueNoteR is where relationships are stored.
type goodsIssueNoteR struct {
	GinGoodsIssueNoteItems GoodsIssueNoteItemSlice `boil:"GinGoodsIssueNoteItems" json:"GinGoodsIssueNoteItems" toml:"GinGoodsIssueNoteItems" yaml:"GinGoodsIssueNoteItems"`
}

// NewStruct creates a new relationship struct
func (*goodsIssueNoteR) NewStruct() *goodsIssueNoteR {
	return &goodsIssueNoteR{}
}

func (r *goodsIssueNoteR) GetGinGoodsIssueNoteItems() GoodsIssueNoteItemSlice {
	if r == nil {
		return nil
	}
	return r.GinGoodsIssueNoteItems
}

// goodsIssueNoteL is where Load methods for each relationship are stored.
type goodsIssueNoteL struct{}

var (
	goodsIssueNoteAllColumns            = []string{"id", "gin_number", "receipient_id", "issue_date", "total_value", "notes", "created_at", "updated_at", "deleted_at"}
	goodsIssueNoteColumnsWithoutDefault = []string{"id", "gin_number", "total_value", "created_at", "updated_at"}
	goodsIssueNoteColumnsWithDefault    = []string{"receipient_id", "issue_date", "notes", "deleted_at"}
	goodsIssueNotePrimaryKeyColumns     = []string{"id"}
	goodsIssueNoteGeneratedColumns      = []string{}
)

type (
	// GoodsIssueNoteSlice is an alias for a slice of pointers to GoodsIssueNote.
	// This should almost always be used instead of []GoodsIssueNote.
	GoodsIssueNoteSlice []*GoodsIssueNote
	// GoodsIssueNoteHook is the signature for custom GoodsIssueNote hook methods
	GoodsIssueNoteHook func(context.Context, boil.ContextExecutor, *GoodsIssueNote) error

	goodsIssueNoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goodsIssueNoteType                 = reflect.TypeOf(&GoodsIssueNote{})
	goodsIssueNoteMapping              = queries.MakeStructMapping(goodsIssueNoteType)
	goodsIssueNotePrimaryKeyMapping, _ = queries.BindMapping(goodsIssueNoteType, goodsIssueNoteMapping, goodsIssueNotePrimaryKeyColumns)
	goodsIssueNoteInsertCacheMut       sync.RWMutex
	goodsIssueNoteInsertCache          = make(map[string]insertCache)
	goodsIssueNoteUpdateCacheMut       sync.RWMutex
	goodsIssueNoteUpdateCache          = make(map[string]updateCache)
	goodsIssueNoteUpsertCacheMut       sync.RWMutex
	goodsIssueNoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var goodsIssueNoteAfterSelectMu sync.Mutex
var goodsIssueNoteAfterSelectHooks []GoodsIssueNoteHook

var goodsIssueNoteBeforeInsertMu sync.Mutex
var goodsIssueNoteBeforeInsertHooks []GoodsIssueNoteHook
var goodsIssueNoteAfterInsertMu sync.Mutex
var goodsIssueNoteAfterInsertHooks []GoodsIssueNoteHook

var goodsIssueNoteBeforeUpdateMu sync.Mutex
var goodsIssueNoteBeforeUpdateHooks []GoodsIssueNoteHook
var goodsIssueNoteAfterUpdateMu sync.Mutex
var goodsIssueNoteAfterUpdateHooks []GoodsIssueNoteHook

var goodsIssueNoteBeforeDeleteMu sync.Mutex
var goodsIssueNoteBeforeDeleteHooks []GoodsIssueNoteHook
var goodsIssueNoteAfterDeleteMu sync.Mutex
var goodsIssueNoteAfterDeleteHooks []GoodsIssueNoteHook

var goodsIssueNoteBeforeUpsertMu sync.Mutex
var goodsIssueNoteBeforeUpsertHooks []GoodsIssueNoteHook
var goodsIssueNoteAfterUpsertMu sync.Mutex
var goodsIssueNoteAfterUpsertHooks []GoodsIssueNoteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoodsIssueNote) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoodsIssueNote) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoodsIssueNote) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GoodsIssueNote) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GoodsIssueNote) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GoodsIssueNote) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GoodsIssueNote) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoodsIssueNote) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoodsIssueNote) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoodsIssueNoteHook registers your hook function for all future operations.
func AddGoodsIssueNoteHook(hookPoint boil.HookPoint, goodsIssueNoteHook GoodsIssueNoteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goodsIssueNoteAfterSelectMu.Lock()
		goodsIssueNoteAfterSelectHooks = append(goodsIssueNoteAfterSelectHooks, goodsIssueNoteHook)
		goodsIssueNoteAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goodsIssueNoteBeforeInsertMu.Lock()
		goodsIssueNoteBeforeInsertHooks = append(goodsIssueNoteBeforeInsertHooks, goodsIssueNoteHook)
		goodsIssueNoteBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goodsIssueNoteAfterInsertMu.Lock()
		goodsIssueNoteAfterInsertHooks = append(goodsIssueNoteAfterInsertHooks, goodsIssueNoteHook)
		goodsIssueNoteAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		goodsIssueNoteBeforeUpdateMu.Lock()
		goodsIssueNoteBeforeUpdateHooks = append(goodsIssueNoteBeforeUpdateHooks, goodsIssueNoteHook)
		goodsIssueNoteBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		goodsIssueNoteAfterUpdateMu.Lock()
		goodsIssueNoteAfterUpdateHooks = append(goodsIssueNoteAfterUpdateHooks, goodsIssueNoteHook)
		goodsIssueNoteAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		goodsIssueNoteBeforeDeleteMu.Lock()
		goodsIssueNoteBeforeDeleteHooks = append(goodsIssueNoteBeforeDeleteHooks, goodsIssueNoteHook)
		goodsIssueNoteBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		goodsIssueNoteAfterDeleteMu.Lock()
		goodsIssueNoteAfterDeleteHooks = append(goodsIssueNoteAfterDeleteHooks, goodsIssueNoteHook)
		goodsIssueNoteAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		goodsIssueNoteBeforeUpsertMu.Lock()
		goodsIssueNoteBeforeUpsertHooks = append(goodsIssueNoteBeforeUpsertHooks, goodsIssueNoteHook)
		goodsIssueNoteBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goodsIssueNoteAfterUpsertMu.Lock()
		goodsIssueNoteAfterUpsertHooks = append(goodsIssueNoteAfterUpsertHooks, goodsIssueNoteHook)
		goodsIssueNoteAfterUpsertMu.Unlock()
	}
}

// One returns a single goodsIssueNote record from the query.
func (q goodsIssueNoteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoodsIssueNote, error) {
	o := &GoodsIssueNote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: failed to execute a one query for goods_issue_note")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoodsIssueNote records from the query.
func (q goodsIssueNoteQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoodsIssueNoteSlice, error) {
	var o []*GoodsIssueNote

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "inventory: failed to assign all query results to GoodsIssueNote slice")
	}

	if len(goodsIssueNoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoodsIssueNote records in the query.
func (q goodsIssueNoteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to count goods_issue_note rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goodsIssueNoteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "inventory: failed to check if goods_issue_note exists")
	}

	return count > 0, nil
}

// GinGoodsIssueNoteItems retrieves all the goods_issue_note_item's GoodsIssueNoteItems with an executor via gin_id column.
func (o *GoodsIssueNote) GinGoodsIssueNoteItems(mods ...qm.QueryMod) goodsIssueNoteItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"inventory\".\"goods_issue_note_item\".\"gin_id\"=?", o.ID),
	)

	return GoodsIssueNoteItems(queryMods...)
}

// LoadGinGoodsIssueNoteItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (goodsIssueNoteL) LoadGinGoodsIssueNoteItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoodsIssueNote interface{}, mods queries.Applicator) error {
	var slice []*GoodsIssueNote
	var object *GoodsIssueNote

	if singular {
		var ok bool
		object, ok = maybeGoodsIssueNote.(*GoodsIssueNote)
		if !ok {
			object = new(GoodsIssueNote)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGoodsIssueNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGoodsIssueNote))
			}
		}
	} else {
		s, ok := maybeGoodsIssueNote.(*[]*GoodsIssueNote)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGoodsIssueNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGoodsIssueNote))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &goodsIssueNoteR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goodsIssueNoteR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`inventory.goods_issue_note_item`),
		qm.WhereIn(`inventory.goods_issue_note_item.gin_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load goods_issue_note_item")
	}

	var resultSlice []*GoodsIssueNoteItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice goods_issue_note_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on goods_issue_note_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for goods_issue_note_item")
	}

	if len(goodsIssueNoteItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GinGoodsIssueNoteItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &goodsIssueNoteItemR{}
			}
			foreign.R.Gin = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.GinID) {
				local.R.GinGoodsIssueNoteItems = append(local.R.GinGoodsIssueNoteItems, foreign)
				if foreign.R == nil {
					foreign.R = &goodsIssueNoteItemR{}
				}
				foreign.R.Gin = local
				break
			}
		}
	}

	return nil
}

// AddGinGoodsIssueNoteItems adds the given related objects to the existing relationships
// of the goods_issue_note, optionally inserting them as new records.
// Appends related to o.R.GinGoodsIssueNoteItems.
// Sets related.R.Gin appropriately.
func (o *GoodsIssueNote) AddGinGoodsIssueNoteItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GoodsIssueNoteItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GinID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"inventory\".\"goods_issue_note_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"gin_id"}),
				strmangle.WhereClause("\"", "\"", 2, goodsIssueNoteItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GinID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &goodsIssueNoteR{
			GinGoodsIssueNoteItems: related,
		}
	} else {
		o.R.GinGoodsIssueNoteItems = append(o.R.GinGoodsIssueNoteItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &goodsIssueNoteItemR{
				Gin: o,
			}
		} else {
			rel.R.Gin = o
		}
	}
	return nil
}

// SetGinGoodsIssueNoteItems removes all previously related items of the
// goods_issue_note replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Gin's GinGoodsIssueNoteItems accordingly.
// Replaces o.R.GinGoodsIssueNoteItems with related.
// Sets related.R.Gin's GinGoodsIssueNoteItems accordingly.
func (o *GoodsIssueNote) SetGinGoodsIssueNoteItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GoodsIssueNoteItem) error {
	query := "update \"inventory\".\"goods_issue_note_item\" set \"gin_id\" = null where \"gin_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GinGoodsIssueNoteItems {
			queries.SetScanner(&rel.GinID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Gin = nil
		}
		o.R.GinGoodsIssueNoteItems = nil
	}

	return o.AddGinGoodsIssueNoteItems(ctx, exec, insert, related...)
}

// RemoveGinGoodsIssueNoteItems relationships from objects passed in.
// Removes related items from R.GinGoodsIssueNoteItems (uses pointer comparison, removal does not keep order)
// Sets related.R.Gin.
func (o *GoodsIssueNote) RemoveGinGoodsIssueNoteItems(ctx context.Context, exec boil.ContextExecutor, related ...*GoodsIssueNoteItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GinID, nil)
		if rel.R != nil {
			rel.R.Gin = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("gin_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GinGoodsIssueNoteItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.GinGoodsIssueNoteItems)
			if ln > 1 && i < ln-1 {
				o.R.GinGoodsIssueNoteItems[i] = o.R.GinGoodsIssueNoteItems[ln-1]
			}
			o.R.GinGoodsIssueNoteItems = o.R.GinGoodsIssueNoteItems[:ln-1]
			break
		}
	}

	return nil
}

// GoodsIssueNotes retrieves all the records using an executor.
func GoodsIssueNotes(mods ...qm.QueryMod) goodsIssueNoteQuery {
	mods = append(mods, qm.From("\"inventory\".\"goods_issue_note\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"inventory\".\"goods_issue_note\".*"})
	}

	return goodsIssueNoteQuery{q}
}

// FindGoodsIssueNote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoodsIssueNote(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*GoodsIssueNote, error) {
	goodsIssueNoteObj := &GoodsIssueNote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"inventory\".\"goods_issue_note\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, goodsIssueNoteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: unable to select from goods_issue_note")
	}

	if err = goodsIssueNoteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return goodsIssueNoteObj, err
	}

	return goodsIssueNoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoodsIssueNote) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("inventory: no goods_issue_note provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsIssueNoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goodsIssueNoteInsertCacheMut.RLock()
	cache, cached := goodsIssueNoteInsertCache[key]
	goodsIssueNoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goodsIssueNoteAllColumns,
			goodsIssueNoteColumnsWithDefault,
			goodsIssueNoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goodsIssueNoteType, goodsIssueNoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goodsIssueNoteType, goodsIssueNoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inventory\".\"goods_issue_note\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inventory\".\"goods_issue_note\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "inventory: unable to insert into goods_issue_note")
	}

	if !cached {
		goodsIssueNoteInsertCacheMut.Lock()
		goodsIssueNoteInsertCache[key] = cache
		goodsIssueNoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GoodsIssueNote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GoodsIssueNote) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	goodsIssueNoteUpdateCacheMut.RLock()
	cache, cached := goodsIssueNoteUpdateCache[key]
	goodsIssueNoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			goodsIssueNoteAllColumns,
			goodsIssueNotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("inventory: unable to update goods_issue_note, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"inventory\".\"goods_issue_note\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, goodsIssueNotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(goodsIssueNoteType, goodsIssueNoteMapping, append(wl, goodsIssueNotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update goods_issue_note row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by update for goods_issue_note")
	}

	if !cached {
		goodsIssueNoteUpdateCacheMut.Lock()
		goodsIssueNoteUpdateCache[key] = cache
		goodsIssueNoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q goodsIssueNoteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update all for goods_issue_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to retrieve rows affected for goods_issue_note")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoodsIssueNoteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("inventory: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsIssueNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"inventory\".\"goods_issue_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, goodsIssueNotePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update all in goodsIssueNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to retrieve rows affected all in update all goodsIssueNote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoodsIssueNote) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("inventory: no goods_issue_note provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsIssueNoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goodsIssueNoteUpsertCacheMut.RLock()
	cache, cached := goodsIssueNoteUpsertCache[key]
	goodsIssueNoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goodsIssueNoteAllColumns,
			goodsIssueNoteColumnsWithDefault,
			goodsIssueNoteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goodsIssueNoteAllColumns,
			goodsIssueNotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("inventory: unable to upsert goods_issue_note, could not build update column list")
		}

		ret := strmangle.SetComplement(goodsIssueNoteAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goodsIssueNotePrimaryKeyColumns) == 0 {
				return errors.New("inventory: unable to upsert goods_issue_note, could not build conflict column list")
			}

			conflict = make([]string, len(goodsIssueNotePrimaryKeyColumns))
			copy(conflict, goodsIssueNotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inventory\".\"goods_issue_note\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goodsIssueNoteType, goodsIssueNoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goodsIssueNoteType, goodsIssueNoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "inventory: unable to upsert goods_issue_note")
	}

	if !cached {
		goodsIssueNoteUpsertCacheMut.Lock()
		goodsIssueNoteUpsertCache[key] = cache
		goodsIssueNoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GoodsIssueNote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GoodsIssueNote) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("inventory: no GoodsIssueNote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), goodsIssueNotePrimaryKeyMapping)
	sql := "DELETE FROM \"inventory\".\"goods_issue_note\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete from goods_issue_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by delete for goods_issue_note")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q goodsIssueNoteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("inventory: no goodsIssueNoteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete all from goods_issue_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by deleteall for goods_issue_note")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoodsIssueNoteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(goodsIssueNoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsIssueNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"inventory\".\"goods_issue_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goodsIssueNotePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete all from goodsIssueNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by deleteall for goods_issue_note")
	}

	if len(goodsIssueNoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GoodsIssueNote) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoodsIssueNote(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoodsIssueNoteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoodsIssueNoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsIssueNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"inventory\".\"goods_issue_note\".* FROM \"inventory\".\"goods_issue_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goodsIssueNotePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "inventory: unable to reload all in GoodsIssueNoteSlice")
	}

	*o = slice

	return nil
}

// GoodsIssueNoteExists checks if the GoodsIssueNote row exists.
func GoodsIssueNoteExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"inventory\".\"goods_issue_note\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "inventory: unable to check if goods_issue_note exists")
	}

	return exists, nil
}

// Exists checks if the GoodsIssueNote row exists.
func (o *GoodsIssueNote) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GoodsIssueNoteExists(ctx, exec, o.ID)
}
