// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package inventory

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// GoodsIssueNoteItem is an object representing the database table.
type GoodsIssueNoteItem struct {
	ID            int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	GinID         null.Int      `boil:"gin_id" json:"gin_id,omitempty" toml:"gin_id" yaml:"gin_id,omitempty"`
	InventoryID   null.Int      `boil:"inventory_id" json:"inventory_id,omitempty" toml:"inventory_id" yaml:"inventory_id,omitempty"`
	Quantity      types.Decimal `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	UnitValue     types.Decimal `boil:"unit_value" json:"unit_value" toml:"unit_value" yaml:"unit_value"`
	TotalValueGen types.Decimal `boil:"total_value_gen" json:"total_value_gen" toml:"total_value_gen" yaml:"total_value_gen"`
	CreatedAt     time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *goodsIssueNoteItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L goodsIssueNoteItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoodsIssueNoteItemColumns = struct {
	ID            string
	GinID         string
	InventoryID   string
	Quantity      string
	UnitValue     string
	TotalValueGen string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	GinID:         "gin_id",
	InventoryID:   "inventory_id",
	Quantity:      "quantity",
	UnitValue:     "unit_value",
	TotalValueGen: "total_value_gen",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var GoodsIssueNoteItemTableColumns = struct {
	ID            string
	GinID         string
	InventoryID   string
	Quantity      string
	UnitValue     string
	TotalValueGen string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "goods_issue_note_item.id",
	GinID:         "goods_issue_note_item.gin_id",
	InventoryID:   "goods_issue_note_item.inventory_id",
	Quantity:      "goods_issue_note_item.quantity",
	UnitValue:     "goods_issue_note_item.unit_value",
	TotalValueGen: "goods_issue_note_item.total_value_gen",
	CreatedAt:     "goods_issue_note_item.created_at",
	UpdatedAt:     "goods_issue_note_item.updated_at",
	DeletedAt:     "goods_issue_note_item.deleted_at",
}

// Generated where

var GoodsIssueNoteItemWhere = struct {
	ID            whereHelperint
	GinID         whereHelpernull_Int
	InventoryID   whereHelpernull_Int
	Quantity      whereHelpertypes_Decimal
	UnitValue     whereHelpertypes_Decimal
	TotalValueGen whereHelpertypes_Decimal
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperint{field: "\"inventory\".\"goods_issue_note_item\".\"id\""},
	GinID:         whereHelpernull_Int{field: "\"inventory\".\"goods_issue_note_item\".\"gin_id\""},
	InventoryID:   whereHelpernull_Int{field: "\"inventory\".\"goods_issue_note_item\".\"inventory_id\""},
	Quantity:      whereHelpertypes_Decimal{field: "\"inventory\".\"goods_issue_note_item\".\"quantity\""},
	UnitValue:     whereHelpertypes_Decimal{field: "\"inventory\".\"goods_issue_note_item\".\"unit_value\""},
	TotalValueGen: whereHelpertypes_Decimal{field: "\"inventory\".\"goods_issue_note_item\".\"total_value_gen\""},
	CreatedAt:     whereHelpertime_Time{field: "\"inventory\".\"goods_issue_note_item\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"inventory\".\"goods_issue_note_item\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"inventory\".\"goods_issue_note_item\".\"deleted_at\""},
}

// GoodsIssueNoteItemRels is where relationship names are stored.
var GoodsIssueNoteItemRels = struct {
	Gin       string
	Inventory string
}{
	Gin:       "Gin",
	Inventory: "Inventory",
}

// goodsIssueNoteItemR is where relationships are stored.
type goodsIssueNoteItemR struct {
	Gin       *GoodsIssueNote `boil:"Gin" json:"Gin" toml:"Gin" yaml:"Gin"`
	Inventory *Inventory      `boil:"Inventory" json:"Inventory" toml:"Inventory" yaml:"Inventory"`
}

// NewStruct creates a new relationship struct
func (*goodsIssueNoteItemR) NewStruct() *goodsIssueNoteItemR {
	return &goodsIssueNoteItemR{}
}

func (r *goodsIssueNoteItemR) GetGin() *GoodsIssueNote {
	if r == nil {
		return nil
	}
	return r.Gin
}

func (r *goodsIssueNoteItemR) GetInventory() *Inventory {
	if r == nil {
		return nil
	}
	return r.Inventory
}

// goodsIssueNoteItemL is where Load methods for each relationship are stored.
type goodsIssueNoteItemL struct{}

var (
	goodsIssueNoteItemAllColumns            = []string{"id", "gin_id", "inventory_id", "quantity", "unit_value", "total_value_gen", "created_at", "updated_at", "deleted_at"}
	goodsIssueNoteItemColumnsWithoutDefault = []string{"id", "quantity", "unit_value", "total_value_gen", "created_at", "updated_at"}
	goodsIssueNoteItemColumnsWithDefault    = []string{"gin_id", "inventory_id", "deleted_at"}
	goodsIssueNoteItemPrimaryKeyColumns     = []string{"id"}
	goodsIssueNoteItemGeneratedColumns      = []string{}
)

type (
	// GoodsIssueNoteItemSlice is an alias for a slice of pointers to GoodsIssueNoteItem.
	// This should almost always be used instead of []GoodsIssueNoteItem.
	GoodsIssueNoteItemSlice []*GoodsIssueNoteItem
	// GoodsIssueNoteItemHook is the signature for custom GoodsIssueNoteItem hook methods
	GoodsIssueNoteItemHook func(context.Context, boil.ContextExecutor, *GoodsIssueNoteItem) error

	goodsIssueNoteItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goodsIssueNoteItemType                 = reflect.TypeOf(&GoodsIssueNoteItem{})
	goodsIssueNoteItemMapping              = queries.MakeStructMapping(goodsIssueNoteItemType)
	goodsIssueNoteItemPrimaryKeyMapping, _ = queries.BindMapping(goodsIssueNoteItemType, goodsIssueNoteItemMapping, goodsIssueNoteItemPrimaryKeyColumns)
	goodsIssueNoteItemInsertCacheMut       sync.RWMutex
	goodsIssueNoteItemInsertCache          = make(map[string]insertCache)
	goodsIssueNoteItemUpdateCacheMut       sync.RWMutex
	goodsIssueNoteItemUpdateCache          = make(map[string]updateCache)
	goodsIssueNoteItemUpsertCacheMut       sync.RWMutex
	goodsIssueNoteItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var goodsIssueNoteItemAfterSelectMu sync.Mutex
var goodsIssueNoteItemAfterSelectHooks []GoodsIssueNoteItemHook

var goodsIssueNoteItemBeforeInsertMu sync.Mutex
var goodsIssueNoteItemBeforeInsertHooks []GoodsIssueNoteItemHook
var goodsIssueNoteItemAfterInsertMu sync.Mutex
var goodsIssueNoteItemAfterInsertHooks []GoodsIssueNoteItemHook

var goodsIssueNoteItemBeforeUpdateMu sync.Mutex
var goodsIssueNoteItemBeforeUpdateHooks []GoodsIssueNoteItemHook
var goodsIssueNoteItemAfterUpdateMu sync.Mutex
var goodsIssueNoteItemAfterUpdateHooks []GoodsIssueNoteItemHook

var goodsIssueNoteItemBeforeDeleteMu sync.Mutex
var goodsIssueNoteItemBeforeDeleteHooks []GoodsIssueNoteItemHook
var goodsIssueNoteItemAfterDeleteMu sync.Mutex
var goodsIssueNoteItemAfterDeleteHooks []GoodsIssueNoteItemHook

var goodsIssueNoteItemBeforeUpsertMu sync.Mutex
var goodsIssueNoteItemBeforeUpsertHooks []GoodsIssueNoteItemHook
var goodsIssueNoteItemAfterUpsertMu sync.Mutex
var goodsIssueNoteItemAfterUpsertHooks []GoodsIssueNoteItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoodsIssueNoteItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoodsIssueNoteItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoodsIssueNoteItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GoodsIssueNoteItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GoodsIssueNoteItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GoodsIssueNoteItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GoodsIssueNoteItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoodsIssueNoteItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoodsIssueNoteItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoodsIssueNoteItemHook registers your hook function for all future operations.
func AddGoodsIssueNoteItemHook(hookPoint boil.HookPoint, goodsIssueNoteItemHook GoodsIssueNoteItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goodsIssueNoteItemAfterSelectMu.Lock()
		goodsIssueNoteItemAfterSelectHooks = append(goodsIssueNoteItemAfterSelectHooks, goodsIssueNoteItemHook)
		goodsIssueNoteItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goodsIssueNoteItemBeforeInsertMu.Lock()
		goodsIssueNoteItemBeforeInsertHooks = append(goodsIssueNoteItemBeforeInsertHooks, goodsIssueNoteItemHook)
		goodsIssueNoteItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goodsIssueNoteItemAfterInsertMu.Lock()
		goodsIssueNoteItemAfterInsertHooks = append(goodsIssueNoteItemAfterInsertHooks, goodsIssueNoteItemHook)
		goodsIssueNoteItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		goodsIssueNoteItemBeforeUpdateMu.Lock()
		goodsIssueNoteItemBeforeUpdateHooks = append(goodsIssueNoteItemBeforeUpdateHooks, goodsIssueNoteItemHook)
		goodsIssueNoteItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		goodsIssueNoteItemAfterUpdateMu.Lock()
		goodsIssueNoteItemAfterUpdateHooks = append(goodsIssueNoteItemAfterUpdateHooks, goodsIssueNoteItemHook)
		goodsIssueNoteItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		goodsIssueNoteItemBeforeDeleteMu.Lock()
		goodsIssueNoteItemBeforeDeleteHooks = append(goodsIssueNoteItemBeforeDeleteHooks, goodsIssueNoteItemHook)
		goodsIssueNoteItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		goodsIssueNoteItemAfterDeleteMu.Lock()
		goodsIssueNoteItemAfterDeleteHooks = append(goodsIssueNoteItemAfterDeleteHooks, goodsIssueNoteItemHook)
		goodsIssueNoteItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		goodsIssueNoteItemBeforeUpsertMu.Lock()
		goodsIssueNoteItemBeforeUpsertHooks = append(goodsIssueNoteItemBeforeUpsertHooks, goodsIssueNoteItemHook)
		goodsIssueNoteItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goodsIssueNoteItemAfterUpsertMu.Lock()
		goodsIssueNoteItemAfterUpsertHooks = append(goodsIssueNoteItemAfterUpsertHooks, goodsIssueNoteItemHook)
		goodsIssueNoteItemAfterUpsertMu.Unlock()
	}
}

// One returns a single goodsIssueNoteItem record from the query.
func (q goodsIssueNoteItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoodsIssueNoteItem, error) {
	o := &GoodsIssueNoteItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: failed to execute a one query for goods_issue_note_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoodsIssueNoteItem records from the query.
func (q goodsIssueNoteItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoodsIssueNoteItemSlice, error) {
	var o []*GoodsIssueNoteItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "inventory: failed to assign all query results to GoodsIssueNoteItem slice")
	}

	if len(goodsIssueNoteItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoodsIssueNoteItem records in the query.
func (q goodsIssueNoteItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to count goods_issue_note_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goodsIssueNoteItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "inventory: failed to check if goods_issue_note_item exists")
	}

	return count > 0, nil
}

// Gin pointed to by the foreign key.
func (o *GoodsIssueNoteItem) Gin(mods ...qm.QueryMod) goodsIssueNoteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GinID),
	}

	queryMods = append(queryMods, mods...)

	return GoodsIssueNotes(queryMods...)
}

// Inventory pointed to by the foreign key.
func (o *GoodsIssueNoteItem) Inventory(mods ...qm.QueryMod) inventoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InventoryID),
	}

	queryMods = append(queryMods, mods...)

	return Inventories(queryMods...)
}

// LoadGin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (goodsIssueNoteItemL) LoadGin(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoodsIssueNoteItem interface{}, mods queries.Applicator) error {
	var slice []*GoodsIssueNoteItem
	var object *GoodsIssueNoteItem

	if singular {
		var ok bool
		object, ok = maybeGoodsIssueNoteItem.(*GoodsIssueNoteItem)
		if !ok {
			object = new(GoodsIssueNoteItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGoodsIssueNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGoodsIssueNoteItem))
			}
		}
	} else {
		s, ok := maybeGoodsIssueNoteItem.(*[]*GoodsIssueNoteItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGoodsIssueNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGoodsIssueNoteItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &goodsIssueNoteItemR{}
		}
		if !queries.IsNil(object.GinID) {
			args[object.GinID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goodsIssueNoteItemR{}
			}

			if !queries.IsNil(obj.GinID) {
				args[obj.GinID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`inventory.goods_issue_note`),
		qm.WhereIn(`inventory.goods_issue_note.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GoodsIssueNote")
	}

	var resultSlice []*GoodsIssueNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GoodsIssueNote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for goods_issue_note")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for goods_issue_note")
	}

	if len(goodsIssueNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Gin = foreign
		if foreign.R == nil {
			foreign.R = &goodsIssueNoteR{}
		}
		foreign.R.GinGoodsIssueNoteItems = append(foreign.R.GinGoodsIssueNoteItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GinID, foreign.ID) {
				local.R.Gin = foreign
				if foreign.R == nil {
					foreign.R = &goodsIssueNoteR{}
				}
				foreign.R.GinGoodsIssueNoteItems = append(foreign.R.GinGoodsIssueNoteItems, local)
				break
			}
		}
	}

	return nil
}

// LoadInventory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (goodsIssueNoteItemL) LoadInventory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoodsIssueNoteItem interface{}, mods queries.Applicator) error {
	var slice []*GoodsIssueNoteItem
	var object *GoodsIssueNoteItem

	if singular {
		var ok bool
		object, ok = maybeGoodsIssueNoteItem.(*GoodsIssueNoteItem)
		if !ok {
			object = new(GoodsIssueNoteItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGoodsIssueNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGoodsIssueNoteItem))
			}
		}
	} else {
		s, ok := maybeGoodsIssueNoteItem.(*[]*GoodsIssueNoteItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGoodsIssueNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGoodsIssueNoteItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &goodsIssueNoteItemR{}
		}
		if !queries.IsNil(object.InventoryID) {
			args[object.InventoryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goodsIssueNoteItemR{}
			}

			if !queries.IsNil(obj.InventoryID) {
				args[obj.InventoryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`inventory.inventory`),
		qm.WhereIn(`inventory.inventory.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Inventory")
	}

	var resultSlice []*Inventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for inventory")
	}

	if len(inventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Inventory = foreign
		if foreign.R == nil {
			foreign.R = &inventoryR{}
		}
		foreign.R.GoodsIssueNoteItems = append(foreign.R.GoodsIssueNoteItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InventoryID, foreign.ID) {
				local.R.Inventory = foreign
				if foreign.R == nil {
					foreign.R = &inventoryR{}
				}
				foreign.R.GoodsIssueNoteItems = append(foreign.R.GoodsIssueNoteItems, local)
				break
			}
		}
	}

	return nil
}

// SetGin of the goodsIssueNoteItem to the related item.
// Sets o.R.Gin to related.
// Adds o to related.R.GinGoodsIssueNoteItems.
func (o *GoodsIssueNoteItem) SetGin(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GoodsIssueNote) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"inventory\".\"goods_issue_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"gin_id"}),
		strmangle.WhereClause("\"", "\"", 2, goodsIssueNoteItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GinID, related.ID)
	if o.R == nil {
		o.R = &goodsIssueNoteItemR{
			Gin: related,
		}
	} else {
		o.R.Gin = related
	}

	if related.R == nil {
		related.R = &goodsIssueNoteR{
			GinGoodsIssueNoteItems: GoodsIssueNoteItemSlice{o},
		}
	} else {
		related.R.GinGoodsIssueNoteItems = append(related.R.GinGoodsIssueNoteItems, o)
	}

	return nil
}

// RemoveGin relationship.
// Sets o.R.Gin to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GoodsIssueNoteItem) RemoveGin(ctx context.Context, exec boil.ContextExecutor, related *GoodsIssueNote) error {
	var err error

	queries.SetScanner(&o.GinID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("gin_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Gin = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GinGoodsIssueNoteItems {
		if queries.Equal(o.GinID, ri.GinID) {
			continue
		}

		ln := len(related.R.GinGoodsIssueNoteItems)
		if ln > 1 && i < ln-1 {
			related.R.GinGoodsIssueNoteItems[i] = related.R.GinGoodsIssueNoteItems[ln-1]
		}
		related.R.GinGoodsIssueNoteItems = related.R.GinGoodsIssueNoteItems[:ln-1]
		break
	}
	return nil
}

// SetInventory of the goodsIssueNoteItem to the related item.
// Sets o.R.Inventory to related.
// Adds o to related.R.GoodsIssueNoteItems.
func (o *GoodsIssueNoteItem) SetInventory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Inventory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"inventory\".\"goods_issue_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"inventory_id"}),
		strmangle.WhereClause("\"", "\"", 2, goodsIssueNoteItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InventoryID, related.ID)
	if o.R == nil {
		o.R = &goodsIssueNoteItemR{
			Inventory: related,
		}
	} else {
		o.R.Inventory = related
	}

	if related.R == nil {
		related.R = &inventoryR{
			GoodsIssueNoteItems: GoodsIssueNoteItemSlice{o},
		}
	} else {
		related.R.GoodsIssueNoteItems = append(related.R.GoodsIssueNoteItems, o)
	}

	return nil
}

// RemoveInventory relationship.
// Sets o.R.Inventory to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GoodsIssueNoteItem) RemoveInventory(ctx context.Context, exec boil.ContextExecutor, related *Inventory) error {
	var err error

	queries.SetScanner(&o.InventoryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("inventory_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Inventory = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GoodsIssueNoteItems {
		if queries.Equal(o.InventoryID, ri.InventoryID) {
			continue
		}

		ln := len(related.R.GoodsIssueNoteItems)
		if ln > 1 && i < ln-1 {
			related.R.GoodsIssueNoteItems[i] = related.R.GoodsIssueNoteItems[ln-1]
		}
		related.R.GoodsIssueNoteItems = related.R.GoodsIssueNoteItems[:ln-1]
		break
	}
	return nil
}

// GoodsIssueNoteItems retrieves all the records using an executor.
func GoodsIssueNoteItems(mods ...qm.QueryMod) goodsIssueNoteItemQuery {
	mods = append(mods, qm.From("\"inventory\".\"goods_issue_note_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"inventory\".\"goods_issue_note_item\".*"})
	}

	return goodsIssueNoteItemQuery{q}
}

// FindGoodsIssueNoteItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoodsIssueNoteItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*GoodsIssueNoteItem, error) {
	goodsIssueNoteItemObj := &GoodsIssueNoteItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"inventory\".\"goods_issue_note_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, goodsIssueNoteItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: unable to select from goods_issue_note_item")
	}

	if err = goodsIssueNoteItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return goodsIssueNoteItemObj, err
	}

	return goodsIssueNoteItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoodsIssueNoteItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("inventory: no goods_issue_note_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsIssueNoteItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goodsIssueNoteItemInsertCacheMut.RLock()
	cache, cached := goodsIssueNoteItemInsertCache[key]
	goodsIssueNoteItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goodsIssueNoteItemAllColumns,
			goodsIssueNoteItemColumnsWithDefault,
			goodsIssueNoteItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goodsIssueNoteItemType, goodsIssueNoteItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goodsIssueNoteItemType, goodsIssueNoteItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inventory\".\"goods_issue_note_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inventory\".\"goods_issue_note_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "inventory: unable to insert into goods_issue_note_item")
	}

	if !cached {
		goodsIssueNoteItemInsertCacheMut.Lock()
		goodsIssueNoteItemInsertCache[key] = cache
		goodsIssueNoteItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GoodsIssueNoteItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GoodsIssueNoteItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	goodsIssueNoteItemUpdateCacheMut.RLock()
	cache, cached := goodsIssueNoteItemUpdateCache[key]
	goodsIssueNoteItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			goodsIssueNoteItemAllColumns,
			goodsIssueNoteItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("inventory: unable to update goods_issue_note_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"inventory\".\"goods_issue_note_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, goodsIssueNoteItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(goodsIssueNoteItemType, goodsIssueNoteItemMapping, append(wl, goodsIssueNoteItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update goods_issue_note_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by update for goods_issue_note_item")
	}

	if !cached {
		goodsIssueNoteItemUpdateCacheMut.Lock()
		goodsIssueNoteItemUpdateCache[key] = cache
		goodsIssueNoteItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q goodsIssueNoteItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update all for goods_issue_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to retrieve rows affected for goods_issue_note_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoodsIssueNoteItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("inventory: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsIssueNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"inventory\".\"goods_issue_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, goodsIssueNoteItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update all in goodsIssueNoteItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to retrieve rows affected all in update all goodsIssueNoteItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoodsIssueNoteItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("inventory: no goods_issue_note_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsIssueNoteItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goodsIssueNoteItemUpsertCacheMut.RLock()
	cache, cached := goodsIssueNoteItemUpsertCache[key]
	goodsIssueNoteItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goodsIssueNoteItemAllColumns,
			goodsIssueNoteItemColumnsWithDefault,
			goodsIssueNoteItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goodsIssueNoteItemAllColumns,
			goodsIssueNoteItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("inventory: unable to upsert goods_issue_note_item, could not build update column list")
		}

		ret := strmangle.SetComplement(goodsIssueNoteItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goodsIssueNoteItemPrimaryKeyColumns) == 0 {
				return errors.New("inventory: unable to upsert goods_issue_note_item, could not build conflict column list")
			}

			conflict = make([]string, len(goodsIssueNoteItemPrimaryKeyColumns))
			copy(conflict, goodsIssueNoteItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inventory\".\"goods_issue_note_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goodsIssueNoteItemType, goodsIssueNoteItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goodsIssueNoteItemType, goodsIssueNoteItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "inventory: unable to upsert goods_issue_note_item")
	}

	if !cached {
		goodsIssueNoteItemUpsertCacheMut.Lock()
		goodsIssueNoteItemUpsertCache[key] = cache
		goodsIssueNoteItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GoodsIssueNoteItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GoodsIssueNoteItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("inventory: no GoodsIssueNoteItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), goodsIssueNoteItemPrimaryKeyMapping)
	sql := "DELETE FROM \"inventory\".\"goods_issue_note_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete from goods_issue_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by delete for goods_issue_note_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q goodsIssueNoteItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("inventory: no goodsIssueNoteItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete all from goods_issue_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by deleteall for goods_issue_note_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoodsIssueNoteItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(goodsIssueNoteItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsIssueNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"inventory\".\"goods_issue_note_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goodsIssueNoteItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete all from goodsIssueNoteItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by deleteall for goods_issue_note_item")
	}

	if len(goodsIssueNoteItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GoodsIssueNoteItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoodsIssueNoteItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoodsIssueNoteItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoodsIssueNoteItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsIssueNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"inventory\".\"goods_issue_note_item\".* FROM \"inventory\".\"goods_issue_note_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goodsIssueNoteItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "inventory: unable to reload all in GoodsIssueNoteItemSlice")
	}

	*o = slice

	return nil
}

// GoodsIssueNoteItemExists checks if the GoodsIssueNoteItem row exists.
func GoodsIssueNoteItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"inventory\".\"goods_issue_note_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "inventory: unable to check if goods_issue_note_item exists")
	}

	return exists, nil
}

// Exists checks if the GoodsIssueNoteItem row exists.
func (o *GoodsIssueNoteItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GoodsIssueNoteItemExists(ctx, exec, o.ID)
}
