// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package inventory

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// GoodsIssueNoteView is an object representing the database table.
type GoodsIssueNoteView struct {
	ID           null.Int          `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	GinNumber    null.String       `boil:"gin_number" json:"gin_number,omitempty" toml:"gin_number" yaml:"gin_number,omitempty"`
	ReceipientID null.Int          `boil:"receipient_id" json:"receipient_id,omitempty" toml:"receipient_id" yaml:"receipient_id,omitempty"`
	IssueDate    null.Time         `boil:"issue_date" json:"issue_date,omitempty" toml:"issue_date" yaml:"issue_date,omitempty"`
	TotalValue   types.NullDecimal `boil:"total_value" json:"total_value,omitempty" toml:"total_value" yaml:"total_value,omitempty"`
	Notes        null.String       `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	CreatedAt    null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt    null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt    null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Receipient   null.JSON         `boil:"receipient" json:"receipient,omitempty" toml:"receipient" yaml:"receipient,omitempty"`
	Items        null.JSON         `boil:"items" json:"items,omitempty" toml:"items" yaml:"items,omitempty"`
}

var GoodsIssueNoteViewColumns = struct {
	ID           string
	GinNumber    string
	ReceipientID string
	IssueDate    string
	TotalValue   string
	Notes        string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	Receipient   string
	Items        string
}{
	ID:           "id",
	GinNumber:    "gin_number",
	ReceipientID: "receipient_id",
	IssueDate:    "issue_date",
	TotalValue:   "total_value",
	Notes:        "notes",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
	Receipient:   "receipient",
	Items:        "items",
}

var GoodsIssueNoteViewTableColumns = struct {
	ID           string
	GinNumber    string
	ReceipientID string
	IssueDate    string
	TotalValue   string
	Notes        string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	Receipient   string
	Items        string
}{
	ID:           "goods_issue_note_view.id",
	GinNumber:    "goods_issue_note_view.gin_number",
	ReceipientID: "goods_issue_note_view.receipient_id",
	IssueDate:    "goods_issue_note_view.issue_date",
	TotalValue:   "goods_issue_note_view.total_value",
	Notes:        "goods_issue_note_view.notes",
	CreatedAt:    "goods_issue_note_view.created_at",
	UpdatedAt:    "goods_issue_note_view.updated_at",
	DeletedAt:    "goods_issue_note_view.deleted_at",
	Receipient:   "goods_issue_note_view.receipient",
	Items:        "goods_issue_note_view.items",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GoodsIssueNoteViewWhere = struct {
	ID           whereHelpernull_Int
	GinNumber    whereHelpernull_String
	ReceipientID whereHelpernull_Int
	IssueDate    whereHelpernull_Time
	TotalValue   whereHelpertypes_NullDecimal
	Notes        whereHelpernull_String
	CreatedAt    whereHelpernull_Time
	UpdatedAt    whereHelpernull_Time
	DeletedAt    whereHelpernull_Time
	Receipient   whereHelpernull_JSON
	Items        whereHelpernull_JSON
}{
	ID:           whereHelpernull_Int{field: "\"inventory\".\"goods_issue_note_view\".\"id\""},
	GinNumber:    whereHelpernull_String{field: "\"inventory\".\"goods_issue_note_view\".\"gin_number\""},
	ReceipientID: whereHelpernull_Int{field: "\"inventory\".\"goods_issue_note_view\".\"receipient_id\""},
	IssueDate:    whereHelpernull_Time{field: "\"inventory\".\"goods_issue_note_view\".\"issue_date\""},
	TotalValue:   whereHelpertypes_NullDecimal{field: "\"inventory\".\"goods_issue_note_view\".\"total_value\""},
	Notes:        whereHelpernull_String{field: "\"inventory\".\"goods_issue_note_view\".\"notes\""},
	CreatedAt:    whereHelpernull_Time{field: "\"inventory\".\"goods_issue_note_view\".\"created_at\""},
	UpdatedAt:    whereHelpernull_Time{field: "\"inventory\".\"goods_issue_note_view\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"inventory\".\"goods_issue_note_view\".\"deleted_at\""},
	Receipient:   whereHelpernull_JSON{field: "\"inventory\".\"goods_issue_note_view\".\"receipient\""},
	Items:        whereHelpernull_JSON{field: "\"inventory\".\"goods_issue_note_view\".\"items\""},
}

var (
	goodsIssueNoteViewAllColumns            = []string{"id", "gin_number", "receipient_id", "issue_date", "total_value", "notes", "created_at", "updated_at", "deleted_at", "receipient", "items"}
	goodsIssueNoteViewColumnsWithoutDefault = []string{}
	goodsIssueNoteViewColumnsWithDefault    = []string{"id", "gin_number", "receipient_id", "issue_date", "total_value", "notes", "created_at", "updated_at", "deleted_at", "receipient", "items"}
	goodsIssueNoteViewPrimaryKeyColumns     = []string{}
	goodsIssueNoteViewGeneratedColumns      = []string{}
)

type (
	// GoodsIssueNoteViewSlice is an alias for a slice of pointers to GoodsIssueNoteView.
	// This should almost always be used instead of []GoodsIssueNoteView.
	GoodsIssueNoteViewSlice []*GoodsIssueNoteView
	// GoodsIssueNoteViewHook is the signature for custom GoodsIssueNoteView hook methods
	GoodsIssueNoteViewHook func(context.Context, boil.ContextExecutor, *GoodsIssueNoteView) error

	goodsIssueNoteViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goodsIssueNoteViewType           = reflect.TypeOf(&GoodsIssueNoteView{})
	goodsIssueNoteViewMapping        = queries.MakeStructMapping(goodsIssueNoteViewType)
	goodsIssueNoteViewInsertCacheMut sync.RWMutex
	goodsIssueNoteViewInsertCache    = make(map[string]insertCache)
	goodsIssueNoteViewUpdateCacheMut sync.RWMutex
	goodsIssueNoteViewUpdateCache    = make(map[string]updateCache)
	goodsIssueNoteViewUpsertCacheMut sync.RWMutex
	goodsIssueNoteViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var goodsIssueNoteViewAfterSelectMu sync.Mutex
var goodsIssueNoteViewAfterSelectHooks []GoodsIssueNoteViewHook

var goodsIssueNoteViewBeforeInsertMu sync.Mutex
var goodsIssueNoteViewBeforeInsertHooks []GoodsIssueNoteViewHook
var goodsIssueNoteViewAfterInsertMu sync.Mutex
var goodsIssueNoteViewAfterInsertHooks []GoodsIssueNoteViewHook

var goodsIssueNoteViewBeforeUpsertMu sync.Mutex
var goodsIssueNoteViewBeforeUpsertHooks []GoodsIssueNoteViewHook
var goodsIssueNoteViewAfterUpsertMu sync.Mutex
var goodsIssueNoteViewAfterUpsertHooks []GoodsIssueNoteViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoodsIssueNoteView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoodsIssueNoteView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoodsIssueNoteView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoodsIssueNoteView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoodsIssueNoteView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsIssueNoteViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoodsIssueNoteViewHook registers your hook function for all future operations.
func AddGoodsIssueNoteViewHook(hookPoint boil.HookPoint, goodsIssueNoteViewHook GoodsIssueNoteViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goodsIssueNoteViewAfterSelectMu.Lock()
		goodsIssueNoteViewAfterSelectHooks = append(goodsIssueNoteViewAfterSelectHooks, goodsIssueNoteViewHook)
		goodsIssueNoteViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goodsIssueNoteViewBeforeInsertMu.Lock()
		goodsIssueNoteViewBeforeInsertHooks = append(goodsIssueNoteViewBeforeInsertHooks, goodsIssueNoteViewHook)
		goodsIssueNoteViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goodsIssueNoteViewAfterInsertMu.Lock()
		goodsIssueNoteViewAfterInsertHooks = append(goodsIssueNoteViewAfterInsertHooks, goodsIssueNoteViewHook)
		goodsIssueNoteViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		goodsIssueNoteViewBeforeUpsertMu.Lock()
		goodsIssueNoteViewBeforeUpsertHooks = append(goodsIssueNoteViewBeforeUpsertHooks, goodsIssueNoteViewHook)
		goodsIssueNoteViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goodsIssueNoteViewAfterUpsertMu.Lock()
		goodsIssueNoteViewAfterUpsertHooks = append(goodsIssueNoteViewAfterUpsertHooks, goodsIssueNoteViewHook)
		goodsIssueNoteViewAfterUpsertMu.Unlock()
	}
}

// One returns a single goodsIssueNoteView record from the query.
func (q goodsIssueNoteViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoodsIssueNoteView, error) {
	o := &GoodsIssueNoteView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: failed to execute a one query for goods_issue_note_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoodsIssueNoteView records from the query.
func (q goodsIssueNoteViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoodsIssueNoteViewSlice, error) {
	var o []*GoodsIssueNoteView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "inventory: failed to assign all query results to GoodsIssueNoteView slice")
	}

	if len(goodsIssueNoteViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoodsIssueNoteView records in the query.
func (q goodsIssueNoteViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to count goods_issue_note_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goodsIssueNoteViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "inventory: failed to check if goods_issue_note_view exists")
	}

	return count > 0, nil
}

// GoodsIssueNoteViews retrieves all the records using an executor.
func GoodsIssueNoteViews(mods ...qm.QueryMod) goodsIssueNoteViewQuery {
	mods = append(mods, qm.From("\"inventory\".\"goods_issue_note_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"inventory\".\"goods_issue_note_view\".*"})
	}

	return goodsIssueNoteViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoodsIssueNoteView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("inventory: no goods_issue_note_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsIssueNoteViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goodsIssueNoteViewInsertCacheMut.RLock()
	cache, cached := goodsIssueNoteViewInsertCache[key]
	goodsIssueNoteViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goodsIssueNoteViewAllColumns,
			goodsIssueNoteViewColumnsWithDefault,
			goodsIssueNoteViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goodsIssueNoteViewType, goodsIssueNoteViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goodsIssueNoteViewType, goodsIssueNoteViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inventory\".\"goods_issue_note_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inventory\".\"goods_issue_note_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "inventory: unable to insert into goods_issue_note_view")
	}

	if !cached {
		goodsIssueNoteViewInsertCacheMut.Lock()
		goodsIssueNoteViewInsertCache[key] = cache
		goodsIssueNoteViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoodsIssueNoteView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("inventory: no goods_issue_note_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsIssueNoteViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goodsIssueNoteViewUpsertCacheMut.RLock()
	cache, cached := goodsIssueNoteViewUpsertCache[key]
	goodsIssueNoteViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goodsIssueNoteViewAllColumns,
			goodsIssueNoteViewColumnsWithDefault,
			goodsIssueNoteViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goodsIssueNoteViewAllColumns,
			goodsIssueNoteViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("inventory: unable to upsert goods_issue_note_view, could not build update column list")
		}

		ret := strmangle.SetComplement(goodsIssueNoteViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goodsIssueNoteViewPrimaryKeyColumns) == 0 {
				return errors.New("inventory: unable to upsert goods_issue_note_view, could not build conflict column list")
			}

			conflict = make([]string, len(goodsIssueNoteViewPrimaryKeyColumns))
			copy(conflict, goodsIssueNoteViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inventory\".\"goods_issue_note_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goodsIssueNoteViewType, goodsIssueNoteViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goodsIssueNoteViewType, goodsIssueNoteViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "inventory: unable to upsert goods_issue_note_view")
	}

	if !cached {
		goodsIssueNoteViewUpsertCacheMut.Lock()
		goodsIssueNoteViewUpsertCache[key] = cache
		goodsIssueNoteViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
