// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package inventory

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ReturnMerchandiseAuthorization is an object representing the database table.
type ReturnMerchandiseAuthorization struct {
	ID            int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	RmaNumber     string        `boil:"rma_number" json:"rma_number" toml:"rma_number" yaml:"rma_number"`
	RmaDate       null.Time     `boil:"rma_date" json:"rma_date,omitempty" toml:"rma_date" yaml:"rma_date,omitempty"`
	TotalValueGen types.Decimal `boil:"total_value_gen" json:"total_value_gen" toml:"total_value_gen" yaml:"total_value_gen"`
	ReceivedBy    null.Int      `boil:"received_by" json:"received_by,omitempty" toml:"received_by" yaml:"received_by,omitempty"`
	Notes         null.String   `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	CreatedAt     time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *returnMerchandiseAuthorizationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L returnMerchandiseAuthorizationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReturnMerchandiseAuthorizationColumns = struct {
	ID            string
	RmaNumber     string
	RmaDate       string
	TotalValueGen string
	ReceivedBy    string
	Notes         string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	RmaNumber:     "rma_number",
	RmaDate:       "rma_date",
	TotalValueGen: "total_value_gen",
	ReceivedBy:    "received_by",
	Notes:         "notes",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var ReturnMerchandiseAuthorizationTableColumns = struct {
	ID            string
	RmaNumber     string
	RmaDate       string
	TotalValueGen string
	ReceivedBy    string
	Notes         string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "return_merchandise_authorization.id",
	RmaNumber:     "return_merchandise_authorization.rma_number",
	RmaDate:       "return_merchandise_authorization.rma_date",
	TotalValueGen: "return_merchandise_authorization.total_value_gen",
	ReceivedBy:    "return_merchandise_authorization.received_by",
	Notes:         "return_merchandise_authorization.notes",
	CreatedAt:     "return_merchandise_authorization.created_at",
	UpdatedAt:     "return_merchandise_authorization.updated_at",
	DeletedAt:     "return_merchandise_authorization.deleted_at",
}

// Generated where

var ReturnMerchandiseAuthorizationWhere = struct {
	ID            whereHelperint
	RmaNumber     whereHelperstring
	RmaDate       whereHelpernull_Time
	TotalValueGen whereHelpertypes_Decimal
	ReceivedBy    whereHelpernull_Int
	Notes         whereHelpernull_String
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperint{field: "\"inventory\".\"return_merchandise_authorization\".\"id\""},
	RmaNumber:     whereHelperstring{field: "\"inventory\".\"return_merchandise_authorization\".\"rma_number\""},
	RmaDate:       whereHelpernull_Time{field: "\"inventory\".\"return_merchandise_authorization\".\"rma_date\""},
	TotalValueGen: whereHelpertypes_Decimal{field: "\"inventory\".\"return_merchandise_authorization\".\"total_value_gen\""},
	ReceivedBy:    whereHelpernull_Int{field: "\"inventory\".\"return_merchandise_authorization\".\"received_by\""},
	Notes:         whereHelpernull_String{field: "\"inventory\".\"return_merchandise_authorization\".\"notes\""},
	CreatedAt:     whereHelpertime_Time{field: "\"inventory\".\"return_merchandise_authorization\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"inventory\".\"return_merchandise_authorization\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"inventory\".\"return_merchandise_authorization\".\"deleted_at\""},
}

// ReturnMerchandiseAuthorizationRels is where relationship names are stored.
var ReturnMerchandiseAuthorizationRels = struct {
	RmaReturnMerchandiseAuthorizationItems string
}{
	RmaReturnMerchandiseAuthorizationItems: "RmaReturnMerchandiseAuthorizationItems",
}

// returnMerchandiseAuthorizationR is where relationships are stored.
type returnMerchandiseAuthorizationR struct {
	RmaReturnMerchandiseAuthorizationItems ReturnMerchandiseAuthorizationItemSlice `boil:"RmaReturnMerchandiseAuthorizationItems" json:"RmaReturnMerchandiseAuthorizationItems" toml:"RmaReturnMerchandiseAuthorizationItems" yaml:"RmaReturnMerchandiseAuthorizationItems"`
}

// NewStruct creates a new relationship struct
func (*returnMerchandiseAuthorizationR) NewStruct() *returnMerchandiseAuthorizationR {
	return &returnMerchandiseAuthorizationR{}
}

func (r *returnMerchandiseAuthorizationR) GetRmaReturnMerchandiseAuthorizationItems() ReturnMerchandiseAuthorizationItemSlice {
	if r == nil {
		return nil
	}
	return r.RmaReturnMerchandiseAuthorizationItems
}

// returnMerchandiseAuthorizationL is where Load methods for each relationship are stored.
type returnMerchandiseAuthorizationL struct{}

var (
	returnMerchandiseAuthorizationAllColumns            = []string{"id", "rma_number", "rma_date", "total_value_gen", "received_by", "notes", "created_at", "updated_at", "deleted_at"}
	returnMerchandiseAuthorizationColumnsWithoutDefault = []string{"id", "rma_number", "total_value_gen", "created_at", "updated_at"}
	returnMerchandiseAuthorizationColumnsWithDefault    = []string{"rma_date", "received_by", "notes", "deleted_at"}
	returnMerchandiseAuthorizationPrimaryKeyColumns     = []string{"id"}
	returnMerchandiseAuthorizationGeneratedColumns      = []string{}
)

type (
	// ReturnMerchandiseAuthorizationSlice is an alias for a slice of pointers to ReturnMerchandiseAuthorization.
	// This should almost always be used instead of []ReturnMerchandiseAuthorization.
	ReturnMerchandiseAuthorizationSlice []*ReturnMerchandiseAuthorization
	// ReturnMerchandiseAuthorizationHook is the signature for custom ReturnMerchandiseAuthorization hook methods
	ReturnMerchandiseAuthorizationHook func(context.Context, boil.ContextExecutor, *ReturnMerchandiseAuthorization) error

	returnMerchandiseAuthorizationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	returnMerchandiseAuthorizationType                 = reflect.TypeOf(&ReturnMerchandiseAuthorization{})
	returnMerchandiseAuthorizationMapping              = queries.MakeStructMapping(returnMerchandiseAuthorizationType)
	returnMerchandiseAuthorizationPrimaryKeyMapping, _ = queries.BindMapping(returnMerchandiseAuthorizationType, returnMerchandiseAuthorizationMapping, returnMerchandiseAuthorizationPrimaryKeyColumns)
	returnMerchandiseAuthorizationInsertCacheMut       sync.RWMutex
	returnMerchandiseAuthorizationInsertCache          = make(map[string]insertCache)
	returnMerchandiseAuthorizationUpdateCacheMut       sync.RWMutex
	returnMerchandiseAuthorizationUpdateCache          = make(map[string]updateCache)
	returnMerchandiseAuthorizationUpsertCacheMut       sync.RWMutex
	returnMerchandiseAuthorizationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var returnMerchandiseAuthorizationAfterSelectMu sync.Mutex
var returnMerchandiseAuthorizationAfterSelectHooks []ReturnMerchandiseAuthorizationHook

var returnMerchandiseAuthorizationBeforeInsertMu sync.Mutex
var returnMerchandiseAuthorizationBeforeInsertHooks []ReturnMerchandiseAuthorizationHook
var returnMerchandiseAuthorizationAfterInsertMu sync.Mutex
var returnMerchandiseAuthorizationAfterInsertHooks []ReturnMerchandiseAuthorizationHook

var returnMerchandiseAuthorizationBeforeUpdateMu sync.Mutex
var returnMerchandiseAuthorizationBeforeUpdateHooks []ReturnMerchandiseAuthorizationHook
var returnMerchandiseAuthorizationAfterUpdateMu sync.Mutex
var returnMerchandiseAuthorizationAfterUpdateHooks []ReturnMerchandiseAuthorizationHook

var returnMerchandiseAuthorizationBeforeDeleteMu sync.Mutex
var returnMerchandiseAuthorizationBeforeDeleteHooks []ReturnMerchandiseAuthorizationHook
var returnMerchandiseAuthorizationAfterDeleteMu sync.Mutex
var returnMerchandiseAuthorizationAfterDeleteHooks []ReturnMerchandiseAuthorizationHook

var returnMerchandiseAuthorizationBeforeUpsertMu sync.Mutex
var returnMerchandiseAuthorizationBeforeUpsertHooks []ReturnMerchandiseAuthorizationHook
var returnMerchandiseAuthorizationAfterUpsertMu sync.Mutex
var returnMerchandiseAuthorizationAfterUpsertHooks []ReturnMerchandiseAuthorizationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReturnMerchandiseAuthorization) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReturnMerchandiseAuthorization) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReturnMerchandiseAuthorization) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReturnMerchandiseAuthorization) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReturnMerchandiseAuthorization) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReturnMerchandiseAuthorization) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReturnMerchandiseAuthorization) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReturnMerchandiseAuthorization) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReturnMerchandiseAuthorization) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReturnMerchandiseAuthorizationHook registers your hook function for all future operations.
func AddReturnMerchandiseAuthorizationHook(hookPoint boil.HookPoint, returnMerchandiseAuthorizationHook ReturnMerchandiseAuthorizationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		returnMerchandiseAuthorizationAfterSelectMu.Lock()
		returnMerchandiseAuthorizationAfterSelectHooks = append(returnMerchandiseAuthorizationAfterSelectHooks, returnMerchandiseAuthorizationHook)
		returnMerchandiseAuthorizationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		returnMerchandiseAuthorizationBeforeInsertMu.Lock()
		returnMerchandiseAuthorizationBeforeInsertHooks = append(returnMerchandiseAuthorizationBeforeInsertHooks, returnMerchandiseAuthorizationHook)
		returnMerchandiseAuthorizationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		returnMerchandiseAuthorizationAfterInsertMu.Lock()
		returnMerchandiseAuthorizationAfterInsertHooks = append(returnMerchandiseAuthorizationAfterInsertHooks, returnMerchandiseAuthorizationHook)
		returnMerchandiseAuthorizationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		returnMerchandiseAuthorizationBeforeUpdateMu.Lock()
		returnMerchandiseAuthorizationBeforeUpdateHooks = append(returnMerchandiseAuthorizationBeforeUpdateHooks, returnMerchandiseAuthorizationHook)
		returnMerchandiseAuthorizationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		returnMerchandiseAuthorizationAfterUpdateMu.Lock()
		returnMerchandiseAuthorizationAfterUpdateHooks = append(returnMerchandiseAuthorizationAfterUpdateHooks, returnMerchandiseAuthorizationHook)
		returnMerchandiseAuthorizationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		returnMerchandiseAuthorizationBeforeDeleteMu.Lock()
		returnMerchandiseAuthorizationBeforeDeleteHooks = append(returnMerchandiseAuthorizationBeforeDeleteHooks, returnMerchandiseAuthorizationHook)
		returnMerchandiseAuthorizationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		returnMerchandiseAuthorizationAfterDeleteMu.Lock()
		returnMerchandiseAuthorizationAfterDeleteHooks = append(returnMerchandiseAuthorizationAfterDeleteHooks, returnMerchandiseAuthorizationHook)
		returnMerchandiseAuthorizationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		returnMerchandiseAuthorizationBeforeUpsertMu.Lock()
		returnMerchandiseAuthorizationBeforeUpsertHooks = append(returnMerchandiseAuthorizationBeforeUpsertHooks, returnMerchandiseAuthorizationHook)
		returnMerchandiseAuthorizationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		returnMerchandiseAuthorizationAfterUpsertMu.Lock()
		returnMerchandiseAuthorizationAfterUpsertHooks = append(returnMerchandiseAuthorizationAfterUpsertHooks, returnMerchandiseAuthorizationHook)
		returnMerchandiseAuthorizationAfterUpsertMu.Unlock()
	}
}

// One returns a single returnMerchandiseAuthorization record from the query.
func (q returnMerchandiseAuthorizationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReturnMerchandiseAuthorization, error) {
	o := &ReturnMerchandiseAuthorization{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: failed to execute a one query for return_merchandise_authorization")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReturnMerchandiseAuthorization records from the query.
func (q returnMerchandiseAuthorizationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReturnMerchandiseAuthorizationSlice, error) {
	var o []*ReturnMerchandiseAuthorization

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "inventory: failed to assign all query results to ReturnMerchandiseAuthorization slice")
	}

	if len(returnMerchandiseAuthorizationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReturnMerchandiseAuthorization records in the query.
func (q returnMerchandiseAuthorizationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to count return_merchandise_authorization rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q returnMerchandiseAuthorizationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "inventory: failed to check if return_merchandise_authorization exists")
	}

	return count > 0, nil
}

// RmaReturnMerchandiseAuthorizationItems retrieves all the return_merchandise_authorization_item's ReturnMerchandiseAuthorizationItems with an executor via rma_id column.
func (o *ReturnMerchandiseAuthorization) RmaReturnMerchandiseAuthorizationItems(mods ...qm.QueryMod) returnMerchandiseAuthorizationItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"inventory\".\"return_merchandise_authorization_item\".\"rma_id\"=?", o.ID),
	)

	return ReturnMerchandiseAuthorizationItems(queryMods...)
}

// LoadRmaReturnMerchandiseAuthorizationItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (returnMerchandiseAuthorizationL) LoadRmaReturnMerchandiseAuthorizationItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReturnMerchandiseAuthorization interface{}, mods queries.Applicator) error {
	var slice []*ReturnMerchandiseAuthorization
	var object *ReturnMerchandiseAuthorization

	if singular {
		var ok bool
		object, ok = maybeReturnMerchandiseAuthorization.(*ReturnMerchandiseAuthorization)
		if !ok {
			object = new(ReturnMerchandiseAuthorization)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReturnMerchandiseAuthorization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReturnMerchandiseAuthorization))
			}
		}
	} else {
		s, ok := maybeReturnMerchandiseAuthorization.(*[]*ReturnMerchandiseAuthorization)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReturnMerchandiseAuthorization)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReturnMerchandiseAuthorization))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &returnMerchandiseAuthorizationR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &returnMerchandiseAuthorizationR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`inventory.return_merchandise_authorization_item`),
		qm.WhereIn(`inventory.return_merchandise_authorization_item.rma_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load return_merchandise_authorization_item")
	}

	var resultSlice []*ReturnMerchandiseAuthorizationItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice return_merchandise_authorization_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on return_merchandise_authorization_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for return_merchandise_authorization_item")
	}

	if len(returnMerchandiseAuthorizationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RmaReturnMerchandiseAuthorizationItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &returnMerchandiseAuthorizationItemR{}
			}
			foreign.R.Rma = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RmaID) {
				local.R.RmaReturnMerchandiseAuthorizationItems = append(local.R.RmaReturnMerchandiseAuthorizationItems, foreign)
				if foreign.R == nil {
					foreign.R = &returnMerchandiseAuthorizationItemR{}
				}
				foreign.R.Rma = local
				break
			}
		}
	}

	return nil
}

// AddRmaReturnMerchandiseAuthorizationItems adds the given related objects to the existing relationships
// of the return_merchandise_authorization, optionally inserting them as new records.
// Appends related to o.R.RmaReturnMerchandiseAuthorizationItems.
// Sets related.R.Rma appropriately.
func (o *ReturnMerchandiseAuthorization) AddRmaReturnMerchandiseAuthorizationItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ReturnMerchandiseAuthorizationItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RmaID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"inventory\".\"return_merchandise_authorization_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"rma_id"}),
				strmangle.WhereClause("\"", "\"", 2, returnMerchandiseAuthorizationItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RmaID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &returnMerchandiseAuthorizationR{
			RmaReturnMerchandiseAuthorizationItems: related,
		}
	} else {
		o.R.RmaReturnMerchandiseAuthorizationItems = append(o.R.RmaReturnMerchandiseAuthorizationItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &returnMerchandiseAuthorizationItemR{
				Rma: o,
			}
		} else {
			rel.R.Rma = o
		}
	}
	return nil
}

// SetRmaReturnMerchandiseAuthorizationItems removes all previously related items of the
// return_merchandise_authorization replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rma's RmaReturnMerchandiseAuthorizationItems accordingly.
// Replaces o.R.RmaReturnMerchandiseAuthorizationItems with related.
// Sets related.R.Rma's RmaReturnMerchandiseAuthorizationItems accordingly.
func (o *ReturnMerchandiseAuthorization) SetRmaReturnMerchandiseAuthorizationItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ReturnMerchandiseAuthorizationItem) error {
	query := "update \"inventory\".\"return_merchandise_authorization_item\" set \"rma_id\" = null where \"rma_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RmaReturnMerchandiseAuthorizationItems {
			queries.SetScanner(&rel.RmaID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Rma = nil
		}
		o.R.RmaReturnMerchandiseAuthorizationItems = nil
	}

	return o.AddRmaReturnMerchandiseAuthorizationItems(ctx, exec, insert, related...)
}

// RemoveRmaReturnMerchandiseAuthorizationItems relationships from objects passed in.
// Removes related items from R.RmaReturnMerchandiseAuthorizationItems (uses pointer comparison, removal does not keep order)
// Sets related.R.Rma.
func (o *ReturnMerchandiseAuthorization) RemoveRmaReturnMerchandiseAuthorizationItems(ctx context.Context, exec boil.ContextExecutor, related ...*ReturnMerchandiseAuthorizationItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RmaID, nil)
		if rel.R != nil {
			rel.R.Rma = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("rma_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RmaReturnMerchandiseAuthorizationItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.RmaReturnMerchandiseAuthorizationItems)
			if ln > 1 && i < ln-1 {
				o.R.RmaReturnMerchandiseAuthorizationItems[i] = o.R.RmaReturnMerchandiseAuthorizationItems[ln-1]
			}
			o.R.RmaReturnMerchandiseAuthorizationItems = o.R.RmaReturnMerchandiseAuthorizationItems[:ln-1]
			break
		}
	}

	return nil
}

// ReturnMerchandiseAuthorizations retrieves all the records using an executor.
func ReturnMerchandiseAuthorizations(mods ...qm.QueryMod) returnMerchandiseAuthorizationQuery {
	mods = append(mods, qm.From("\"inventory\".\"return_merchandise_authorization\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"inventory\".\"return_merchandise_authorization\".*"})
	}

	return returnMerchandiseAuthorizationQuery{q}
}

// FindReturnMerchandiseAuthorization retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReturnMerchandiseAuthorization(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ReturnMerchandiseAuthorization, error) {
	returnMerchandiseAuthorizationObj := &ReturnMerchandiseAuthorization{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"inventory\".\"return_merchandise_authorization\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, returnMerchandiseAuthorizationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: unable to select from return_merchandise_authorization")
	}

	if err = returnMerchandiseAuthorizationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return returnMerchandiseAuthorizationObj, err
	}

	return returnMerchandiseAuthorizationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReturnMerchandiseAuthorization) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("inventory: no return_merchandise_authorization provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(returnMerchandiseAuthorizationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	returnMerchandiseAuthorizationInsertCacheMut.RLock()
	cache, cached := returnMerchandiseAuthorizationInsertCache[key]
	returnMerchandiseAuthorizationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			returnMerchandiseAuthorizationAllColumns,
			returnMerchandiseAuthorizationColumnsWithDefault,
			returnMerchandiseAuthorizationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(returnMerchandiseAuthorizationType, returnMerchandiseAuthorizationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(returnMerchandiseAuthorizationType, returnMerchandiseAuthorizationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inventory\".\"return_merchandise_authorization\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inventory\".\"return_merchandise_authorization\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "inventory: unable to insert into return_merchandise_authorization")
	}

	if !cached {
		returnMerchandiseAuthorizationInsertCacheMut.Lock()
		returnMerchandiseAuthorizationInsertCache[key] = cache
		returnMerchandiseAuthorizationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReturnMerchandiseAuthorization.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReturnMerchandiseAuthorization) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	returnMerchandiseAuthorizationUpdateCacheMut.RLock()
	cache, cached := returnMerchandiseAuthorizationUpdateCache[key]
	returnMerchandiseAuthorizationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			returnMerchandiseAuthorizationAllColumns,
			returnMerchandiseAuthorizationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("inventory: unable to update return_merchandise_authorization, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"inventory\".\"return_merchandise_authorization\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, returnMerchandiseAuthorizationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(returnMerchandiseAuthorizationType, returnMerchandiseAuthorizationMapping, append(wl, returnMerchandiseAuthorizationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update return_merchandise_authorization row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by update for return_merchandise_authorization")
	}

	if !cached {
		returnMerchandiseAuthorizationUpdateCacheMut.Lock()
		returnMerchandiseAuthorizationUpdateCache[key] = cache
		returnMerchandiseAuthorizationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q returnMerchandiseAuthorizationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update all for return_merchandise_authorization")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to retrieve rows affected for return_merchandise_authorization")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReturnMerchandiseAuthorizationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("inventory: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), returnMerchandiseAuthorizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"inventory\".\"return_merchandise_authorization\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, returnMerchandiseAuthorizationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update all in returnMerchandiseAuthorization slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to retrieve rows affected all in update all returnMerchandiseAuthorization")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReturnMerchandiseAuthorization) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("inventory: no return_merchandise_authorization provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(returnMerchandiseAuthorizationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	returnMerchandiseAuthorizationUpsertCacheMut.RLock()
	cache, cached := returnMerchandiseAuthorizationUpsertCache[key]
	returnMerchandiseAuthorizationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			returnMerchandiseAuthorizationAllColumns,
			returnMerchandiseAuthorizationColumnsWithDefault,
			returnMerchandiseAuthorizationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			returnMerchandiseAuthorizationAllColumns,
			returnMerchandiseAuthorizationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("inventory: unable to upsert return_merchandise_authorization, could not build update column list")
		}

		ret := strmangle.SetComplement(returnMerchandiseAuthorizationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(returnMerchandiseAuthorizationPrimaryKeyColumns) == 0 {
				return errors.New("inventory: unable to upsert return_merchandise_authorization, could not build conflict column list")
			}

			conflict = make([]string, len(returnMerchandiseAuthorizationPrimaryKeyColumns))
			copy(conflict, returnMerchandiseAuthorizationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inventory\".\"return_merchandise_authorization\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(returnMerchandiseAuthorizationType, returnMerchandiseAuthorizationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(returnMerchandiseAuthorizationType, returnMerchandiseAuthorizationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "inventory: unable to upsert return_merchandise_authorization")
	}

	if !cached {
		returnMerchandiseAuthorizationUpsertCacheMut.Lock()
		returnMerchandiseAuthorizationUpsertCache[key] = cache
		returnMerchandiseAuthorizationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReturnMerchandiseAuthorization record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReturnMerchandiseAuthorization) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("inventory: no ReturnMerchandiseAuthorization provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), returnMerchandiseAuthorizationPrimaryKeyMapping)
	sql := "DELETE FROM \"inventory\".\"return_merchandise_authorization\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete from return_merchandise_authorization")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by delete for return_merchandise_authorization")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q returnMerchandiseAuthorizationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("inventory: no returnMerchandiseAuthorizationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete all from return_merchandise_authorization")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by deleteall for return_merchandise_authorization")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReturnMerchandiseAuthorizationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(returnMerchandiseAuthorizationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), returnMerchandiseAuthorizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"inventory\".\"return_merchandise_authorization\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, returnMerchandiseAuthorizationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete all from returnMerchandiseAuthorization slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by deleteall for return_merchandise_authorization")
	}

	if len(returnMerchandiseAuthorizationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReturnMerchandiseAuthorization) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReturnMerchandiseAuthorization(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReturnMerchandiseAuthorizationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReturnMerchandiseAuthorizationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), returnMerchandiseAuthorizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"inventory\".\"return_merchandise_authorization\".* FROM \"inventory\".\"return_merchandise_authorization\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, returnMerchandiseAuthorizationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "inventory: unable to reload all in ReturnMerchandiseAuthorizationSlice")
	}

	*o = slice

	return nil
}

// ReturnMerchandiseAuthorizationExists checks if the ReturnMerchandiseAuthorization row exists.
func ReturnMerchandiseAuthorizationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"inventory\".\"return_merchandise_authorization\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "inventory: unable to check if return_merchandise_authorization exists")
	}

	return exists, nil
}

// Exists checks if the ReturnMerchandiseAuthorization row exists.
func (o *ReturnMerchandiseAuthorization) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReturnMerchandiseAuthorizationExists(ctx, exec, o.ID)
}
