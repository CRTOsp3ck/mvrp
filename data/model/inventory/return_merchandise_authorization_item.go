// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package inventory

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ReturnMerchandiseAuthorizationItem is an object representing the database table.
type ReturnMerchandiseAuthorizationItem struct {
	ID          int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	RmaID       null.Int      `boil:"rma_id" json:"rma_id,omitempty" toml:"rma_id" yaml:"rma_id,omitempty"`
	InventoryID null.Int      `boil:"inventory_id" json:"inventory_id,omitempty" toml:"inventory_id" yaml:"inventory_id,omitempty"`
	Quantity    types.Decimal `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	UnitValue   types.Decimal `boil:"unit_value" json:"unit_value" toml:"unit_value" yaml:"unit_value"`
	CreatedAt   time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *returnMerchandiseAuthorizationItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L returnMerchandiseAuthorizationItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReturnMerchandiseAuthorizationItemColumns = struct {
	ID          string
	RmaID       string
	InventoryID string
	Quantity    string
	UnitValue   string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	RmaID:       "rma_id",
	InventoryID: "inventory_id",
	Quantity:    "quantity",
	UnitValue:   "unit_value",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var ReturnMerchandiseAuthorizationItemTableColumns = struct {
	ID          string
	RmaID       string
	InventoryID string
	Quantity    string
	UnitValue   string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "return_merchandise_authorization_item.id",
	RmaID:       "return_merchandise_authorization_item.rma_id",
	InventoryID: "return_merchandise_authorization_item.inventory_id",
	Quantity:    "return_merchandise_authorization_item.quantity",
	UnitValue:   "return_merchandise_authorization_item.unit_value",
	CreatedAt:   "return_merchandise_authorization_item.created_at",
	UpdatedAt:   "return_merchandise_authorization_item.updated_at",
	DeletedAt:   "return_merchandise_authorization_item.deleted_at",
}

// Generated where

var ReturnMerchandiseAuthorizationItemWhere = struct {
	ID          whereHelperint
	RmaID       whereHelpernull_Int
	InventoryID whereHelpernull_Int
	Quantity    whereHelpertypes_Decimal
	UnitValue   whereHelpertypes_Decimal
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "\"inventory\".\"return_merchandise_authorization_item\".\"id\""},
	RmaID:       whereHelpernull_Int{field: "\"inventory\".\"return_merchandise_authorization_item\".\"rma_id\""},
	InventoryID: whereHelpernull_Int{field: "\"inventory\".\"return_merchandise_authorization_item\".\"inventory_id\""},
	Quantity:    whereHelpertypes_Decimal{field: "\"inventory\".\"return_merchandise_authorization_item\".\"quantity\""},
	UnitValue:   whereHelpertypes_Decimal{field: "\"inventory\".\"return_merchandise_authorization_item\".\"unit_value\""},
	CreatedAt:   whereHelpertime_Time{field: "\"inventory\".\"return_merchandise_authorization_item\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"inventory\".\"return_merchandise_authorization_item\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"inventory\".\"return_merchandise_authorization_item\".\"deleted_at\""},
}

// ReturnMerchandiseAuthorizationItemRels is where relationship names are stored.
var ReturnMerchandiseAuthorizationItemRels = struct {
	Inventory string
	Rma       string
}{
	Inventory: "Inventory",
	Rma:       "Rma",
}

// returnMerchandiseAuthorizationItemR is where relationships are stored.
type returnMerchandiseAuthorizationItemR struct {
	Inventory *Inventory                      `boil:"Inventory" json:"Inventory" toml:"Inventory" yaml:"Inventory"`
	Rma       *ReturnMerchandiseAuthorization `boil:"Rma" json:"Rma" toml:"Rma" yaml:"Rma"`
}

// NewStruct creates a new relationship struct
func (*returnMerchandiseAuthorizationItemR) NewStruct() *returnMerchandiseAuthorizationItemR {
	return &returnMerchandiseAuthorizationItemR{}
}

func (r *returnMerchandiseAuthorizationItemR) GetInventory() *Inventory {
	if r == nil {
		return nil
	}
	return r.Inventory
}

func (r *returnMerchandiseAuthorizationItemR) GetRma() *ReturnMerchandiseAuthorization {
	if r == nil {
		return nil
	}
	return r.Rma
}

// returnMerchandiseAuthorizationItemL is where Load methods for each relationship are stored.
type returnMerchandiseAuthorizationItemL struct{}

var (
	returnMerchandiseAuthorizationItemAllColumns            = []string{"id", "rma_id", "inventory_id", "quantity", "unit_value", "created_at", "updated_at", "deleted_at"}
	returnMerchandiseAuthorizationItemColumnsWithoutDefault = []string{"id", "quantity", "unit_value", "created_at", "updated_at"}
	returnMerchandiseAuthorizationItemColumnsWithDefault    = []string{"rma_id", "inventory_id", "deleted_at"}
	returnMerchandiseAuthorizationItemPrimaryKeyColumns     = []string{"id"}
	returnMerchandiseAuthorizationItemGeneratedColumns      = []string{}
)

type (
	// ReturnMerchandiseAuthorizationItemSlice is an alias for a slice of pointers to ReturnMerchandiseAuthorizationItem.
	// This should almost always be used instead of []ReturnMerchandiseAuthorizationItem.
	ReturnMerchandiseAuthorizationItemSlice []*ReturnMerchandiseAuthorizationItem
	// ReturnMerchandiseAuthorizationItemHook is the signature for custom ReturnMerchandiseAuthorizationItem hook methods
	ReturnMerchandiseAuthorizationItemHook func(context.Context, boil.ContextExecutor, *ReturnMerchandiseAuthorizationItem) error

	returnMerchandiseAuthorizationItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	returnMerchandiseAuthorizationItemType                 = reflect.TypeOf(&ReturnMerchandiseAuthorizationItem{})
	returnMerchandiseAuthorizationItemMapping              = queries.MakeStructMapping(returnMerchandiseAuthorizationItemType)
	returnMerchandiseAuthorizationItemPrimaryKeyMapping, _ = queries.BindMapping(returnMerchandiseAuthorizationItemType, returnMerchandiseAuthorizationItemMapping, returnMerchandiseAuthorizationItemPrimaryKeyColumns)
	returnMerchandiseAuthorizationItemInsertCacheMut       sync.RWMutex
	returnMerchandiseAuthorizationItemInsertCache          = make(map[string]insertCache)
	returnMerchandiseAuthorizationItemUpdateCacheMut       sync.RWMutex
	returnMerchandiseAuthorizationItemUpdateCache          = make(map[string]updateCache)
	returnMerchandiseAuthorizationItemUpsertCacheMut       sync.RWMutex
	returnMerchandiseAuthorizationItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var returnMerchandiseAuthorizationItemAfterSelectMu sync.Mutex
var returnMerchandiseAuthorizationItemAfterSelectHooks []ReturnMerchandiseAuthorizationItemHook

var returnMerchandiseAuthorizationItemBeforeInsertMu sync.Mutex
var returnMerchandiseAuthorizationItemBeforeInsertHooks []ReturnMerchandiseAuthorizationItemHook
var returnMerchandiseAuthorizationItemAfterInsertMu sync.Mutex
var returnMerchandiseAuthorizationItemAfterInsertHooks []ReturnMerchandiseAuthorizationItemHook

var returnMerchandiseAuthorizationItemBeforeUpdateMu sync.Mutex
var returnMerchandiseAuthorizationItemBeforeUpdateHooks []ReturnMerchandiseAuthorizationItemHook
var returnMerchandiseAuthorizationItemAfterUpdateMu sync.Mutex
var returnMerchandiseAuthorizationItemAfterUpdateHooks []ReturnMerchandiseAuthorizationItemHook

var returnMerchandiseAuthorizationItemBeforeDeleteMu sync.Mutex
var returnMerchandiseAuthorizationItemBeforeDeleteHooks []ReturnMerchandiseAuthorizationItemHook
var returnMerchandiseAuthorizationItemAfterDeleteMu sync.Mutex
var returnMerchandiseAuthorizationItemAfterDeleteHooks []ReturnMerchandiseAuthorizationItemHook

var returnMerchandiseAuthorizationItemBeforeUpsertMu sync.Mutex
var returnMerchandiseAuthorizationItemBeforeUpsertHooks []ReturnMerchandiseAuthorizationItemHook
var returnMerchandiseAuthorizationItemAfterUpsertMu sync.Mutex
var returnMerchandiseAuthorizationItemAfterUpsertHooks []ReturnMerchandiseAuthorizationItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReturnMerchandiseAuthorizationItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReturnMerchandiseAuthorizationItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReturnMerchandiseAuthorizationItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReturnMerchandiseAuthorizationItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReturnMerchandiseAuthorizationItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReturnMerchandiseAuthorizationItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReturnMerchandiseAuthorizationItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReturnMerchandiseAuthorizationItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReturnMerchandiseAuthorizationItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range returnMerchandiseAuthorizationItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReturnMerchandiseAuthorizationItemHook registers your hook function for all future operations.
func AddReturnMerchandiseAuthorizationItemHook(hookPoint boil.HookPoint, returnMerchandiseAuthorizationItemHook ReturnMerchandiseAuthorizationItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		returnMerchandiseAuthorizationItemAfterSelectMu.Lock()
		returnMerchandiseAuthorizationItemAfterSelectHooks = append(returnMerchandiseAuthorizationItemAfterSelectHooks, returnMerchandiseAuthorizationItemHook)
		returnMerchandiseAuthorizationItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		returnMerchandiseAuthorizationItemBeforeInsertMu.Lock()
		returnMerchandiseAuthorizationItemBeforeInsertHooks = append(returnMerchandiseAuthorizationItemBeforeInsertHooks, returnMerchandiseAuthorizationItemHook)
		returnMerchandiseAuthorizationItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		returnMerchandiseAuthorizationItemAfterInsertMu.Lock()
		returnMerchandiseAuthorizationItemAfterInsertHooks = append(returnMerchandiseAuthorizationItemAfterInsertHooks, returnMerchandiseAuthorizationItemHook)
		returnMerchandiseAuthorizationItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		returnMerchandiseAuthorizationItemBeforeUpdateMu.Lock()
		returnMerchandiseAuthorizationItemBeforeUpdateHooks = append(returnMerchandiseAuthorizationItemBeforeUpdateHooks, returnMerchandiseAuthorizationItemHook)
		returnMerchandiseAuthorizationItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		returnMerchandiseAuthorizationItemAfterUpdateMu.Lock()
		returnMerchandiseAuthorizationItemAfterUpdateHooks = append(returnMerchandiseAuthorizationItemAfterUpdateHooks, returnMerchandiseAuthorizationItemHook)
		returnMerchandiseAuthorizationItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		returnMerchandiseAuthorizationItemBeforeDeleteMu.Lock()
		returnMerchandiseAuthorizationItemBeforeDeleteHooks = append(returnMerchandiseAuthorizationItemBeforeDeleteHooks, returnMerchandiseAuthorizationItemHook)
		returnMerchandiseAuthorizationItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		returnMerchandiseAuthorizationItemAfterDeleteMu.Lock()
		returnMerchandiseAuthorizationItemAfterDeleteHooks = append(returnMerchandiseAuthorizationItemAfterDeleteHooks, returnMerchandiseAuthorizationItemHook)
		returnMerchandiseAuthorizationItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		returnMerchandiseAuthorizationItemBeforeUpsertMu.Lock()
		returnMerchandiseAuthorizationItemBeforeUpsertHooks = append(returnMerchandiseAuthorizationItemBeforeUpsertHooks, returnMerchandiseAuthorizationItemHook)
		returnMerchandiseAuthorizationItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		returnMerchandiseAuthorizationItemAfterUpsertMu.Lock()
		returnMerchandiseAuthorizationItemAfterUpsertHooks = append(returnMerchandiseAuthorizationItemAfterUpsertHooks, returnMerchandiseAuthorizationItemHook)
		returnMerchandiseAuthorizationItemAfterUpsertMu.Unlock()
	}
}

// One returns a single returnMerchandiseAuthorizationItem record from the query.
func (q returnMerchandiseAuthorizationItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReturnMerchandiseAuthorizationItem, error) {
	o := &ReturnMerchandiseAuthorizationItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: failed to execute a one query for return_merchandise_authorization_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReturnMerchandiseAuthorizationItem records from the query.
func (q returnMerchandiseAuthorizationItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReturnMerchandiseAuthorizationItemSlice, error) {
	var o []*ReturnMerchandiseAuthorizationItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "inventory: failed to assign all query results to ReturnMerchandiseAuthorizationItem slice")
	}

	if len(returnMerchandiseAuthorizationItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReturnMerchandiseAuthorizationItem records in the query.
func (q returnMerchandiseAuthorizationItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to count return_merchandise_authorization_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q returnMerchandiseAuthorizationItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "inventory: failed to check if return_merchandise_authorization_item exists")
	}

	return count > 0, nil
}

// Inventory pointed to by the foreign key.
func (o *ReturnMerchandiseAuthorizationItem) Inventory(mods ...qm.QueryMod) inventoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InventoryID),
	}

	queryMods = append(queryMods, mods...)

	return Inventories(queryMods...)
}

// Rma pointed to by the foreign key.
func (o *ReturnMerchandiseAuthorizationItem) Rma(mods ...qm.QueryMod) returnMerchandiseAuthorizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RmaID),
	}

	queryMods = append(queryMods, mods...)

	return ReturnMerchandiseAuthorizations(queryMods...)
}

// LoadInventory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (returnMerchandiseAuthorizationItemL) LoadInventory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReturnMerchandiseAuthorizationItem interface{}, mods queries.Applicator) error {
	var slice []*ReturnMerchandiseAuthorizationItem
	var object *ReturnMerchandiseAuthorizationItem

	if singular {
		var ok bool
		object, ok = maybeReturnMerchandiseAuthorizationItem.(*ReturnMerchandiseAuthorizationItem)
		if !ok {
			object = new(ReturnMerchandiseAuthorizationItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReturnMerchandiseAuthorizationItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReturnMerchandiseAuthorizationItem))
			}
		}
	} else {
		s, ok := maybeReturnMerchandiseAuthorizationItem.(*[]*ReturnMerchandiseAuthorizationItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReturnMerchandiseAuthorizationItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReturnMerchandiseAuthorizationItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &returnMerchandiseAuthorizationItemR{}
		}
		if !queries.IsNil(object.InventoryID) {
			args[object.InventoryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &returnMerchandiseAuthorizationItemR{}
			}

			if !queries.IsNil(obj.InventoryID) {
				args[obj.InventoryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`inventory.inventory`),
		qm.WhereIn(`inventory.inventory.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Inventory")
	}

	var resultSlice []*Inventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for inventory")
	}

	if len(inventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Inventory = foreign
		if foreign.R == nil {
			foreign.R = &inventoryR{}
		}
		foreign.R.ReturnMerchandiseAuthorizationItems = append(foreign.R.ReturnMerchandiseAuthorizationItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InventoryID, foreign.ID) {
				local.R.Inventory = foreign
				if foreign.R == nil {
					foreign.R = &inventoryR{}
				}
				foreign.R.ReturnMerchandiseAuthorizationItems = append(foreign.R.ReturnMerchandiseAuthorizationItems, local)
				break
			}
		}
	}

	return nil
}

// LoadRma allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (returnMerchandiseAuthorizationItemL) LoadRma(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReturnMerchandiseAuthorizationItem interface{}, mods queries.Applicator) error {
	var slice []*ReturnMerchandiseAuthorizationItem
	var object *ReturnMerchandiseAuthorizationItem

	if singular {
		var ok bool
		object, ok = maybeReturnMerchandiseAuthorizationItem.(*ReturnMerchandiseAuthorizationItem)
		if !ok {
			object = new(ReturnMerchandiseAuthorizationItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReturnMerchandiseAuthorizationItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReturnMerchandiseAuthorizationItem))
			}
		}
	} else {
		s, ok := maybeReturnMerchandiseAuthorizationItem.(*[]*ReturnMerchandiseAuthorizationItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReturnMerchandiseAuthorizationItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReturnMerchandiseAuthorizationItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &returnMerchandiseAuthorizationItemR{}
		}
		if !queries.IsNil(object.RmaID) {
			args[object.RmaID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &returnMerchandiseAuthorizationItemR{}
			}

			if !queries.IsNil(obj.RmaID) {
				args[obj.RmaID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`inventory.return_merchandise_authorization`),
		qm.WhereIn(`inventory.return_merchandise_authorization.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ReturnMerchandiseAuthorization")
	}

	var resultSlice []*ReturnMerchandiseAuthorization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ReturnMerchandiseAuthorization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for return_merchandise_authorization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for return_merchandise_authorization")
	}

	if len(returnMerchandiseAuthorizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Rma = foreign
		if foreign.R == nil {
			foreign.R = &returnMerchandiseAuthorizationR{}
		}
		foreign.R.RmaReturnMerchandiseAuthorizationItems = append(foreign.R.RmaReturnMerchandiseAuthorizationItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RmaID, foreign.ID) {
				local.R.Rma = foreign
				if foreign.R == nil {
					foreign.R = &returnMerchandiseAuthorizationR{}
				}
				foreign.R.RmaReturnMerchandiseAuthorizationItems = append(foreign.R.RmaReturnMerchandiseAuthorizationItems, local)
				break
			}
		}
	}

	return nil
}

// SetInventory of the returnMerchandiseAuthorizationItem to the related item.
// Sets o.R.Inventory to related.
// Adds o to related.R.ReturnMerchandiseAuthorizationItems.
func (o *ReturnMerchandiseAuthorizationItem) SetInventory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Inventory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"inventory\".\"return_merchandise_authorization_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"inventory_id"}),
		strmangle.WhereClause("\"", "\"", 2, returnMerchandiseAuthorizationItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InventoryID, related.ID)
	if o.R == nil {
		o.R = &returnMerchandiseAuthorizationItemR{
			Inventory: related,
		}
	} else {
		o.R.Inventory = related
	}

	if related.R == nil {
		related.R = &inventoryR{
			ReturnMerchandiseAuthorizationItems: ReturnMerchandiseAuthorizationItemSlice{o},
		}
	} else {
		related.R.ReturnMerchandiseAuthorizationItems = append(related.R.ReturnMerchandiseAuthorizationItems, o)
	}

	return nil
}

// RemoveInventory relationship.
// Sets o.R.Inventory to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ReturnMerchandiseAuthorizationItem) RemoveInventory(ctx context.Context, exec boil.ContextExecutor, related *Inventory) error {
	var err error

	queries.SetScanner(&o.InventoryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("inventory_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Inventory = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ReturnMerchandiseAuthorizationItems {
		if queries.Equal(o.InventoryID, ri.InventoryID) {
			continue
		}

		ln := len(related.R.ReturnMerchandiseAuthorizationItems)
		if ln > 1 && i < ln-1 {
			related.R.ReturnMerchandiseAuthorizationItems[i] = related.R.ReturnMerchandiseAuthorizationItems[ln-1]
		}
		related.R.ReturnMerchandiseAuthorizationItems = related.R.ReturnMerchandiseAuthorizationItems[:ln-1]
		break
	}
	return nil
}

// SetRma of the returnMerchandiseAuthorizationItem to the related item.
// Sets o.R.Rma to related.
// Adds o to related.R.RmaReturnMerchandiseAuthorizationItems.
func (o *ReturnMerchandiseAuthorizationItem) SetRma(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ReturnMerchandiseAuthorization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"inventory\".\"return_merchandise_authorization_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"rma_id"}),
		strmangle.WhereClause("\"", "\"", 2, returnMerchandiseAuthorizationItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RmaID, related.ID)
	if o.R == nil {
		o.R = &returnMerchandiseAuthorizationItemR{
			Rma: related,
		}
	} else {
		o.R.Rma = related
	}

	if related.R == nil {
		related.R = &returnMerchandiseAuthorizationR{
			RmaReturnMerchandiseAuthorizationItems: ReturnMerchandiseAuthorizationItemSlice{o},
		}
	} else {
		related.R.RmaReturnMerchandiseAuthorizationItems = append(related.R.RmaReturnMerchandiseAuthorizationItems, o)
	}

	return nil
}

// RemoveRma relationship.
// Sets o.R.Rma to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ReturnMerchandiseAuthorizationItem) RemoveRma(ctx context.Context, exec boil.ContextExecutor, related *ReturnMerchandiseAuthorization) error {
	var err error

	queries.SetScanner(&o.RmaID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("rma_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Rma = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RmaReturnMerchandiseAuthorizationItems {
		if queries.Equal(o.RmaID, ri.RmaID) {
			continue
		}

		ln := len(related.R.RmaReturnMerchandiseAuthorizationItems)
		if ln > 1 && i < ln-1 {
			related.R.RmaReturnMerchandiseAuthorizationItems[i] = related.R.RmaReturnMerchandiseAuthorizationItems[ln-1]
		}
		related.R.RmaReturnMerchandiseAuthorizationItems = related.R.RmaReturnMerchandiseAuthorizationItems[:ln-1]
		break
	}
	return nil
}

// ReturnMerchandiseAuthorizationItems retrieves all the records using an executor.
func ReturnMerchandiseAuthorizationItems(mods ...qm.QueryMod) returnMerchandiseAuthorizationItemQuery {
	mods = append(mods, qm.From("\"inventory\".\"return_merchandise_authorization_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"inventory\".\"return_merchandise_authorization_item\".*"})
	}

	return returnMerchandiseAuthorizationItemQuery{q}
}

// FindReturnMerchandiseAuthorizationItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReturnMerchandiseAuthorizationItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ReturnMerchandiseAuthorizationItem, error) {
	returnMerchandiseAuthorizationItemObj := &ReturnMerchandiseAuthorizationItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"inventory\".\"return_merchandise_authorization_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, returnMerchandiseAuthorizationItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: unable to select from return_merchandise_authorization_item")
	}

	if err = returnMerchandiseAuthorizationItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return returnMerchandiseAuthorizationItemObj, err
	}

	return returnMerchandiseAuthorizationItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReturnMerchandiseAuthorizationItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("inventory: no return_merchandise_authorization_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(returnMerchandiseAuthorizationItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	returnMerchandiseAuthorizationItemInsertCacheMut.RLock()
	cache, cached := returnMerchandiseAuthorizationItemInsertCache[key]
	returnMerchandiseAuthorizationItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			returnMerchandiseAuthorizationItemAllColumns,
			returnMerchandiseAuthorizationItemColumnsWithDefault,
			returnMerchandiseAuthorizationItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(returnMerchandiseAuthorizationItemType, returnMerchandiseAuthorizationItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(returnMerchandiseAuthorizationItemType, returnMerchandiseAuthorizationItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inventory\".\"return_merchandise_authorization_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inventory\".\"return_merchandise_authorization_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "inventory: unable to insert into return_merchandise_authorization_item")
	}

	if !cached {
		returnMerchandiseAuthorizationItemInsertCacheMut.Lock()
		returnMerchandiseAuthorizationItemInsertCache[key] = cache
		returnMerchandiseAuthorizationItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReturnMerchandiseAuthorizationItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReturnMerchandiseAuthorizationItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	returnMerchandiseAuthorizationItemUpdateCacheMut.RLock()
	cache, cached := returnMerchandiseAuthorizationItemUpdateCache[key]
	returnMerchandiseAuthorizationItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			returnMerchandiseAuthorizationItemAllColumns,
			returnMerchandiseAuthorizationItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("inventory: unable to update return_merchandise_authorization_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"inventory\".\"return_merchandise_authorization_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, returnMerchandiseAuthorizationItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(returnMerchandiseAuthorizationItemType, returnMerchandiseAuthorizationItemMapping, append(wl, returnMerchandiseAuthorizationItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update return_merchandise_authorization_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by update for return_merchandise_authorization_item")
	}

	if !cached {
		returnMerchandiseAuthorizationItemUpdateCacheMut.Lock()
		returnMerchandiseAuthorizationItemUpdateCache[key] = cache
		returnMerchandiseAuthorizationItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q returnMerchandiseAuthorizationItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update all for return_merchandise_authorization_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to retrieve rows affected for return_merchandise_authorization_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReturnMerchandiseAuthorizationItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("inventory: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), returnMerchandiseAuthorizationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"inventory\".\"return_merchandise_authorization_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, returnMerchandiseAuthorizationItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update all in returnMerchandiseAuthorizationItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to retrieve rows affected all in update all returnMerchandiseAuthorizationItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReturnMerchandiseAuthorizationItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("inventory: no return_merchandise_authorization_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(returnMerchandiseAuthorizationItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	returnMerchandiseAuthorizationItemUpsertCacheMut.RLock()
	cache, cached := returnMerchandiseAuthorizationItemUpsertCache[key]
	returnMerchandiseAuthorizationItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			returnMerchandiseAuthorizationItemAllColumns,
			returnMerchandiseAuthorizationItemColumnsWithDefault,
			returnMerchandiseAuthorizationItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			returnMerchandiseAuthorizationItemAllColumns,
			returnMerchandiseAuthorizationItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("inventory: unable to upsert return_merchandise_authorization_item, could not build update column list")
		}

		ret := strmangle.SetComplement(returnMerchandiseAuthorizationItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(returnMerchandiseAuthorizationItemPrimaryKeyColumns) == 0 {
				return errors.New("inventory: unable to upsert return_merchandise_authorization_item, could not build conflict column list")
			}

			conflict = make([]string, len(returnMerchandiseAuthorizationItemPrimaryKeyColumns))
			copy(conflict, returnMerchandiseAuthorizationItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inventory\".\"return_merchandise_authorization_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(returnMerchandiseAuthorizationItemType, returnMerchandiseAuthorizationItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(returnMerchandiseAuthorizationItemType, returnMerchandiseAuthorizationItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "inventory: unable to upsert return_merchandise_authorization_item")
	}

	if !cached {
		returnMerchandiseAuthorizationItemUpsertCacheMut.Lock()
		returnMerchandiseAuthorizationItemUpsertCache[key] = cache
		returnMerchandiseAuthorizationItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReturnMerchandiseAuthorizationItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReturnMerchandiseAuthorizationItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("inventory: no ReturnMerchandiseAuthorizationItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), returnMerchandiseAuthorizationItemPrimaryKeyMapping)
	sql := "DELETE FROM \"inventory\".\"return_merchandise_authorization_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete from return_merchandise_authorization_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by delete for return_merchandise_authorization_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q returnMerchandiseAuthorizationItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("inventory: no returnMerchandiseAuthorizationItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete all from return_merchandise_authorization_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by deleteall for return_merchandise_authorization_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReturnMerchandiseAuthorizationItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(returnMerchandiseAuthorizationItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), returnMerchandiseAuthorizationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"inventory\".\"return_merchandise_authorization_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, returnMerchandiseAuthorizationItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete all from returnMerchandiseAuthorizationItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by deleteall for return_merchandise_authorization_item")
	}

	if len(returnMerchandiseAuthorizationItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReturnMerchandiseAuthorizationItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReturnMerchandiseAuthorizationItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReturnMerchandiseAuthorizationItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReturnMerchandiseAuthorizationItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), returnMerchandiseAuthorizationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"inventory\".\"return_merchandise_authorization_item\".* FROM \"inventory\".\"return_merchandise_authorization_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, returnMerchandiseAuthorizationItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "inventory: unable to reload all in ReturnMerchandiseAuthorizationItemSlice")
	}

	*o = slice

	return nil
}

// ReturnMerchandiseAuthorizationItemExists checks if the ReturnMerchandiseAuthorizationItem row exists.
func ReturnMerchandiseAuthorizationItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"inventory\".\"return_merchandise_authorization_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "inventory: unable to check if return_merchandise_authorization_item exists")
	}

	return exists, nil
}

// Exists checks if the ReturnMerchandiseAuthorizationItem row exists.
func (o *ReturnMerchandiseAuthorizationItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReturnMerchandiseAuthorizationItemExists(ctx, exec, o.ID)
}
