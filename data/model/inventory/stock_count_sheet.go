// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package inventory

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// StockCountSheet is an object representing the database table.
type StockCountSheet struct {
	ID                  int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	SCSNumber           string            `boil:"scs_number" json:"scs_number" toml:"scs_number" yaml:"scs_number"`
	InventoryID         null.Int          `boil:"inventory_id" json:"inventory_id,omitempty" toml:"inventory_id" yaml:"inventory_id,omitempty"`
	CountDate           null.Time         `boil:"count_date" json:"count_date,omitempty" toml:"count_date" yaml:"count_date,omitempty"`
	CountedByEmployeeID null.Int          `boil:"counted_by_employee_id" json:"counted_by_employee_id,omitempty" toml:"counted_by_employee_id" yaml:"counted_by_employee_id,omitempty"`
	TotalQuantity       types.Decimal     `boil:"total_quantity" json:"total_quantity" toml:"total_quantity" yaml:"total_quantity"`
	DiscrepanciesGen    types.NullDecimal `boil:"discrepancies_gen" json:"discrepancies_gen,omitempty" toml:"discrepancies_gen" yaml:"discrepancies_gen,omitempty"`
	Notes               null.String       `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	CreatedAt           time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt           null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *stockCountSheetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stockCountSheetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StockCountSheetColumns = struct {
	ID                  string
	SCSNumber           string
	InventoryID         string
	CountDate           string
	CountedByEmployeeID string
	TotalQuantity       string
	DiscrepanciesGen    string
	Notes               string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	ID:                  "id",
	SCSNumber:           "scs_number",
	InventoryID:         "inventory_id",
	CountDate:           "count_date",
	CountedByEmployeeID: "counted_by_employee_id",
	TotalQuantity:       "total_quantity",
	DiscrepanciesGen:    "discrepancies_gen",
	Notes:               "notes",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
}

var StockCountSheetTableColumns = struct {
	ID                  string
	SCSNumber           string
	InventoryID         string
	CountDate           string
	CountedByEmployeeID string
	TotalQuantity       string
	DiscrepanciesGen    string
	Notes               string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	ID:                  "stock_count_sheet.id",
	SCSNumber:           "stock_count_sheet.scs_number",
	InventoryID:         "stock_count_sheet.inventory_id",
	CountDate:           "stock_count_sheet.count_date",
	CountedByEmployeeID: "stock_count_sheet.counted_by_employee_id",
	TotalQuantity:       "stock_count_sheet.total_quantity",
	DiscrepanciesGen:    "stock_count_sheet.discrepancies_gen",
	Notes:               "stock_count_sheet.notes",
	CreatedAt:           "stock_count_sheet.created_at",
	UpdatedAt:           "stock_count_sheet.updated_at",
	DeletedAt:           "stock_count_sheet.deleted_at",
}

// Generated where

var StockCountSheetWhere = struct {
	ID                  whereHelperint
	SCSNumber           whereHelperstring
	InventoryID         whereHelpernull_Int
	CountDate           whereHelpernull_Time
	CountedByEmployeeID whereHelpernull_Int
	TotalQuantity       whereHelpertypes_Decimal
	DiscrepanciesGen    whereHelpertypes_NullDecimal
	Notes               whereHelpernull_String
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
	DeletedAt           whereHelpernull_Time
}{
	ID:                  whereHelperint{field: "\"inventory\".\"stock_count_sheet\".\"id\""},
	SCSNumber:           whereHelperstring{field: "\"inventory\".\"stock_count_sheet\".\"scs_number\""},
	InventoryID:         whereHelpernull_Int{field: "\"inventory\".\"stock_count_sheet\".\"inventory_id\""},
	CountDate:           whereHelpernull_Time{field: "\"inventory\".\"stock_count_sheet\".\"count_date\""},
	CountedByEmployeeID: whereHelpernull_Int{field: "\"inventory\".\"stock_count_sheet\".\"counted_by_employee_id\""},
	TotalQuantity:       whereHelpertypes_Decimal{field: "\"inventory\".\"stock_count_sheet\".\"total_quantity\""},
	DiscrepanciesGen:    whereHelpertypes_NullDecimal{field: "\"inventory\".\"stock_count_sheet\".\"discrepancies_gen\""},
	Notes:               whereHelpernull_String{field: "\"inventory\".\"stock_count_sheet\".\"notes\""},
	CreatedAt:           whereHelpertime_Time{field: "\"inventory\".\"stock_count_sheet\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"inventory\".\"stock_count_sheet\".\"updated_at\""},
	DeletedAt:           whereHelpernull_Time{field: "\"inventory\".\"stock_count_sheet\".\"deleted_at\""},
}

// StockCountSheetRels is where relationship names are stored.
var StockCountSheetRels = struct {
	Inventory string
}{
	Inventory: "Inventory",
}

// stockCountSheetR is where relationships are stored.
type stockCountSheetR struct {
	Inventory *Inventory `boil:"Inventory" json:"Inventory" toml:"Inventory" yaml:"Inventory"`
}

// NewStruct creates a new relationship struct
func (*stockCountSheetR) NewStruct() *stockCountSheetR {
	return &stockCountSheetR{}
}

func (r *stockCountSheetR) GetInventory() *Inventory {
	if r == nil {
		return nil
	}
	return r.Inventory
}

// stockCountSheetL is where Load methods for each relationship are stored.
type stockCountSheetL struct{}

var (
	stockCountSheetAllColumns            = []string{"id", "scs_number", "inventory_id", "count_date", "counted_by_employee_id", "total_quantity", "discrepancies_gen", "notes", "created_at", "updated_at", "deleted_at"}
	stockCountSheetColumnsWithoutDefault = []string{"id", "scs_number", "total_quantity", "created_at", "updated_at"}
	stockCountSheetColumnsWithDefault    = []string{"inventory_id", "count_date", "counted_by_employee_id", "discrepancies_gen", "notes", "deleted_at"}
	stockCountSheetPrimaryKeyColumns     = []string{"id"}
	stockCountSheetGeneratedColumns      = []string{}
)

type (
	// StockCountSheetSlice is an alias for a slice of pointers to StockCountSheet.
	// This should almost always be used instead of []StockCountSheet.
	StockCountSheetSlice []*StockCountSheet
	// StockCountSheetHook is the signature for custom StockCountSheet hook methods
	StockCountSheetHook func(context.Context, boil.ContextExecutor, *StockCountSheet) error

	stockCountSheetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stockCountSheetType                 = reflect.TypeOf(&StockCountSheet{})
	stockCountSheetMapping              = queries.MakeStructMapping(stockCountSheetType)
	stockCountSheetPrimaryKeyMapping, _ = queries.BindMapping(stockCountSheetType, stockCountSheetMapping, stockCountSheetPrimaryKeyColumns)
	stockCountSheetInsertCacheMut       sync.RWMutex
	stockCountSheetInsertCache          = make(map[string]insertCache)
	stockCountSheetUpdateCacheMut       sync.RWMutex
	stockCountSheetUpdateCache          = make(map[string]updateCache)
	stockCountSheetUpsertCacheMut       sync.RWMutex
	stockCountSheetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stockCountSheetAfterSelectMu sync.Mutex
var stockCountSheetAfterSelectHooks []StockCountSheetHook

var stockCountSheetBeforeInsertMu sync.Mutex
var stockCountSheetBeforeInsertHooks []StockCountSheetHook
var stockCountSheetAfterInsertMu sync.Mutex
var stockCountSheetAfterInsertHooks []StockCountSheetHook

var stockCountSheetBeforeUpdateMu sync.Mutex
var stockCountSheetBeforeUpdateHooks []StockCountSheetHook
var stockCountSheetAfterUpdateMu sync.Mutex
var stockCountSheetAfterUpdateHooks []StockCountSheetHook

var stockCountSheetBeforeDeleteMu sync.Mutex
var stockCountSheetBeforeDeleteHooks []StockCountSheetHook
var stockCountSheetAfterDeleteMu sync.Mutex
var stockCountSheetAfterDeleteHooks []StockCountSheetHook

var stockCountSheetBeforeUpsertMu sync.Mutex
var stockCountSheetBeforeUpsertHooks []StockCountSheetHook
var stockCountSheetAfterUpsertMu sync.Mutex
var stockCountSheetAfterUpsertHooks []StockCountSheetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StockCountSheet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StockCountSheet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StockCountSheet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StockCountSheet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StockCountSheet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StockCountSheet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StockCountSheet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StockCountSheet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StockCountSheet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stockCountSheetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStockCountSheetHook registers your hook function for all future operations.
func AddStockCountSheetHook(hookPoint boil.HookPoint, stockCountSheetHook StockCountSheetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		stockCountSheetAfterSelectMu.Lock()
		stockCountSheetAfterSelectHooks = append(stockCountSheetAfterSelectHooks, stockCountSheetHook)
		stockCountSheetAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		stockCountSheetBeforeInsertMu.Lock()
		stockCountSheetBeforeInsertHooks = append(stockCountSheetBeforeInsertHooks, stockCountSheetHook)
		stockCountSheetBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		stockCountSheetAfterInsertMu.Lock()
		stockCountSheetAfterInsertHooks = append(stockCountSheetAfterInsertHooks, stockCountSheetHook)
		stockCountSheetAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		stockCountSheetBeforeUpdateMu.Lock()
		stockCountSheetBeforeUpdateHooks = append(stockCountSheetBeforeUpdateHooks, stockCountSheetHook)
		stockCountSheetBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		stockCountSheetAfterUpdateMu.Lock()
		stockCountSheetAfterUpdateHooks = append(stockCountSheetAfterUpdateHooks, stockCountSheetHook)
		stockCountSheetAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		stockCountSheetBeforeDeleteMu.Lock()
		stockCountSheetBeforeDeleteHooks = append(stockCountSheetBeforeDeleteHooks, stockCountSheetHook)
		stockCountSheetBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		stockCountSheetAfterDeleteMu.Lock()
		stockCountSheetAfterDeleteHooks = append(stockCountSheetAfterDeleteHooks, stockCountSheetHook)
		stockCountSheetAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		stockCountSheetBeforeUpsertMu.Lock()
		stockCountSheetBeforeUpsertHooks = append(stockCountSheetBeforeUpsertHooks, stockCountSheetHook)
		stockCountSheetBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		stockCountSheetAfterUpsertMu.Lock()
		stockCountSheetAfterUpsertHooks = append(stockCountSheetAfterUpsertHooks, stockCountSheetHook)
		stockCountSheetAfterUpsertMu.Unlock()
	}
}

// One returns a single stockCountSheet record from the query.
func (q stockCountSheetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StockCountSheet, error) {
	o := &StockCountSheet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: failed to execute a one query for stock_count_sheet")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StockCountSheet records from the query.
func (q stockCountSheetQuery) All(ctx context.Context, exec boil.ContextExecutor) (StockCountSheetSlice, error) {
	var o []*StockCountSheet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "inventory: failed to assign all query results to StockCountSheet slice")
	}

	if len(stockCountSheetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StockCountSheet records in the query.
func (q stockCountSheetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to count stock_count_sheet rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stockCountSheetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "inventory: failed to check if stock_count_sheet exists")
	}

	return count > 0, nil
}

// Inventory pointed to by the foreign key.
func (o *StockCountSheet) Inventory(mods ...qm.QueryMod) inventoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InventoryID),
	}

	queryMods = append(queryMods, mods...)

	return Inventories(queryMods...)
}

// LoadInventory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stockCountSheetL) LoadInventory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStockCountSheet interface{}, mods queries.Applicator) error {
	var slice []*StockCountSheet
	var object *StockCountSheet

	if singular {
		var ok bool
		object, ok = maybeStockCountSheet.(*StockCountSheet)
		if !ok {
			object = new(StockCountSheet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStockCountSheet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStockCountSheet))
			}
		}
	} else {
		s, ok := maybeStockCountSheet.(*[]*StockCountSheet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStockCountSheet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStockCountSheet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &stockCountSheetR{}
		}
		if !queries.IsNil(object.InventoryID) {
			args[object.InventoryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockCountSheetR{}
			}

			if !queries.IsNil(obj.InventoryID) {
				args[obj.InventoryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`inventory.inventory`),
		qm.WhereIn(`inventory.inventory.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Inventory")
	}

	var resultSlice []*Inventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for inventory")
	}

	if len(inventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Inventory = foreign
		if foreign.R == nil {
			foreign.R = &inventoryR{}
		}
		foreign.R.StockCountSheets = append(foreign.R.StockCountSheets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InventoryID, foreign.ID) {
				local.R.Inventory = foreign
				if foreign.R == nil {
					foreign.R = &inventoryR{}
				}
				foreign.R.StockCountSheets = append(foreign.R.StockCountSheets, local)
				break
			}
		}
	}

	return nil
}

// SetInventory of the stockCountSheet to the related item.
// Sets o.R.Inventory to related.
// Adds o to related.R.StockCountSheets.
func (o *StockCountSheet) SetInventory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Inventory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"inventory\".\"stock_count_sheet\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"inventory_id"}),
		strmangle.WhereClause("\"", "\"", 2, stockCountSheetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InventoryID, related.ID)
	if o.R == nil {
		o.R = &stockCountSheetR{
			Inventory: related,
		}
	} else {
		o.R.Inventory = related
	}

	if related.R == nil {
		related.R = &inventoryR{
			StockCountSheets: StockCountSheetSlice{o},
		}
	} else {
		related.R.StockCountSheets = append(related.R.StockCountSheets, o)
	}

	return nil
}

// RemoveInventory relationship.
// Sets o.R.Inventory to nil.
// Removes o from all passed in related items' relationships struct.
func (o *StockCountSheet) RemoveInventory(ctx context.Context, exec boil.ContextExecutor, related *Inventory) error {
	var err error

	queries.SetScanner(&o.InventoryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("inventory_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Inventory = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.StockCountSheets {
		if queries.Equal(o.InventoryID, ri.InventoryID) {
			continue
		}

		ln := len(related.R.StockCountSheets)
		if ln > 1 && i < ln-1 {
			related.R.StockCountSheets[i] = related.R.StockCountSheets[ln-1]
		}
		related.R.StockCountSheets = related.R.StockCountSheets[:ln-1]
		break
	}
	return nil
}

// StockCountSheets retrieves all the records using an executor.
func StockCountSheets(mods ...qm.QueryMod) stockCountSheetQuery {
	mods = append(mods, qm.From("\"inventory\".\"stock_count_sheet\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"inventory\".\"stock_count_sheet\".*"})
	}

	return stockCountSheetQuery{q}
}

// FindStockCountSheet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStockCountSheet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*StockCountSheet, error) {
	stockCountSheetObj := &StockCountSheet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"inventory\".\"stock_count_sheet\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, stockCountSheetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "inventory: unable to select from stock_count_sheet")
	}

	if err = stockCountSheetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return stockCountSheetObj, err
	}

	return stockCountSheetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StockCountSheet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("inventory: no stock_count_sheet provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockCountSheetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stockCountSheetInsertCacheMut.RLock()
	cache, cached := stockCountSheetInsertCache[key]
	stockCountSheetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stockCountSheetAllColumns,
			stockCountSheetColumnsWithDefault,
			stockCountSheetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stockCountSheetType, stockCountSheetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stockCountSheetType, stockCountSheetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"inventory\".\"stock_count_sheet\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"inventory\".\"stock_count_sheet\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "inventory: unable to insert into stock_count_sheet")
	}

	if !cached {
		stockCountSheetInsertCacheMut.Lock()
		stockCountSheetInsertCache[key] = cache
		stockCountSheetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StockCountSheet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StockCountSheet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stockCountSheetUpdateCacheMut.RLock()
	cache, cached := stockCountSheetUpdateCache[key]
	stockCountSheetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stockCountSheetAllColumns,
			stockCountSheetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("inventory: unable to update stock_count_sheet, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"inventory\".\"stock_count_sheet\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stockCountSheetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stockCountSheetType, stockCountSheetMapping, append(wl, stockCountSheetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update stock_count_sheet row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by update for stock_count_sheet")
	}

	if !cached {
		stockCountSheetUpdateCacheMut.Lock()
		stockCountSheetUpdateCache[key] = cache
		stockCountSheetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stockCountSheetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update all for stock_count_sheet")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to retrieve rows affected for stock_count_sheet")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StockCountSheetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("inventory: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockCountSheetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"inventory\".\"stock_count_sheet\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stockCountSheetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to update all in stockCountSheet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to retrieve rows affected all in update all stockCountSheet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StockCountSheet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("inventory: no stock_count_sheet provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stockCountSheetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stockCountSheetUpsertCacheMut.RLock()
	cache, cached := stockCountSheetUpsertCache[key]
	stockCountSheetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			stockCountSheetAllColumns,
			stockCountSheetColumnsWithDefault,
			stockCountSheetColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			stockCountSheetAllColumns,
			stockCountSheetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("inventory: unable to upsert stock_count_sheet, could not build update column list")
		}

		ret := strmangle.SetComplement(stockCountSheetAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(stockCountSheetPrimaryKeyColumns) == 0 {
				return errors.New("inventory: unable to upsert stock_count_sheet, could not build conflict column list")
			}

			conflict = make([]string, len(stockCountSheetPrimaryKeyColumns))
			copy(conflict, stockCountSheetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"inventory\".\"stock_count_sheet\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(stockCountSheetType, stockCountSheetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stockCountSheetType, stockCountSheetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "inventory: unable to upsert stock_count_sheet")
	}

	if !cached {
		stockCountSheetUpsertCacheMut.Lock()
		stockCountSheetUpsertCache[key] = cache
		stockCountSheetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StockCountSheet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StockCountSheet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("inventory: no StockCountSheet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stockCountSheetPrimaryKeyMapping)
	sql := "DELETE FROM \"inventory\".\"stock_count_sheet\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete from stock_count_sheet")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by delete for stock_count_sheet")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stockCountSheetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("inventory: no stockCountSheetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete all from stock_count_sheet")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by deleteall for stock_count_sheet")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StockCountSheetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stockCountSheetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockCountSheetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"inventory\".\"stock_count_sheet\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stockCountSheetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "inventory: unable to delete all from stockCountSheet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "inventory: failed to get rows affected by deleteall for stock_count_sheet")
	}

	if len(stockCountSheetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StockCountSheet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStockCountSheet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StockCountSheetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StockCountSheetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockCountSheetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"inventory\".\"stock_count_sheet\".* FROM \"inventory\".\"stock_count_sheet\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stockCountSheetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "inventory: unable to reload all in StockCountSheetSlice")
	}

	*o = slice

	return nil
}

// StockCountSheetExists checks if the StockCountSheet row exists.
func StockCountSheetExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"inventory\".\"stock_count_sheet\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "inventory: unable to check if stock_count_sheet exists")
	}

	return exists, nil
}

// Exists checks if the StockCountSheet row exists.
func (o *StockCountSheet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StockCountSheetExists(ctx, exec, o.ID)
}
