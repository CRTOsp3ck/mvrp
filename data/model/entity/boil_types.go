// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("entity: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type EntityType string

// Enum values for EntityType
const (
	EntityTypeProprietor   EntityType = "proprietor"
	EntityTypeCustomer     EntityType = "customer"
	EntityTypeSupplier     EntityType = "supplier"
	EntityTypeManufacturer EntityType = "manufacturer"
	EntityTypeEmployee     EntityType = "employee"
	EntityTypeOther        EntityType = "other"
)

func AllEntityType() []EntityType {
	return []EntityType{
		EntityTypeProprietor,
		EntityTypeCustomer,
		EntityTypeSupplier,
		EntityTypeManufacturer,
		EntityTypeEmployee,
		EntityTypeOther,
	}
}

func (e EntityType) IsValid() error {
	switch e {
	case EntityTypeProprietor, EntityTypeCustomer, EntityTypeSupplier, EntityTypeManufacturer, EntityTypeEmployee, EntityTypeOther:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e EntityType) String() string {
	return string(e)
}

func (e EntityType) Ordinal() int {
	switch e {
	case EntityTypeProprietor:
		return 0
	case EntityTypeCustomer:
		return 1
	case EntityTypeSupplier:
		return 2
	case EntityTypeManufacturer:
		return 3
	case EntityTypeEmployee:
		return 4
	case EntityTypeOther:
		return 5

	default:
		panic(errors.New("enum is not valid"))
	}
}

type EntityStatus string

// Enum values for EntityStatus
const (
	EntityStatusActive   EntityStatus = "active"
	EntityStatusInactive EntityStatus = "inactive"
)

func AllEntityStatus() []EntityStatus {
	return []EntityStatus{
		EntityStatusActive,
		EntityStatusInactive,
	}
}

func (e EntityStatus) IsValid() error {
	switch e {
	case EntityStatusActive, EntityStatusInactive:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e EntityStatus) String() string {
	return string(e)
}

func (e EntityStatus) Ordinal() int {
	switch e {
	case EntityStatusActive:
		return 0
	case EntityStatusInactive:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}
