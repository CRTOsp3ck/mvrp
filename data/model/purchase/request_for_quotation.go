// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package purchase

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RequestForQuotation is an object representing the database table.
type RequestForQuotation struct {
	ID                        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentID            int         `boil:"base_document_id" json:"base_document_id" toml:"base_document_id" yaml:"base_document_id"`
	RequestForQuotationNumber string      `boil:"request_for_quotation_number" json:"request_for_quotation_number" toml:"request_for_quotation_number" yaml:"request_for_quotation_number"`
	ValidUntilDate            null.Time   `boil:"valid_until_date" json:"valid_until_date,omitempty" toml:"valid_until_date" yaml:"valid_until_date,omitempty"`
	VendorID                  null.Int    `boil:"vendor_id" json:"vendor_id,omitempty" toml:"vendor_id" yaml:"vendor_id,omitempty"`
	CustomerID                null.Int    `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	ShipToInformation         null.String `boil:"ship_to_information" json:"ship_to_information,omitempty" toml:"ship_to_information" yaml:"ship_to_information,omitempty"`
	RequestedBy               null.String `boil:"requested_by" json:"requested_by,omitempty" toml:"requested_by" yaml:"requested_by,omitempty"`

	R *requestForQuotationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L requestForQuotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RequestForQuotationColumns = struct {
	ID                        string
	BaseDocumentID            string
	RequestForQuotationNumber string
	ValidUntilDate            string
	VendorID                  string
	CustomerID                string
	ShipToInformation         string
	RequestedBy               string
}{
	ID:                        "id",
	BaseDocumentID:            "base_document_id",
	RequestForQuotationNumber: "request_for_quotation_number",
	ValidUntilDate:            "valid_until_date",
	VendorID:                  "vendor_id",
	CustomerID:                "customer_id",
	ShipToInformation:         "ship_to_information",
	RequestedBy:               "requested_by",
}

var RequestForQuotationTableColumns = struct {
	ID                        string
	BaseDocumentID            string
	RequestForQuotationNumber string
	ValidUntilDate            string
	VendorID                  string
	CustomerID                string
	ShipToInformation         string
	RequestedBy               string
}{
	ID:                        "request_for_quotation.id",
	BaseDocumentID:            "request_for_quotation.base_document_id",
	RequestForQuotationNumber: "request_for_quotation.request_for_quotation_number",
	ValidUntilDate:            "request_for_quotation.valid_until_date",
	VendorID:                  "request_for_quotation.vendor_id",
	CustomerID:                "request_for_quotation.customer_id",
	ShipToInformation:         "request_for_quotation.ship_to_information",
	RequestedBy:               "request_for_quotation.requested_by",
}

// Generated where

var RequestForQuotationWhere = struct {
	ID                        whereHelperint
	BaseDocumentID            whereHelperint
	RequestForQuotationNumber whereHelperstring
	ValidUntilDate            whereHelpernull_Time
	VendorID                  whereHelpernull_Int
	CustomerID                whereHelpernull_Int
	ShipToInformation         whereHelpernull_String
	RequestedBy               whereHelpernull_String
}{
	ID:                        whereHelperint{field: "\"purchase\".\"request_for_quotation\".\"id\""},
	BaseDocumentID:            whereHelperint{field: "\"purchase\".\"request_for_quotation\".\"base_document_id\""},
	RequestForQuotationNumber: whereHelperstring{field: "\"purchase\".\"request_for_quotation\".\"request_for_quotation_number\""},
	ValidUntilDate:            whereHelpernull_Time{field: "\"purchase\".\"request_for_quotation\".\"valid_until_date\""},
	VendorID:                  whereHelpernull_Int{field: "\"purchase\".\"request_for_quotation\".\"vendor_id\""},
	CustomerID:                whereHelpernull_Int{field: "\"purchase\".\"request_for_quotation\".\"customer_id\""},
	ShipToInformation:         whereHelpernull_String{field: "\"purchase\".\"request_for_quotation\".\"ship_to_information\""},
	RequestedBy:               whereHelpernull_String{field: "\"purchase\".\"request_for_quotation\".\"requested_by\""},
}

// RequestForQuotationRels is where relationship names are stored.
var RequestForQuotationRels = struct {
	RequestForQuotationItems string
}{
	RequestForQuotationItems: "RequestForQuotationItems",
}

// requestForQuotationR is where relationships are stored.
type requestForQuotationR struct {
	RequestForQuotationItems RequestForQuotationItemSlice `boil:"RequestForQuotationItems" json:"RequestForQuotationItems" toml:"RequestForQuotationItems" yaml:"RequestForQuotationItems"`
}

// NewStruct creates a new relationship struct
func (*requestForQuotationR) NewStruct() *requestForQuotationR {
	return &requestForQuotationR{}
}

func (r *requestForQuotationR) GetRequestForQuotationItems() RequestForQuotationItemSlice {
	if r == nil {
		return nil
	}
	return r.RequestForQuotationItems
}

// requestForQuotationL is where Load methods for each relationship are stored.
type requestForQuotationL struct{}

var (
	requestForQuotationAllColumns            = []string{"id", "base_document_id", "request_for_quotation_number", "valid_until_date", "vendor_id", "customer_id", "ship_to_information", "requested_by"}
	requestForQuotationColumnsWithoutDefault = []string{"id", "base_document_id", "request_for_quotation_number"}
	requestForQuotationColumnsWithDefault    = []string{"valid_until_date", "vendor_id", "customer_id", "ship_to_information", "requested_by"}
	requestForQuotationPrimaryKeyColumns     = []string{"id"}
	requestForQuotationGeneratedColumns      = []string{}
)

type (
	// RequestForQuotationSlice is an alias for a slice of pointers to RequestForQuotation.
	// This should almost always be used instead of []RequestForQuotation.
	RequestForQuotationSlice []*RequestForQuotation
	// RequestForQuotationHook is the signature for custom RequestForQuotation hook methods
	RequestForQuotationHook func(context.Context, boil.ContextExecutor, *RequestForQuotation) error

	requestForQuotationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	requestForQuotationType                 = reflect.TypeOf(&RequestForQuotation{})
	requestForQuotationMapping              = queries.MakeStructMapping(requestForQuotationType)
	requestForQuotationPrimaryKeyMapping, _ = queries.BindMapping(requestForQuotationType, requestForQuotationMapping, requestForQuotationPrimaryKeyColumns)
	requestForQuotationInsertCacheMut       sync.RWMutex
	requestForQuotationInsertCache          = make(map[string]insertCache)
	requestForQuotationUpdateCacheMut       sync.RWMutex
	requestForQuotationUpdateCache          = make(map[string]updateCache)
	requestForQuotationUpsertCacheMut       sync.RWMutex
	requestForQuotationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var requestForQuotationAfterSelectMu sync.Mutex
var requestForQuotationAfterSelectHooks []RequestForQuotationHook

var requestForQuotationBeforeInsertMu sync.Mutex
var requestForQuotationBeforeInsertHooks []RequestForQuotationHook
var requestForQuotationAfterInsertMu sync.Mutex
var requestForQuotationAfterInsertHooks []RequestForQuotationHook

var requestForQuotationBeforeUpdateMu sync.Mutex
var requestForQuotationBeforeUpdateHooks []RequestForQuotationHook
var requestForQuotationAfterUpdateMu sync.Mutex
var requestForQuotationAfterUpdateHooks []RequestForQuotationHook

var requestForQuotationBeforeDeleteMu sync.Mutex
var requestForQuotationBeforeDeleteHooks []RequestForQuotationHook
var requestForQuotationAfterDeleteMu sync.Mutex
var requestForQuotationAfterDeleteHooks []RequestForQuotationHook

var requestForQuotationBeforeUpsertMu sync.Mutex
var requestForQuotationBeforeUpsertHooks []RequestForQuotationHook
var requestForQuotationAfterUpsertMu sync.Mutex
var requestForQuotationAfterUpsertHooks []RequestForQuotationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RequestForQuotation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RequestForQuotation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RequestForQuotation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RequestForQuotation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RequestForQuotation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RequestForQuotation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RequestForQuotation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RequestForQuotation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RequestForQuotation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRequestForQuotationHook registers your hook function for all future operations.
func AddRequestForQuotationHook(hookPoint boil.HookPoint, requestForQuotationHook RequestForQuotationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		requestForQuotationAfterSelectMu.Lock()
		requestForQuotationAfterSelectHooks = append(requestForQuotationAfterSelectHooks, requestForQuotationHook)
		requestForQuotationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		requestForQuotationBeforeInsertMu.Lock()
		requestForQuotationBeforeInsertHooks = append(requestForQuotationBeforeInsertHooks, requestForQuotationHook)
		requestForQuotationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		requestForQuotationAfterInsertMu.Lock()
		requestForQuotationAfterInsertHooks = append(requestForQuotationAfterInsertHooks, requestForQuotationHook)
		requestForQuotationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		requestForQuotationBeforeUpdateMu.Lock()
		requestForQuotationBeforeUpdateHooks = append(requestForQuotationBeforeUpdateHooks, requestForQuotationHook)
		requestForQuotationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		requestForQuotationAfterUpdateMu.Lock()
		requestForQuotationAfterUpdateHooks = append(requestForQuotationAfterUpdateHooks, requestForQuotationHook)
		requestForQuotationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		requestForQuotationBeforeDeleteMu.Lock()
		requestForQuotationBeforeDeleteHooks = append(requestForQuotationBeforeDeleteHooks, requestForQuotationHook)
		requestForQuotationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		requestForQuotationAfterDeleteMu.Lock()
		requestForQuotationAfterDeleteHooks = append(requestForQuotationAfterDeleteHooks, requestForQuotationHook)
		requestForQuotationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		requestForQuotationBeforeUpsertMu.Lock()
		requestForQuotationBeforeUpsertHooks = append(requestForQuotationBeforeUpsertHooks, requestForQuotationHook)
		requestForQuotationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		requestForQuotationAfterUpsertMu.Lock()
		requestForQuotationAfterUpsertHooks = append(requestForQuotationAfterUpsertHooks, requestForQuotationHook)
		requestForQuotationAfterUpsertMu.Unlock()
	}
}

// One returns a single requestForQuotation record from the query.
func (q requestForQuotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RequestForQuotation, error) {
	o := &RequestForQuotation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: failed to execute a one query for request_for_quotation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RequestForQuotation records from the query.
func (q requestForQuotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RequestForQuotationSlice, error) {
	var o []*RequestForQuotation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "purchase: failed to assign all query results to RequestForQuotation slice")
	}

	if len(requestForQuotationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RequestForQuotation records in the query.
func (q requestForQuotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to count request_for_quotation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q requestForQuotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "purchase: failed to check if request_for_quotation exists")
	}

	return count > 0, nil
}

// RequestForQuotationItems retrieves all the request_for_quotation_item's RequestForQuotationItems with an executor.
func (o *RequestForQuotation) RequestForQuotationItems(mods ...qm.QueryMod) requestForQuotationItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"purchase\".\"request_for_quotation_item\".\"request_for_quotation_id\"=?", o.ID),
	)

	return RequestForQuotationItems(queryMods...)
}

// LoadRequestForQuotationItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (requestForQuotationL) LoadRequestForQuotationItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRequestForQuotation interface{}, mods queries.Applicator) error {
	var slice []*RequestForQuotation
	var object *RequestForQuotation

	if singular {
		var ok bool
		object, ok = maybeRequestForQuotation.(*RequestForQuotation)
		if !ok {
			object = new(RequestForQuotation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRequestForQuotation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRequestForQuotation))
			}
		}
	} else {
		s, ok := maybeRequestForQuotation.(*[]*RequestForQuotation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRequestForQuotation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRequestForQuotation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &requestForQuotationR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &requestForQuotationR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`purchase.request_for_quotation_item`),
		qm.WhereIn(`purchase.request_for_quotation_item.request_for_quotation_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load request_for_quotation_item")
	}

	var resultSlice []*RequestForQuotationItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice request_for_quotation_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on request_for_quotation_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for request_for_quotation_item")
	}

	if len(requestForQuotationItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RequestForQuotationItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &requestForQuotationItemR{}
			}
			foreign.R.RequestForQuotation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RequestForQuotationID {
				local.R.RequestForQuotationItems = append(local.R.RequestForQuotationItems, foreign)
				if foreign.R == nil {
					foreign.R = &requestForQuotationItemR{}
				}
				foreign.R.RequestForQuotation = local
				break
			}
		}
	}

	return nil
}

// AddRequestForQuotationItems adds the given related objects to the existing relationships
// of the request_for_quotation, optionally inserting them as new records.
// Appends related to o.R.RequestForQuotationItems.
// Sets related.R.RequestForQuotation appropriately.
func (o *RequestForQuotation) AddRequestForQuotationItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RequestForQuotationItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RequestForQuotationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"purchase\".\"request_for_quotation_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"request_for_quotation_id"}),
				strmangle.WhereClause("\"", "\"", 2, requestForQuotationItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RequestForQuotationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &requestForQuotationR{
			RequestForQuotationItems: related,
		}
	} else {
		o.R.RequestForQuotationItems = append(o.R.RequestForQuotationItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &requestForQuotationItemR{
				RequestForQuotation: o,
			}
		} else {
			rel.R.RequestForQuotation = o
		}
	}
	return nil
}

// RequestForQuotations retrieves all the records using an executor.
func RequestForQuotations(mods ...qm.QueryMod) requestForQuotationQuery {
	mods = append(mods, qm.From("\"purchase\".\"request_for_quotation\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"purchase\".\"request_for_quotation\".*"})
	}

	return requestForQuotationQuery{q}
}

// FindRequestForQuotation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRequestForQuotation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RequestForQuotation, error) {
	requestForQuotationObj := &RequestForQuotation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"purchase\".\"request_for_quotation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, requestForQuotationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: unable to select from request_for_quotation")
	}

	if err = requestForQuotationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return requestForQuotationObj, err
	}

	return requestForQuotationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RequestForQuotation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("purchase: no request_for_quotation provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requestForQuotationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	requestForQuotationInsertCacheMut.RLock()
	cache, cached := requestForQuotationInsertCache[key]
	requestForQuotationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			requestForQuotationAllColumns,
			requestForQuotationColumnsWithDefault,
			requestForQuotationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(requestForQuotationType, requestForQuotationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(requestForQuotationType, requestForQuotationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"purchase\".\"request_for_quotation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"purchase\".\"request_for_quotation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "purchase: unable to insert into request_for_quotation")
	}

	if !cached {
		requestForQuotationInsertCacheMut.Lock()
		requestForQuotationInsertCache[key] = cache
		requestForQuotationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RequestForQuotation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RequestForQuotation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	requestForQuotationUpdateCacheMut.RLock()
	cache, cached := requestForQuotationUpdateCache[key]
	requestForQuotationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			requestForQuotationAllColumns,
			requestForQuotationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("purchase: unable to update request_for_quotation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"purchase\".\"request_for_quotation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, requestForQuotationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(requestForQuotationType, requestForQuotationMapping, append(wl, requestForQuotationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update request_for_quotation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by update for request_for_quotation")
	}

	if !cached {
		requestForQuotationUpdateCacheMut.Lock()
		requestForQuotationUpdateCache[key] = cache
		requestForQuotationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q requestForQuotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update all for request_for_quotation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to retrieve rows affected for request_for_quotation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RequestForQuotationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("purchase: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestForQuotationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"purchase\".\"request_for_quotation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, requestForQuotationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update all in requestForQuotation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to retrieve rows affected all in update all requestForQuotation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RequestForQuotation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("purchase: no request_for_quotation provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requestForQuotationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	requestForQuotationUpsertCacheMut.RLock()
	cache, cached := requestForQuotationUpsertCache[key]
	requestForQuotationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			requestForQuotationAllColumns,
			requestForQuotationColumnsWithDefault,
			requestForQuotationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			requestForQuotationAllColumns,
			requestForQuotationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("purchase: unable to upsert request_for_quotation, could not build update column list")
		}

		ret := strmangle.SetComplement(requestForQuotationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(requestForQuotationPrimaryKeyColumns) == 0 {
				return errors.New("purchase: unable to upsert request_for_quotation, could not build conflict column list")
			}

			conflict = make([]string, len(requestForQuotationPrimaryKeyColumns))
			copy(conflict, requestForQuotationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"purchase\".\"request_for_quotation\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(requestForQuotationType, requestForQuotationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(requestForQuotationType, requestForQuotationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "purchase: unable to upsert request_for_quotation")
	}

	if !cached {
		requestForQuotationUpsertCacheMut.Lock()
		requestForQuotationUpsertCache[key] = cache
		requestForQuotationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RequestForQuotation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RequestForQuotation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("purchase: no RequestForQuotation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), requestForQuotationPrimaryKeyMapping)
	sql := "DELETE FROM \"purchase\".\"request_for_quotation\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete from request_for_quotation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by delete for request_for_quotation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q requestForQuotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("purchase: no requestForQuotationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete all from request_for_quotation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by deleteall for request_for_quotation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RequestForQuotationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(requestForQuotationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestForQuotationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"purchase\".\"request_for_quotation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, requestForQuotationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete all from requestForQuotation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by deleteall for request_for_quotation")
	}

	if len(requestForQuotationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RequestForQuotation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRequestForQuotation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RequestForQuotationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RequestForQuotationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestForQuotationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"purchase\".\"request_for_quotation\".* FROM \"purchase\".\"request_for_quotation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, requestForQuotationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "purchase: unable to reload all in RequestForQuotationSlice")
	}

	*o = slice

	return nil
}

// RequestForQuotationExists checks if the RequestForQuotation row exists.
func RequestForQuotationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"purchase\".\"request_for_quotation\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "purchase: unable to check if request_for_quotation exists")
	}

	return exists, nil
}

// Exists checks if the RequestForQuotation row exists.
func (o *RequestForQuotation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RequestForQuotationExists(ctx, exec, o.ID)
}
