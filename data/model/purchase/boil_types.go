// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package purchase

import (
	"bytes"
	"database/sql/driver"
	"encoding/json"
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/null/v8/convert"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("purchase: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type PurchaseOrderStatus string

// Enum values for PurchaseOrderStatus
const (
	PurchaseOrderStatusPending  PurchaseOrderStatus = "Pending"
	PurchaseOrderStatusAccepted PurchaseOrderStatus = "Accepted"
	PurchaseOrderStatusDeclined PurchaseOrderStatus = "Declined"
)

func AllPurchaseOrderStatus() []PurchaseOrderStatus {
	return []PurchaseOrderStatus{
		PurchaseOrderStatusPending,
		PurchaseOrderStatusAccepted,
		PurchaseOrderStatusDeclined,
	}
}

func (e PurchaseOrderStatus) IsValid() error {
	switch e {
	case PurchaseOrderStatusPending, PurchaseOrderStatusAccepted, PurchaseOrderStatusDeclined:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e PurchaseOrderStatus) String() string {
	return string(e)
}

func (e PurchaseOrderStatus) Ordinal() int {
	switch e {
	case PurchaseOrderStatusPending:
		return 0
	case PurchaseOrderStatusAccepted:
		return 1
	case PurchaseOrderStatusDeclined:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

// NullPurchaseOrderStatus is a nullable PurchaseOrderStatus enum type. It supports SQL and JSON serialization.
type NullPurchaseOrderStatus struct {
	Val   PurchaseOrderStatus
	Valid bool
}

// NullPurchaseOrderStatusFrom creates a new PurchaseOrderStatus that will never be blank.
func NullPurchaseOrderStatusFrom(v PurchaseOrderStatus) NullPurchaseOrderStatus {
	return NewNullPurchaseOrderStatus(v, true)
}

// NullPurchaseOrderStatusFromPtr creates a new NullPurchaseOrderStatus that be null if s is nil.
func NullPurchaseOrderStatusFromPtr(v *PurchaseOrderStatus) NullPurchaseOrderStatus {
	if v == nil {
		return NewNullPurchaseOrderStatus("", false)
	}
	return NewNullPurchaseOrderStatus(*v, true)
}

// NewNullPurchaseOrderStatus creates a new NullPurchaseOrderStatus
func NewNullPurchaseOrderStatus(v PurchaseOrderStatus, valid bool) NullPurchaseOrderStatus {
	return NullPurchaseOrderStatus{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *NullPurchaseOrderStatus) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e NullPurchaseOrderStatus) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e NullPurchaseOrderStatus) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *NullPurchaseOrderStatus) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = PurchaseOrderStatus(text)
	e.Valid = true
	return nil
}

// SetValid changes this NullPurchaseOrderStatus value and also sets it to be non-null.
func (e *NullPurchaseOrderStatus) SetValid(v PurchaseOrderStatus) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this NullPurchaseOrderStatus value, or a nil pointer if this NullPurchaseOrderStatus is null.
func (e NullPurchaseOrderStatus) Ptr() *PurchaseOrderStatus {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e NullPurchaseOrderStatus) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *NullPurchaseOrderStatus) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e NullPurchaseOrderStatus) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}
