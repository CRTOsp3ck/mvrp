// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package purchase

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GoodsReceiptNote is an object representing the database table.
type GoodsReceiptNote struct {
	ID                            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentID                int         `boil:"base_document_id" json:"base_document_id" toml:"base_document_id" yaml:"base_document_id"`
	GoodsReceiptNoteNumber        string      `boil:"goods_receipt_note_number" json:"goods_receipt_note_number" toml:"goods_receipt_note_number" yaml:"goods_receipt_note_number"`
	PurchaseOrderID               int         `boil:"purchase_order_id" json:"purchase_order_id" toml:"purchase_order_id" yaml:"purchase_order_id"`
	ReceiptDate                   time.Time   `boil:"receipt_date" json:"receipt_date" toml:"receipt_date" yaml:"receipt_date"`
	VendorID                      null.Int    `boil:"vendor_id" json:"vendor_id,omitempty" toml:"vendor_id" yaml:"vendor_id,omitempty"`
	ShipFromInformation           null.String `boil:"ship_from_information" json:"ship_from_information,omitempty" toml:"ship_from_information" yaml:"ship_from_information,omitempty"`
	ShippingPersonnelInformation  null.String `boil:"shipping_personnel_information" json:"shipping_personnel_information,omitempty" toml:"shipping_personnel_information" yaml:"shipping_personnel_information,omitempty"`
	ReceivingLocationInformation  null.String `boil:"receiving_location_information" json:"receiving_location_information,omitempty" toml:"receiving_location_information" yaml:"receiving_location_information,omitempty"`
	ReceivingPersonnelInformation null.String `boil:"receiving_personnel_information" json:"receiving_personnel_information,omitempty" toml:"receiving_personnel_information" yaml:"receiving_personnel_information,omitempty"`
	GoodsReceivedCondition        null.String `boil:"goods_received_condition" json:"goods_received_condition,omitempty" toml:"goods_received_condition" yaml:"goods_received_condition,omitempty"`

	R *goodsReceiptNoteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L goodsReceiptNoteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoodsReceiptNoteColumns = struct {
	ID                            string
	BaseDocumentID                string
	GoodsReceiptNoteNumber        string
	PurchaseOrderID               string
	ReceiptDate                   string
	VendorID                      string
	ShipFromInformation           string
	ShippingPersonnelInformation  string
	ReceivingLocationInformation  string
	ReceivingPersonnelInformation string
	GoodsReceivedCondition        string
}{
	ID:                            "id",
	BaseDocumentID:                "base_document_id",
	GoodsReceiptNoteNumber:        "goods_receipt_note_number",
	PurchaseOrderID:               "purchase_order_id",
	ReceiptDate:                   "receipt_date",
	VendorID:                      "vendor_id",
	ShipFromInformation:           "ship_from_information",
	ShippingPersonnelInformation:  "shipping_personnel_information",
	ReceivingLocationInformation:  "receiving_location_information",
	ReceivingPersonnelInformation: "receiving_personnel_information",
	GoodsReceivedCondition:        "goods_received_condition",
}

var GoodsReceiptNoteTableColumns = struct {
	ID                            string
	BaseDocumentID                string
	GoodsReceiptNoteNumber        string
	PurchaseOrderID               string
	ReceiptDate                   string
	VendorID                      string
	ShipFromInformation           string
	ShippingPersonnelInformation  string
	ReceivingLocationInformation  string
	ReceivingPersonnelInformation string
	GoodsReceivedCondition        string
}{
	ID:                            "goods_receipt_note.id",
	BaseDocumentID:                "goods_receipt_note.base_document_id",
	GoodsReceiptNoteNumber:        "goods_receipt_note.goods_receipt_note_number",
	PurchaseOrderID:               "goods_receipt_note.purchase_order_id",
	ReceiptDate:                   "goods_receipt_note.receipt_date",
	VendorID:                      "goods_receipt_note.vendor_id",
	ShipFromInformation:           "goods_receipt_note.ship_from_information",
	ShippingPersonnelInformation:  "goods_receipt_note.shipping_personnel_information",
	ReceivingLocationInformation:  "goods_receipt_note.receiving_location_information",
	ReceivingPersonnelInformation: "goods_receipt_note.receiving_personnel_information",
	GoodsReceivedCondition:        "goods_receipt_note.goods_received_condition",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GoodsReceiptNoteWhere = struct {
	ID                            whereHelperint
	BaseDocumentID                whereHelperint
	GoodsReceiptNoteNumber        whereHelperstring
	PurchaseOrderID               whereHelperint
	ReceiptDate                   whereHelpertime_Time
	VendorID                      whereHelpernull_Int
	ShipFromInformation           whereHelpernull_String
	ShippingPersonnelInformation  whereHelpernull_String
	ReceivingLocationInformation  whereHelpernull_String
	ReceivingPersonnelInformation whereHelpernull_String
	GoodsReceivedCondition        whereHelpernull_String
}{
	ID:                            whereHelperint{field: "\"purchase\".\"goods_receipt_note\".\"id\""},
	BaseDocumentID:                whereHelperint{field: "\"purchase\".\"goods_receipt_note\".\"base_document_id\""},
	GoodsReceiptNoteNumber:        whereHelperstring{field: "\"purchase\".\"goods_receipt_note\".\"goods_receipt_note_number\""},
	PurchaseOrderID:               whereHelperint{field: "\"purchase\".\"goods_receipt_note\".\"purchase_order_id\""},
	ReceiptDate:                   whereHelpertime_Time{field: "\"purchase\".\"goods_receipt_note\".\"receipt_date\""},
	VendorID:                      whereHelpernull_Int{field: "\"purchase\".\"goods_receipt_note\".\"vendor_id\""},
	ShipFromInformation:           whereHelpernull_String{field: "\"purchase\".\"goods_receipt_note\".\"ship_from_information\""},
	ShippingPersonnelInformation:  whereHelpernull_String{field: "\"purchase\".\"goods_receipt_note\".\"shipping_personnel_information\""},
	ReceivingLocationInformation:  whereHelpernull_String{field: "\"purchase\".\"goods_receipt_note\".\"receiving_location_information\""},
	ReceivingPersonnelInformation: whereHelpernull_String{field: "\"purchase\".\"goods_receipt_note\".\"receiving_personnel_information\""},
	GoodsReceivedCondition:        whereHelpernull_String{field: "\"purchase\".\"goods_receipt_note\".\"goods_received_condition\""},
}

// GoodsReceiptNoteRels is where relationship names are stored.
var GoodsReceiptNoteRels = struct {
	PurchaseOrder         string
	GoodsReceiptNoteItems string
}{
	PurchaseOrder:         "PurchaseOrder",
	GoodsReceiptNoteItems: "GoodsReceiptNoteItems",
}

// goodsReceiptNoteR is where relationships are stored.
type goodsReceiptNoteR struct {
	PurchaseOrder         *PurchaseOrder            `boil:"PurchaseOrder" json:"PurchaseOrder" toml:"PurchaseOrder" yaml:"PurchaseOrder"`
	GoodsReceiptNoteItems GoodsReceiptNoteItemSlice `boil:"GoodsReceiptNoteItems" json:"GoodsReceiptNoteItems" toml:"GoodsReceiptNoteItems" yaml:"GoodsReceiptNoteItems"`
}

// NewStruct creates a new relationship struct
func (*goodsReceiptNoteR) NewStruct() *goodsReceiptNoteR {
	return &goodsReceiptNoteR{}
}

func (r *goodsReceiptNoteR) GetPurchaseOrder() *PurchaseOrder {
	if r == nil {
		return nil
	}
	return r.PurchaseOrder
}

func (r *goodsReceiptNoteR) GetGoodsReceiptNoteItems() GoodsReceiptNoteItemSlice {
	if r == nil {
		return nil
	}
	return r.GoodsReceiptNoteItems
}

// goodsReceiptNoteL is where Load methods for each relationship are stored.
type goodsReceiptNoteL struct{}

var (
	goodsReceiptNoteAllColumns            = []string{"id", "base_document_id", "goods_receipt_note_number", "purchase_order_id", "receipt_date", "vendor_id", "ship_from_information", "shipping_personnel_information", "receiving_location_information", "receiving_personnel_information", "goods_received_condition"}
	goodsReceiptNoteColumnsWithoutDefault = []string{"id", "base_document_id", "goods_receipt_note_number", "purchase_order_id", "receipt_date"}
	goodsReceiptNoteColumnsWithDefault    = []string{"vendor_id", "ship_from_information", "shipping_personnel_information", "receiving_location_information", "receiving_personnel_information", "goods_received_condition"}
	goodsReceiptNotePrimaryKeyColumns     = []string{"id"}
	goodsReceiptNoteGeneratedColumns      = []string{}
)

type (
	// GoodsReceiptNoteSlice is an alias for a slice of pointers to GoodsReceiptNote.
	// This should almost always be used instead of []GoodsReceiptNote.
	GoodsReceiptNoteSlice []*GoodsReceiptNote
	// GoodsReceiptNoteHook is the signature for custom GoodsReceiptNote hook methods
	GoodsReceiptNoteHook func(context.Context, boil.ContextExecutor, *GoodsReceiptNote) error

	goodsReceiptNoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goodsReceiptNoteType                 = reflect.TypeOf(&GoodsReceiptNote{})
	goodsReceiptNoteMapping              = queries.MakeStructMapping(goodsReceiptNoteType)
	goodsReceiptNotePrimaryKeyMapping, _ = queries.BindMapping(goodsReceiptNoteType, goodsReceiptNoteMapping, goodsReceiptNotePrimaryKeyColumns)
	goodsReceiptNoteInsertCacheMut       sync.RWMutex
	goodsReceiptNoteInsertCache          = make(map[string]insertCache)
	goodsReceiptNoteUpdateCacheMut       sync.RWMutex
	goodsReceiptNoteUpdateCache          = make(map[string]updateCache)
	goodsReceiptNoteUpsertCacheMut       sync.RWMutex
	goodsReceiptNoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var goodsReceiptNoteAfterSelectMu sync.Mutex
var goodsReceiptNoteAfterSelectHooks []GoodsReceiptNoteHook

var goodsReceiptNoteBeforeInsertMu sync.Mutex
var goodsReceiptNoteBeforeInsertHooks []GoodsReceiptNoteHook
var goodsReceiptNoteAfterInsertMu sync.Mutex
var goodsReceiptNoteAfterInsertHooks []GoodsReceiptNoteHook

var goodsReceiptNoteBeforeUpdateMu sync.Mutex
var goodsReceiptNoteBeforeUpdateHooks []GoodsReceiptNoteHook
var goodsReceiptNoteAfterUpdateMu sync.Mutex
var goodsReceiptNoteAfterUpdateHooks []GoodsReceiptNoteHook

var goodsReceiptNoteBeforeDeleteMu sync.Mutex
var goodsReceiptNoteBeforeDeleteHooks []GoodsReceiptNoteHook
var goodsReceiptNoteAfterDeleteMu sync.Mutex
var goodsReceiptNoteAfterDeleteHooks []GoodsReceiptNoteHook

var goodsReceiptNoteBeforeUpsertMu sync.Mutex
var goodsReceiptNoteBeforeUpsertHooks []GoodsReceiptNoteHook
var goodsReceiptNoteAfterUpsertMu sync.Mutex
var goodsReceiptNoteAfterUpsertHooks []GoodsReceiptNoteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoodsReceiptNote) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoodsReceiptNote) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoodsReceiptNote) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GoodsReceiptNote) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GoodsReceiptNote) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GoodsReceiptNote) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GoodsReceiptNote) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoodsReceiptNote) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoodsReceiptNote) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoodsReceiptNoteHook registers your hook function for all future operations.
func AddGoodsReceiptNoteHook(hookPoint boil.HookPoint, goodsReceiptNoteHook GoodsReceiptNoteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goodsReceiptNoteAfterSelectMu.Lock()
		goodsReceiptNoteAfterSelectHooks = append(goodsReceiptNoteAfterSelectHooks, goodsReceiptNoteHook)
		goodsReceiptNoteAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goodsReceiptNoteBeforeInsertMu.Lock()
		goodsReceiptNoteBeforeInsertHooks = append(goodsReceiptNoteBeforeInsertHooks, goodsReceiptNoteHook)
		goodsReceiptNoteBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goodsReceiptNoteAfterInsertMu.Lock()
		goodsReceiptNoteAfterInsertHooks = append(goodsReceiptNoteAfterInsertHooks, goodsReceiptNoteHook)
		goodsReceiptNoteAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		goodsReceiptNoteBeforeUpdateMu.Lock()
		goodsReceiptNoteBeforeUpdateHooks = append(goodsReceiptNoteBeforeUpdateHooks, goodsReceiptNoteHook)
		goodsReceiptNoteBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		goodsReceiptNoteAfterUpdateMu.Lock()
		goodsReceiptNoteAfterUpdateHooks = append(goodsReceiptNoteAfterUpdateHooks, goodsReceiptNoteHook)
		goodsReceiptNoteAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		goodsReceiptNoteBeforeDeleteMu.Lock()
		goodsReceiptNoteBeforeDeleteHooks = append(goodsReceiptNoteBeforeDeleteHooks, goodsReceiptNoteHook)
		goodsReceiptNoteBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		goodsReceiptNoteAfterDeleteMu.Lock()
		goodsReceiptNoteAfterDeleteHooks = append(goodsReceiptNoteAfterDeleteHooks, goodsReceiptNoteHook)
		goodsReceiptNoteAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		goodsReceiptNoteBeforeUpsertMu.Lock()
		goodsReceiptNoteBeforeUpsertHooks = append(goodsReceiptNoteBeforeUpsertHooks, goodsReceiptNoteHook)
		goodsReceiptNoteBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goodsReceiptNoteAfterUpsertMu.Lock()
		goodsReceiptNoteAfterUpsertHooks = append(goodsReceiptNoteAfterUpsertHooks, goodsReceiptNoteHook)
		goodsReceiptNoteAfterUpsertMu.Unlock()
	}
}

// One returns a single goodsReceiptNote record from the query.
func (q goodsReceiptNoteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoodsReceiptNote, error) {
	o := &GoodsReceiptNote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: failed to execute a one query for goods_receipt_note")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoodsReceiptNote records from the query.
func (q goodsReceiptNoteQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoodsReceiptNoteSlice, error) {
	var o []*GoodsReceiptNote

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "purchase: failed to assign all query results to GoodsReceiptNote slice")
	}

	if len(goodsReceiptNoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoodsReceiptNote records in the query.
func (q goodsReceiptNoteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to count goods_receipt_note rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goodsReceiptNoteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "purchase: failed to check if goods_receipt_note exists")
	}

	return count > 0, nil
}

// PurchaseOrder pointed to by the foreign key.
func (o *GoodsReceiptNote) PurchaseOrder(mods ...qm.QueryMod) purchaseOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PurchaseOrderID),
	}

	queryMods = append(queryMods, mods...)

	return PurchaseOrders(queryMods...)
}

// GoodsReceiptNoteItems retrieves all the goods_receipt_note_item's GoodsReceiptNoteItems with an executor.
func (o *GoodsReceiptNote) GoodsReceiptNoteItems(mods ...qm.QueryMod) goodsReceiptNoteItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"purchase\".\"goods_receipt_note_item\".\"goods_receipt_note_id\"=?", o.ID),
	)

	return GoodsReceiptNoteItems(queryMods...)
}

// LoadPurchaseOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (goodsReceiptNoteL) LoadPurchaseOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoodsReceiptNote interface{}, mods queries.Applicator) error {
	var slice []*GoodsReceiptNote
	var object *GoodsReceiptNote

	if singular {
		var ok bool
		object, ok = maybeGoodsReceiptNote.(*GoodsReceiptNote)
		if !ok {
			object = new(GoodsReceiptNote)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGoodsReceiptNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGoodsReceiptNote))
			}
		}
	} else {
		s, ok := maybeGoodsReceiptNote.(*[]*GoodsReceiptNote)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGoodsReceiptNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGoodsReceiptNote))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &goodsReceiptNoteR{}
		}
		args[object.PurchaseOrderID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goodsReceiptNoteR{}
			}

			args[obj.PurchaseOrderID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`purchase.purchase_order`),
		qm.WhereIn(`purchase.purchase_order.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PurchaseOrder")
	}

	var resultSlice []*PurchaseOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PurchaseOrder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for purchase_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for purchase_order")
	}

	if len(purchaseOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchaseOrder = foreign
		if foreign.R == nil {
			foreign.R = &purchaseOrderR{}
		}
		foreign.R.GoodsReceiptNotes = append(foreign.R.GoodsReceiptNotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchaseOrderID == foreign.ID {
				local.R.PurchaseOrder = foreign
				if foreign.R == nil {
					foreign.R = &purchaseOrderR{}
				}
				foreign.R.GoodsReceiptNotes = append(foreign.R.GoodsReceiptNotes, local)
				break
			}
		}
	}

	return nil
}

// LoadGoodsReceiptNoteItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (goodsReceiptNoteL) LoadGoodsReceiptNoteItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoodsReceiptNote interface{}, mods queries.Applicator) error {
	var slice []*GoodsReceiptNote
	var object *GoodsReceiptNote

	if singular {
		var ok bool
		object, ok = maybeGoodsReceiptNote.(*GoodsReceiptNote)
		if !ok {
			object = new(GoodsReceiptNote)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGoodsReceiptNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGoodsReceiptNote))
			}
		}
	} else {
		s, ok := maybeGoodsReceiptNote.(*[]*GoodsReceiptNote)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGoodsReceiptNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGoodsReceiptNote))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &goodsReceiptNoteR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goodsReceiptNoteR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`purchase.goods_receipt_note_item`),
		qm.WhereIn(`purchase.goods_receipt_note_item.goods_receipt_note_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load goods_receipt_note_item")
	}

	var resultSlice []*GoodsReceiptNoteItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice goods_receipt_note_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on goods_receipt_note_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for goods_receipt_note_item")
	}

	if len(goodsReceiptNoteItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GoodsReceiptNoteItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &goodsReceiptNoteItemR{}
			}
			foreign.R.GoodsReceiptNote = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GoodsReceiptNoteID {
				local.R.GoodsReceiptNoteItems = append(local.R.GoodsReceiptNoteItems, foreign)
				if foreign.R == nil {
					foreign.R = &goodsReceiptNoteItemR{}
				}
				foreign.R.GoodsReceiptNote = local
				break
			}
		}
	}

	return nil
}

// SetPurchaseOrder of the goodsReceiptNote to the related item.
// Sets o.R.PurchaseOrder to related.
// Adds o to related.R.GoodsReceiptNotes.
func (o *GoodsReceiptNote) SetPurchaseOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PurchaseOrder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"purchase\".\"goods_receipt_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"purchase_order_id"}),
		strmangle.WhereClause("\"", "\"", 2, goodsReceiptNotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchaseOrderID = related.ID
	if o.R == nil {
		o.R = &goodsReceiptNoteR{
			PurchaseOrder: related,
		}
	} else {
		o.R.PurchaseOrder = related
	}

	if related.R == nil {
		related.R = &purchaseOrderR{
			GoodsReceiptNotes: GoodsReceiptNoteSlice{o},
		}
	} else {
		related.R.GoodsReceiptNotes = append(related.R.GoodsReceiptNotes, o)
	}

	return nil
}

// AddGoodsReceiptNoteItems adds the given related objects to the existing relationships
// of the goods_receipt_note, optionally inserting them as new records.
// Appends related to o.R.GoodsReceiptNoteItems.
// Sets related.R.GoodsReceiptNote appropriately.
func (o *GoodsReceiptNote) AddGoodsReceiptNoteItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GoodsReceiptNoteItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GoodsReceiptNoteID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"purchase\".\"goods_receipt_note_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"goods_receipt_note_id"}),
				strmangle.WhereClause("\"", "\"", 2, goodsReceiptNoteItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GoodsReceiptNoteID = o.ID
		}
	}

	if o.R == nil {
		o.R = &goodsReceiptNoteR{
			GoodsReceiptNoteItems: related,
		}
	} else {
		o.R.GoodsReceiptNoteItems = append(o.R.GoodsReceiptNoteItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &goodsReceiptNoteItemR{
				GoodsReceiptNote: o,
			}
		} else {
			rel.R.GoodsReceiptNote = o
		}
	}
	return nil
}

// GoodsReceiptNotes retrieves all the records using an executor.
func GoodsReceiptNotes(mods ...qm.QueryMod) goodsReceiptNoteQuery {
	mods = append(mods, qm.From("\"purchase\".\"goods_receipt_note\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"purchase\".\"goods_receipt_note\".*"})
	}

	return goodsReceiptNoteQuery{q}
}

// FindGoodsReceiptNote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoodsReceiptNote(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*GoodsReceiptNote, error) {
	goodsReceiptNoteObj := &GoodsReceiptNote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"purchase\".\"goods_receipt_note\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, goodsReceiptNoteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: unable to select from goods_receipt_note")
	}

	if err = goodsReceiptNoteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return goodsReceiptNoteObj, err
	}

	return goodsReceiptNoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoodsReceiptNote) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("purchase: no goods_receipt_note provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReceiptNoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goodsReceiptNoteInsertCacheMut.RLock()
	cache, cached := goodsReceiptNoteInsertCache[key]
	goodsReceiptNoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goodsReceiptNoteAllColumns,
			goodsReceiptNoteColumnsWithDefault,
			goodsReceiptNoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goodsReceiptNoteType, goodsReceiptNoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goodsReceiptNoteType, goodsReceiptNoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"purchase\".\"goods_receipt_note\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"purchase\".\"goods_receipt_note\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "purchase: unable to insert into goods_receipt_note")
	}

	if !cached {
		goodsReceiptNoteInsertCacheMut.Lock()
		goodsReceiptNoteInsertCache[key] = cache
		goodsReceiptNoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GoodsReceiptNote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GoodsReceiptNote) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	goodsReceiptNoteUpdateCacheMut.RLock()
	cache, cached := goodsReceiptNoteUpdateCache[key]
	goodsReceiptNoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			goodsReceiptNoteAllColumns,
			goodsReceiptNotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("purchase: unable to update goods_receipt_note, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"purchase\".\"goods_receipt_note\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, goodsReceiptNotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(goodsReceiptNoteType, goodsReceiptNoteMapping, append(wl, goodsReceiptNotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update goods_receipt_note row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by update for goods_receipt_note")
	}

	if !cached {
		goodsReceiptNoteUpdateCacheMut.Lock()
		goodsReceiptNoteUpdateCache[key] = cache
		goodsReceiptNoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q goodsReceiptNoteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update all for goods_receipt_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to retrieve rows affected for goods_receipt_note")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoodsReceiptNoteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("purchase: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsReceiptNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"purchase\".\"goods_receipt_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, goodsReceiptNotePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update all in goodsReceiptNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to retrieve rows affected all in update all goodsReceiptNote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoodsReceiptNote) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("purchase: no goods_receipt_note provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReceiptNoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goodsReceiptNoteUpsertCacheMut.RLock()
	cache, cached := goodsReceiptNoteUpsertCache[key]
	goodsReceiptNoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goodsReceiptNoteAllColumns,
			goodsReceiptNoteColumnsWithDefault,
			goodsReceiptNoteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goodsReceiptNoteAllColumns,
			goodsReceiptNotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("purchase: unable to upsert goods_receipt_note, could not build update column list")
		}

		ret := strmangle.SetComplement(goodsReceiptNoteAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goodsReceiptNotePrimaryKeyColumns) == 0 {
				return errors.New("purchase: unable to upsert goods_receipt_note, could not build conflict column list")
			}

			conflict = make([]string, len(goodsReceiptNotePrimaryKeyColumns))
			copy(conflict, goodsReceiptNotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"purchase\".\"goods_receipt_note\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goodsReceiptNoteType, goodsReceiptNoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goodsReceiptNoteType, goodsReceiptNoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "purchase: unable to upsert goods_receipt_note")
	}

	if !cached {
		goodsReceiptNoteUpsertCacheMut.Lock()
		goodsReceiptNoteUpsertCache[key] = cache
		goodsReceiptNoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GoodsReceiptNote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GoodsReceiptNote) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("purchase: no GoodsReceiptNote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), goodsReceiptNotePrimaryKeyMapping)
	sql := "DELETE FROM \"purchase\".\"goods_receipt_note\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete from goods_receipt_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by delete for goods_receipt_note")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q goodsReceiptNoteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("purchase: no goodsReceiptNoteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete all from goods_receipt_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by deleteall for goods_receipt_note")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoodsReceiptNoteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(goodsReceiptNoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsReceiptNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"purchase\".\"goods_receipt_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goodsReceiptNotePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete all from goodsReceiptNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by deleteall for goods_receipt_note")
	}

	if len(goodsReceiptNoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GoodsReceiptNote) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoodsReceiptNote(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoodsReceiptNoteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoodsReceiptNoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsReceiptNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"purchase\".\"goods_receipt_note\".* FROM \"purchase\".\"goods_receipt_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goodsReceiptNotePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "purchase: unable to reload all in GoodsReceiptNoteSlice")
	}

	*o = slice

	return nil
}

// GoodsReceiptNoteExists checks if the GoodsReceiptNote row exists.
func GoodsReceiptNoteExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"purchase\".\"goods_receipt_note\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "purchase: unable to check if goods_receipt_note exists")
	}

	return exists, nil
}

// Exists checks if the GoodsReceiptNote row exists.
func (o *GoodsReceiptNote) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GoodsReceiptNoteExists(ctx, exec, o.ID)
}
