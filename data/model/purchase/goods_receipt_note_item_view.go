// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package purchase

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GoodsReceiptNoteItemView is an object representing the database table.
type GoodsReceiptNoteItemView struct {
	ID                 null.Int  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	BaseDocumentItemID null.Int  `boil:"base_document_item_id" json:"base_document_item_id,omitempty" toml:"base_document_item_id" yaml:"base_document_item_id,omitempty"`
	GoodsReceiptNoteID null.Int  `boil:"goods_receipt_note_id" json:"goods_receipt_note_id,omitempty" toml:"goods_receipt_note_id" yaml:"goods_receipt_note_id,omitempty"`
	BaseDocumentItem   null.JSON `boil:"base_document_item" json:"base_document_item,omitempty" toml:"base_document_item" yaml:"base_document_item,omitempty"`
}

var GoodsReceiptNoteItemViewColumns = struct {
	ID                 string
	BaseDocumentItemID string
	GoodsReceiptNoteID string
	BaseDocumentItem   string
}{
	ID:                 "id",
	BaseDocumentItemID: "base_document_item_id",
	GoodsReceiptNoteID: "goods_receipt_note_id",
	BaseDocumentItem:   "base_document_item",
}

var GoodsReceiptNoteItemViewTableColumns = struct {
	ID                 string
	BaseDocumentItemID string
	GoodsReceiptNoteID string
	BaseDocumentItem   string
}{
	ID:                 "goods_receipt_note_item_view.id",
	BaseDocumentItemID: "goods_receipt_note_item_view.base_document_item_id",
	GoodsReceiptNoteID: "goods_receipt_note_item_view.goods_receipt_note_id",
	BaseDocumentItem:   "goods_receipt_note_item_view.base_document_item",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GoodsReceiptNoteItemViewWhere = struct {
	ID                 whereHelpernull_Int
	BaseDocumentItemID whereHelpernull_Int
	GoodsReceiptNoteID whereHelpernull_Int
	BaseDocumentItem   whereHelpernull_JSON
}{
	ID:                 whereHelpernull_Int{field: "\"purchase\".\"goods_receipt_note_item_view\".\"id\""},
	BaseDocumentItemID: whereHelpernull_Int{field: "\"purchase\".\"goods_receipt_note_item_view\".\"base_document_item_id\""},
	GoodsReceiptNoteID: whereHelpernull_Int{field: "\"purchase\".\"goods_receipt_note_item_view\".\"goods_receipt_note_id\""},
	BaseDocumentItem:   whereHelpernull_JSON{field: "\"purchase\".\"goods_receipt_note_item_view\".\"base_document_item\""},
}

var (
	goodsReceiptNoteItemViewAllColumns            = []string{"id", "base_document_item_id", "goods_receipt_note_id", "base_document_item"}
	goodsReceiptNoteItemViewColumnsWithoutDefault = []string{}
	goodsReceiptNoteItemViewColumnsWithDefault    = []string{"id", "base_document_item_id", "goods_receipt_note_id", "base_document_item"}
	goodsReceiptNoteItemViewPrimaryKeyColumns     = []string{}
	goodsReceiptNoteItemViewGeneratedColumns      = []string{}
)

type (
	// GoodsReceiptNoteItemViewSlice is an alias for a slice of pointers to GoodsReceiptNoteItemView.
	// This should almost always be used instead of []GoodsReceiptNoteItemView.
	GoodsReceiptNoteItemViewSlice []*GoodsReceiptNoteItemView
	// GoodsReceiptNoteItemViewHook is the signature for custom GoodsReceiptNoteItemView hook methods
	GoodsReceiptNoteItemViewHook func(context.Context, boil.ContextExecutor, *GoodsReceiptNoteItemView) error

	goodsReceiptNoteItemViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goodsReceiptNoteItemViewType           = reflect.TypeOf(&GoodsReceiptNoteItemView{})
	goodsReceiptNoteItemViewMapping        = queries.MakeStructMapping(goodsReceiptNoteItemViewType)
	goodsReceiptNoteItemViewInsertCacheMut sync.RWMutex
	goodsReceiptNoteItemViewInsertCache    = make(map[string]insertCache)
	goodsReceiptNoteItemViewUpdateCacheMut sync.RWMutex
	goodsReceiptNoteItemViewUpdateCache    = make(map[string]updateCache)
	goodsReceiptNoteItemViewUpsertCacheMut sync.RWMutex
	goodsReceiptNoteItemViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var goodsReceiptNoteItemViewAfterSelectMu sync.Mutex
var goodsReceiptNoteItemViewAfterSelectHooks []GoodsReceiptNoteItemViewHook

var goodsReceiptNoteItemViewBeforeInsertMu sync.Mutex
var goodsReceiptNoteItemViewBeforeInsertHooks []GoodsReceiptNoteItemViewHook
var goodsReceiptNoteItemViewAfterInsertMu sync.Mutex
var goodsReceiptNoteItemViewAfterInsertHooks []GoodsReceiptNoteItemViewHook

var goodsReceiptNoteItemViewBeforeUpsertMu sync.Mutex
var goodsReceiptNoteItemViewBeforeUpsertHooks []GoodsReceiptNoteItemViewHook
var goodsReceiptNoteItemViewAfterUpsertMu sync.Mutex
var goodsReceiptNoteItemViewAfterUpsertHooks []GoodsReceiptNoteItemViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoodsReceiptNoteItemView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoodsReceiptNoteItemView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoodsReceiptNoteItemView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoodsReceiptNoteItemView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoodsReceiptNoteItemView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoodsReceiptNoteItemViewHook registers your hook function for all future operations.
func AddGoodsReceiptNoteItemViewHook(hookPoint boil.HookPoint, goodsReceiptNoteItemViewHook GoodsReceiptNoteItemViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goodsReceiptNoteItemViewAfterSelectMu.Lock()
		goodsReceiptNoteItemViewAfterSelectHooks = append(goodsReceiptNoteItemViewAfterSelectHooks, goodsReceiptNoteItemViewHook)
		goodsReceiptNoteItemViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goodsReceiptNoteItemViewBeforeInsertMu.Lock()
		goodsReceiptNoteItemViewBeforeInsertHooks = append(goodsReceiptNoteItemViewBeforeInsertHooks, goodsReceiptNoteItemViewHook)
		goodsReceiptNoteItemViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goodsReceiptNoteItemViewAfterInsertMu.Lock()
		goodsReceiptNoteItemViewAfterInsertHooks = append(goodsReceiptNoteItemViewAfterInsertHooks, goodsReceiptNoteItemViewHook)
		goodsReceiptNoteItemViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		goodsReceiptNoteItemViewBeforeUpsertMu.Lock()
		goodsReceiptNoteItemViewBeforeUpsertHooks = append(goodsReceiptNoteItemViewBeforeUpsertHooks, goodsReceiptNoteItemViewHook)
		goodsReceiptNoteItemViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goodsReceiptNoteItemViewAfterUpsertMu.Lock()
		goodsReceiptNoteItemViewAfterUpsertHooks = append(goodsReceiptNoteItemViewAfterUpsertHooks, goodsReceiptNoteItemViewHook)
		goodsReceiptNoteItemViewAfterUpsertMu.Unlock()
	}
}

// One returns a single goodsReceiptNoteItemView record from the query.
func (q goodsReceiptNoteItemViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoodsReceiptNoteItemView, error) {
	o := &GoodsReceiptNoteItemView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: failed to execute a one query for goods_receipt_note_item_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoodsReceiptNoteItemView records from the query.
func (q goodsReceiptNoteItemViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoodsReceiptNoteItemViewSlice, error) {
	var o []*GoodsReceiptNoteItemView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "purchase: failed to assign all query results to GoodsReceiptNoteItemView slice")
	}

	if len(goodsReceiptNoteItemViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoodsReceiptNoteItemView records in the query.
func (q goodsReceiptNoteItemViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to count goods_receipt_note_item_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goodsReceiptNoteItemViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "purchase: failed to check if goods_receipt_note_item_view exists")
	}

	return count > 0, nil
}

// GoodsReceiptNoteItemViews retrieves all the records using an executor.
func GoodsReceiptNoteItemViews(mods ...qm.QueryMod) goodsReceiptNoteItemViewQuery {
	mods = append(mods, qm.From("\"purchase\".\"goods_receipt_note_item_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"purchase\".\"goods_receipt_note_item_view\".*"})
	}

	return goodsReceiptNoteItemViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoodsReceiptNoteItemView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("purchase: no goods_receipt_note_item_view provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReceiptNoteItemViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goodsReceiptNoteItemViewInsertCacheMut.RLock()
	cache, cached := goodsReceiptNoteItemViewInsertCache[key]
	goodsReceiptNoteItemViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goodsReceiptNoteItemViewAllColumns,
			goodsReceiptNoteItemViewColumnsWithDefault,
			goodsReceiptNoteItemViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goodsReceiptNoteItemViewType, goodsReceiptNoteItemViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goodsReceiptNoteItemViewType, goodsReceiptNoteItemViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"purchase\".\"goods_receipt_note_item_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"purchase\".\"goods_receipt_note_item_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "purchase: unable to insert into goods_receipt_note_item_view")
	}

	if !cached {
		goodsReceiptNoteItemViewInsertCacheMut.Lock()
		goodsReceiptNoteItemViewInsertCache[key] = cache
		goodsReceiptNoteItemViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoodsReceiptNoteItemView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("purchase: no goods_receipt_note_item_view provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReceiptNoteItemViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goodsReceiptNoteItemViewUpsertCacheMut.RLock()
	cache, cached := goodsReceiptNoteItemViewUpsertCache[key]
	goodsReceiptNoteItemViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goodsReceiptNoteItemViewAllColumns,
			goodsReceiptNoteItemViewColumnsWithDefault,
			goodsReceiptNoteItemViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goodsReceiptNoteItemViewAllColumns,
			goodsReceiptNoteItemViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("purchase: unable to upsert goods_receipt_note_item_view, could not build update column list")
		}

		ret := strmangle.SetComplement(goodsReceiptNoteItemViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goodsReceiptNoteItemViewPrimaryKeyColumns) == 0 {
				return errors.New("purchase: unable to upsert goods_receipt_note_item_view, could not build conflict column list")
			}

			conflict = make([]string, len(goodsReceiptNoteItemViewPrimaryKeyColumns))
			copy(conflict, goodsReceiptNoteItemViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"purchase\".\"goods_receipt_note_item_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goodsReceiptNoteItemViewType, goodsReceiptNoteItemViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goodsReceiptNoteItemViewType, goodsReceiptNoteItemViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "purchase: unable to upsert goods_receipt_note_item_view")
	}

	if !cached {
		goodsReceiptNoteItemViewUpsertCacheMut.Lock()
		goodsReceiptNoteItemViewUpsertCache[key] = cache
		goodsReceiptNoteItemViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
