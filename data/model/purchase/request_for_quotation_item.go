// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package purchase

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RequestForQuotationItem is an object representing the database table.
type RequestForQuotationItem struct {
	ID                    int `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentItemID    int `boil:"base_document_item_id" json:"base_document_item_id" toml:"base_document_item_id" yaml:"base_document_item_id"`
	RequestForQuotationID int `boil:"request_for_quotation_id" json:"request_for_quotation_id" toml:"request_for_quotation_id" yaml:"request_for_quotation_id"`

	R *requestForQuotationItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L requestForQuotationItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RequestForQuotationItemColumns = struct {
	ID                    string
	BaseDocumentItemID    string
	RequestForQuotationID string
}{
	ID:                    "id",
	BaseDocumentItemID:    "base_document_item_id",
	RequestForQuotationID: "request_for_quotation_id",
}

var RequestForQuotationItemTableColumns = struct {
	ID                    string
	BaseDocumentItemID    string
	RequestForQuotationID string
}{
	ID:                    "request_for_quotation_item.id",
	BaseDocumentItemID:    "request_for_quotation_item.base_document_item_id",
	RequestForQuotationID: "request_for_quotation_item.request_for_quotation_id",
}

// Generated where

var RequestForQuotationItemWhere = struct {
	ID                    whereHelperint
	BaseDocumentItemID    whereHelperint
	RequestForQuotationID whereHelperint
}{
	ID:                    whereHelperint{field: "\"purchase\".\"request_for_quotation_item\".\"id\""},
	BaseDocumentItemID:    whereHelperint{field: "\"purchase\".\"request_for_quotation_item\".\"base_document_item_id\""},
	RequestForQuotationID: whereHelperint{field: "\"purchase\".\"request_for_quotation_item\".\"request_for_quotation_id\""},
}

// RequestForQuotationItemRels is where relationship names are stored.
var RequestForQuotationItemRels = struct {
	RequestForQuotation string
}{
	RequestForQuotation: "RequestForQuotation",
}

// requestForQuotationItemR is where relationships are stored.
type requestForQuotationItemR struct {
	RequestForQuotation *RequestForQuotation `boil:"RequestForQuotation" json:"RequestForQuotation" toml:"RequestForQuotation" yaml:"RequestForQuotation"`
}

// NewStruct creates a new relationship struct
func (*requestForQuotationItemR) NewStruct() *requestForQuotationItemR {
	return &requestForQuotationItemR{}
}

func (r *requestForQuotationItemR) GetRequestForQuotation() *RequestForQuotation {
	if r == nil {
		return nil
	}
	return r.RequestForQuotation
}

// requestForQuotationItemL is where Load methods for each relationship are stored.
type requestForQuotationItemL struct{}

var (
	requestForQuotationItemAllColumns            = []string{"id", "base_document_item_id", "request_for_quotation_id"}
	requestForQuotationItemColumnsWithoutDefault = []string{"id", "base_document_item_id", "request_for_quotation_id"}
	requestForQuotationItemColumnsWithDefault    = []string{}
	requestForQuotationItemPrimaryKeyColumns     = []string{"id"}
	requestForQuotationItemGeneratedColumns      = []string{}
)

type (
	// RequestForQuotationItemSlice is an alias for a slice of pointers to RequestForQuotationItem.
	// This should almost always be used instead of []RequestForQuotationItem.
	RequestForQuotationItemSlice []*RequestForQuotationItem
	// RequestForQuotationItemHook is the signature for custom RequestForQuotationItem hook methods
	RequestForQuotationItemHook func(context.Context, boil.ContextExecutor, *RequestForQuotationItem) error

	requestForQuotationItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	requestForQuotationItemType                 = reflect.TypeOf(&RequestForQuotationItem{})
	requestForQuotationItemMapping              = queries.MakeStructMapping(requestForQuotationItemType)
	requestForQuotationItemPrimaryKeyMapping, _ = queries.BindMapping(requestForQuotationItemType, requestForQuotationItemMapping, requestForQuotationItemPrimaryKeyColumns)
	requestForQuotationItemInsertCacheMut       sync.RWMutex
	requestForQuotationItemInsertCache          = make(map[string]insertCache)
	requestForQuotationItemUpdateCacheMut       sync.RWMutex
	requestForQuotationItemUpdateCache          = make(map[string]updateCache)
	requestForQuotationItemUpsertCacheMut       sync.RWMutex
	requestForQuotationItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var requestForQuotationItemAfterSelectMu sync.Mutex
var requestForQuotationItemAfterSelectHooks []RequestForQuotationItemHook

var requestForQuotationItemBeforeInsertMu sync.Mutex
var requestForQuotationItemBeforeInsertHooks []RequestForQuotationItemHook
var requestForQuotationItemAfterInsertMu sync.Mutex
var requestForQuotationItemAfterInsertHooks []RequestForQuotationItemHook

var requestForQuotationItemBeforeUpdateMu sync.Mutex
var requestForQuotationItemBeforeUpdateHooks []RequestForQuotationItemHook
var requestForQuotationItemAfterUpdateMu sync.Mutex
var requestForQuotationItemAfterUpdateHooks []RequestForQuotationItemHook

var requestForQuotationItemBeforeDeleteMu sync.Mutex
var requestForQuotationItemBeforeDeleteHooks []RequestForQuotationItemHook
var requestForQuotationItemAfterDeleteMu sync.Mutex
var requestForQuotationItemAfterDeleteHooks []RequestForQuotationItemHook

var requestForQuotationItemBeforeUpsertMu sync.Mutex
var requestForQuotationItemBeforeUpsertHooks []RequestForQuotationItemHook
var requestForQuotationItemAfterUpsertMu sync.Mutex
var requestForQuotationItemAfterUpsertHooks []RequestForQuotationItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RequestForQuotationItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RequestForQuotationItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RequestForQuotationItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RequestForQuotationItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RequestForQuotationItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RequestForQuotationItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RequestForQuotationItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RequestForQuotationItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RequestForQuotationItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requestForQuotationItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRequestForQuotationItemHook registers your hook function for all future operations.
func AddRequestForQuotationItemHook(hookPoint boil.HookPoint, requestForQuotationItemHook RequestForQuotationItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		requestForQuotationItemAfterSelectMu.Lock()
		requestForQuotationItemAfterSelectHooks = append(requestForQuotationItemAfterSelectHooks, requestForQuotationItemHook)
		requestForQuotationItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		requestForQuotationItemBeforeInsertMu.Lock()
		requestForQuotationItemBeforeInsertHooks = append(requestForQuotationItemBeforeInsertHooks, requestForQuotationItemHook)
		requestForQuotationItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		requestForQuotationItemAfterInsertMu.Lock()
		requestForQuotationItemAfterInsertHooks = append(requestForQuotationItemAfterInsertHooks, requestForQuotationItemHook)
		requestForQuotationItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		requestForQuotationItemBeforeUpdateMu.Lock()
		requestForQuotationItemBeforeUpdateHooks = append(requestForQuotationItemBeforeUpdateHooks, requestForQuotationItemHook)
		requestForQuotationItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		requestForQuotationItemAfterUpdateMu.Lock()
		requestForQuotationItemAfterUpdateHooks = append(requestForQuotationItemAfterUpdateHooks, requestForQuotationItemHook)
		requestForQuotationItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		requestForQuotationItemBeforeDeleteMu.Lock()
		requestForQuotationItemBeforeDeleteHooks = append(requestForQuotationItemBeforeDeleteHooks, requestForQuotationItemHook)
		requestForQuotationItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		requestForQuotationItemAfterDeleteMu.Lock()
		requestForQuotationItemAfterDeleteHooks = append(requestForQuotationItemAfterDeleteHooks, requestForQuotationItemHook)
		requestForQuotationItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		requestForQuotationItemBeforeUpsertMu.Lock()
		requestForQuotationItemBeforeUpsertHooks = append(requestForQuotationItemBeforeUpsertHooks, requestForQuotationItemHook)
		requestForQuotationItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		requestForQuotationItemAfterUpsertMu.Lock()
		requestForQuotationItemAfterUpsertHooks = append(requestForQuotationItemAfterUpsertHooks, requestForQuotationItemHook)
		requestForQuotationItemAfterUpsertMu.Unlock()
	}
}

// One returns a single requestForQuotationItem record from the query.
func (q requestForQuotationItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RequestForQuotationItem, error) {
	o := &RequestForQuotationItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: failed to execute a one query for request_for_quotation_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RequestForQuotationItem records from the query.
func (q requestForQuotationItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (RequestForQuotationItemSlice, error) {
	var o []*RequestForQuotationItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "purchase: failed to assign all query results to RequestForQuotationItem slice")
	}

	if len(requestForQuotationItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RequestForQuotationItem records in the query.
func (q requestForQuotationItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to count request_for_quotation_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q requestForQuotationItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "purchase: failed to check if request_for_quotation_item exists")
	}

	return count > 0, nil
}

// RequestForQuotation pointed to by the foreign key.
func (o *RequestForQuotationItem) RequestForQuotation(mods ...qm.QueryMod) requestForQuotationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RequestForQuotationID),
	}

	queryMods = append(queryMods, mods...)

	return RequestForQuotations(queryMods...)
}

// LoadRequestForQuotation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (requestForQuotationItemL) LoadRequestForQuotation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRequestForQuotationItem interface{}, mods queries.Applicator) error {
	var slice []*RequestForQuotationItem
	var object *RequestForQuotationItem

	if singular {
		var ok bool
		object, ok = maybeRequestForQuotationItem.(*RequestForQuotationItem)
		if !ok {
			object = new(RequestForQuotationItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRequestForQuotationItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRequestForQuotationItem))
			}
		}
	} else {
		s, ok := maybeRequestForQuotationItem.(*[]*RequestForQuotationItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRequestForQuotationItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRequestForQuotationItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &requestForQuotationItemR{}
		}
		args[object.RequestForQuotationID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &requestForQuotationItemR{}
			}

			args[obj.RequestForQuotationID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`purchase.request_for_quotation`),
		qm.WhereIn(`purchase.request_for_quotation.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RequestForQuotation")
	}

	var resultSlice []*RequestForQuotation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RequestForQuotation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for request_for_quotation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for request_for_quotation")
	}

	if len(requestForQuotationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RequestForQuotation = foreign
		if foreign.R == nil {
			foreign.R = &requestForQuotationR{}
		}
		foreign.R.RequestForQuotationItems = append(foreign.R.RequestForQuotationItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RequestForQuotationID == foreign.ID {
				local.R.RequestForQuotation = foreign
				if foreign.R == nil {
					foreign.R = &requestForQuotationR{}
				}
				foreign.R.RequestForQuotationItems = append(foreign.R.RequestForQuotationItems, local)
				break
			}
		}
	}

	return nil
}

// SetRequestForQuotation of the requestForQuotationItem to the related item.
// Sets o.R.RequestForQuotation to related.
// Adds o to related.R.RequestForQuotationItems.
func (o *RequestForQuotationItem) SetRequestForQuotation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RequestForQuotation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"purchase\".\"request_for_quotation_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"request_for_quotation_id"}),
		strmangle.WhereClause("\"", "\"", 2, requestForQuotationItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RequestForQuotationID = related.ID
	if o.R == nil {
		o.R = &requestForQuotationItemR{
			RequestForQuotation: related,
		}
	} else {
		o.R.RequestForQuotation = related
	}

	if related.R == nil {
		related.R = &requestForQuotationR{
			RequestForQuotationItems: RequestForQuotationItemSlice{o},
		}
	} else {
		related.R.RequestForQuotationItems = append(related.R.RequestForQuotationItems, o)
	}

	return nil
}

// RequestForQuotationItems retrieves all the records using an executor.
func RequestForQuotationItems(mods ...qm.QueryMod) requestForQuotationItemQuery {
	mods = append(mods, qm.From("\"purchase\".\"request_for_quotation_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"purchase\".\"request_for_quotation_item\".*"})
	}

	return requestForQuotationItemQuery{q}
}

// FindRequestForQuotationItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRequestForQuotationItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RequestForQuotationItem, error) {
	requestForQuotationItemObj := &RequestForQuotationItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"purchase\".\"request_for_quotation_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, requestForQuotationItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: unable to select from request_for_quotation_item")
	}

	if err = requestForQuotationItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return requestForQuotationItemObj, err
	}

	return requestForQuotationItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RequestForQuotationItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("purchase: no request_for_quotation_item provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requestForQuotationItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	requestForQuotationItemInsertCacheMut.RLock()
	cache, cached := requestForQuotationItemInsertCache[key]
	requestForQuotationItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			requestForQuotationItemAllColumns,
			requestForQuotationItemColumnsWithDefault,
			requestForQuotationItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(requestForQuotationItemType, requestForQuotationItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(requestForQuotationItemType, requestForQuotationItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"purchase\".\"request_for_quotation_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"purchase\".\"request_for_quotation_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "purchase: unable to insert into request_for_quotation_item")
	}

	if !cached {
		requestForQuotationItemInsertCacheMut.Lock()
		requestForQuotationItemInsertCache[key] = cache
		requestForQuotationItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RequestForQuotationItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RequestForQuotationItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	requestForQuotationItemUpdateCacheMut.RLock()
	cache, cached := requestForQuotationItemUpdateCache[key]
	requestForQuotationItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			requestForQuotationItemAllColumns,
			requestForQuotationItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("purchase: unable to update request_for_quotation_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"purchase\".\"request_for_quotation_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, requestForQuotationItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(requestForQuotationItemType, requestForQuotationItemMapping, append(wl, requestForQuotationItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update request_for_quotation_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by update for request_for_quotation_item")
	}

	if !cached {
		requestForQuotationItemUpdateCacheMut.Lock()
		requestForQuotationItemUpdateCache[key] = cache
		requestForQuotationItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q requestForQuotationItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update all for request_for_quotation_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to retrieve rows affected for request_for_quotation_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RequestForQuotationItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("purchase: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestForQuotationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"purchase\".\"request_for_quotation_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, requestForQuotationItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update all in requestForQuotationItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to retrieve rows affected all in update all requestForQuotationItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RequestForQuotationItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("purchase: no request_for_quotation_item provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requestForQuotationItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	requestForQuotationItemUpsertCacheMut.RLock()
	cache, cached := requestForQuotationItemUpsertCache[key]
	requestForQuotationItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			requestForQuotationItemAllColumns,
			requestForQuotationItemColumnsWithDefault,
			requestForQuotationItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			requestForQuotationItemAllColumns,
			requestForQuotationItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("purchase: unable to upsert request_for_quotation_item, could not build update column list")
		}

		ret := strmangle.SetComplement(requestForQuotationItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(requestForQuotationItemPrimaryKeyColumns) == 0 {
				return errors.New("purchase: unable to upsert request_for_quotation_item, could not build conflict column list")
			}

			conflict = make([]string, len(requestForQuotationItemPrimaryKeyColumns))
			copy(conflict, requestForQuotationItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"purchase\".\"request_for_quotation_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(requestForQuotationItemType, requestForQuotationItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(requestForQuotationItemType, requestForQuotationItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "purchase: unable to upsert request_for_quotation_item")
	}

	if !cached {
		requestForQuotationItemUpsertCacheMut.Lock()
		requestForQuotationItemUpsertCache[key] = cache
		requestForQuotationItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RequestForQuotationItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RequestForQuotationItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("purchase: no RequestForQuotationItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), requestForQuotationItemPrimaryKeyMapping)
	sql := "DELETE FROM \"purchase\".\"request_for_quotation_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete from request_for_quotation_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by delete for request_for_quotation_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q requestForQuotationItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("purchase: no requestForQuotationItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete all from request_for_quotation_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by deleteall for request_for_quotation_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RequestForQuotationItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(requestForQuotationItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestForQuotationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"purchase\".\"request_for_quotation_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, requestForQuotationItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete all from requestForQuotationItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by deleteall for request_for_quotation_item")
	}

	if len(requestForQuotationItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RequestForQuotationItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRequestForQuotationItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RequestForQuotationItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RequestForQuotationItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requestForQuotationItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"purchase\".\"request_for_quotation_item\".* FROM \"purchase\".\"request_for_quotation_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, requestForQuotationItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "purchase: unable to reload all in RequestForQuotationItemSlice")
	}

	*o = slice

	return nil
}

// RequestForQuotationItemExists checks if the RequestForQuotationItem row exists.
func RequestForQuotationItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"purchase\".\"request_for_quotation_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "purchase: unable to check if request_for_quotation_item exists")
	}

	return exists, nil
}

// Exists checks if the RequestForQuotationItem row exists.
func (o *RequestForQuotationItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RequestForQuotationItemExists(ctx, exec, o.ID)
}
