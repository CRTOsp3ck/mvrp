// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package purchase

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PurchaseOrderItemView is an object representing the database table.
type PurchaseOrderItemView struct {
	ID                 null.Int  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	BaseDocumentItemID null.Int  `boil:"base_document_item_id" json:"base_document_item_id,omitempty" toml:"base_document_item_id" yaml:"base_document_item_id,omitempty"`
	PurchaseOrderID    null.Int  `boil:"purchase_order_id" json:"purchase_order_id,omitempty" toml:"purchase_order_id" yaml:"purchase_order_id,omitempty"`
	BaseDocumentItem   null.JSON `boil:"base_document_item" json:"base_document_item,omitempty" toml:"base_document_item" yaml:"base_document_item,omitempty"`
}

var PurchaseOrderItemViewColumns = struct {
	ID                 string
	BaseDocumentItemID string
	PurchaseOrderID    string
	BaseDocumentItem   string
}{
	ID:                 "id",
	BaseDocumentItemID: "base_document_item_id",
	PurchaseOrderID:    "purchase_order_id",
	BaseDocumentItem:   "base_document_item",
}

var PurchaseOrderItemViewTableColumns = struct {
	ID                 string
	BaseDocumentItemID string
	PurchaseOrderID    string
	BaseDocumentItem   string
}{
	ID:                 "purchase_order_item_view.id",
	BaseDocumentItemID: "purchase_order_item_view.base_document_item_id",
	PurchaseOrderID:    "purchase_order_item_view.purchase_order_id",
	BaseDocumentItem:   "purchase_order_item_view.base_document_item",
}

// Generated where

var PurchaseOrderItemViewWhere = struct {
	ID                 whereHelpernull_Int
	BaseDocumentItemID whereHelpernull_Int
	PurchaseOrderID    whereHelpernull_Int
	BaseDocumentItem   whereHelpernull_JSON
}{
	ID:                 whereHelpernull_Int{field: "\"purchase\".\"purchase_order_item_view\".\"id\""},
	BaseDocumentItemID: whereHelpernull_Int{field: "\"purchase\".\"purchase_order_item_view\".\"base_document_item_id\""},
	PurchaseOrderID:    whereHelpernull_Int{field: "\"purchase\".\"purchase_order_item_view\".\"purchase_order_id\""},
	BaseDocumentItem:   whereHelpernull_JSON{field: "\"purchase\".\"purchase_order_item_view\".\"base_document_item\""},
}

var (
	purchaseOrderItemViewAllColumns            = []string{"id", "base_document_item_id", "purchase_order_id", "base_document_item"}
	purchaseOrderItemViewColumnsWithoutDefault = []string{}
	purchaseOrderItemViewColumnsWithDefault    = []string{"id", "base_document_item_id", "purchase_order_id", "base_document_item"}
	purchaseOrderItemViewPrimaryKeyColumns     = []string{}
	purchaseOrderItemViewGeneratedColumns      = []string{}
)

type (
	// PurchaseOrderItemViewSlice is an alias for a slice of pointers to PurchaseOrderItemView.
	// This should almost always be used instead of []PurchaseOrderItemView.
	PurchaseOrderItemViewSlice []*PurchaseOrderItemView
	// PurchaseOrderItemViewHook is the signature for custom PurchaseOrderItemView hook methods
	PurchaseOrderItemViewHook func(context.Context, boil.ContextExecutor, *PurchaseOrderItemView) error

	purchaseOrderItemViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	purchaseOrderItemViewType           = reflect.TypeOf(&PurchaseOrderItemView{})
	purchaseOrderItemViewMapping        = queries.MakeStructMapping(purchaseOrderItemViewType)
	purchaseOrderItemViewInsertCacheMut sync.RWMutex
	purchaseOrderItemViewInsertCache    = make(map[string]insertCache)
	purchaseOrderItemViewUpdateCacheMut sync.RWMutex
	purchaseOrderItemViewUpdateCache    = make(map[string]updateCache)
	purchaseOrderItemViewUpsertCacheMut sync.RWMutex
	purchaseOrderItemViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var purchaseOrderItemViewAfterSelectMu sync.Mutex
var purchaseOrderItemViewAfterSelectHooks []PurchaseOrderItemViewHook

var purchaseOrderItemViewBeforeInsertMu sync.Mutex
var purchaseOrderItemViewBeforeInsertHooks []PurchaseOrderItemViewHook
var purchaseOrderItemViewAfterInsertMu sync.Mutex
var purchaseOrderItemViewAfterInsertHooks []PurchaseOrderItemViewHook

var purchaseOrderItemViewBeforeUpsertMu sync.Mutex
var purchaseOrderItemViewBeforeUpsertHooks []PurchaseOrderItemViewHook
var purchaseOrderItemViewAfterUpsertMu sync.Mutex
var purchaseOrderItemViewAfterUpsertHooks []PurchaseOrderItemViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PurchaseOrderItemView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderItemViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PurchaseOrderItemView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderItemViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PurchaseOrderItemView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderItemViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PurchaseOrderItemView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderItemViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PurchaseOrderItemView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderItemViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPurchaseOrderItemViewHook registers your hook function for all future operations.
func AddPurchaseOrderItemViewHook(hookPoint boil.HookPoint, purchaseOrderItemViewHook PurchaseOrderItemViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		purchaseOrderItemViewAfterSelectMu.Lock()
		purchaseOrderItemViewAfterSelectHooks = append(purchaseOrderItemViewAfterSelectHooks, purchaseOrderItemViewHook)
		purchaseOrderItemViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		purchaseOrderItemViewBeforeInsertMu.Lock()
		purchaseOrderItemViewBeforeInsertHooks = append(purchaseOrderItemViewBeforeInsertHooks, purchaseOrderItemViewHook)
		purchaseOrderItemViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		purchaseOrderItemViewAfterInsertMu.Lock()
		purchaseOrderItemViewAfterInsertHooks = append(purchaseOrderItemViewAfterInsertHooks, purchaseOrderItemViewHook)
		purchaseOrderItemViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		purchaseOrderItemViewBeforeUpsertMu.Lock()
		purchaseOrderItemViewBeforeUpsertHooks = append(purchaseOrderItemViewBeforeUpsertHooks, purchaseOrderItemViewHook)
		purchaseOrderItemViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		purchaseOrderItemViewAfterUpsertMu.Lock()
		purchaseOrderItemViewAfterUpsertHooks = append(purchaseOrderItemViewAfterUpsertHooks, purchaseOrderItemViewHook)
		purchaseOrderItemViewAfterUpsertMu.Unlock()
	}
}

// One returns a single purchaseOrderItemView record from the query.
func (q purchaseOrderItemViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PurchaseOrderItemView, error) {
	o := &PurchaseOrderItemView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: failed to execute a one query for purchase_order_item_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PurchaseOrderItemView records from the query.
func (q purchaseOrderItemViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (PurchaseOrderItemViewSlice, error) {
	var o []*PurchaseOrderItemView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "purchase: failed to assign all query results to PurchaseOrderItemView slice")
	}

	if len(purchaseOrderItemViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PurchaseOrderItemView records in the query.
func (q purchaseOrderItemViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to count purchase_order_item_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q purchaseOrderItemViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "purchase: failed to check if purchase_order_item_view exists")
	}

	return count > 0, nil
}

// PurchaseOrderItemViews retrieves all the records using an executor.
func PurchaseOrderItemViews(mods ...qm.QueryMod) purchaseOrderItemViewQuery {
	mods = append(mods, qm.From("\"purchase\".\"purchase_order_item_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"purchase\".\"purchase_order_item_view\".*"})
	}

	return purchaseOrderItemViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PurchaseOrderItemView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("purchase: no purchase_order_item_view provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchaseOrderItemViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	purchaseOrderItemViewInsertCacheMut.RLock()
	cache, cached := purchaseOrderItemViewInsertCache[key]
	purchaseOrderItemViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			purchaseOrderItemViewAllColumns,
			purchaseOrderItemViewColumnsWithDefault,
			purchaseOrderItemViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(purchaseOrderItemViewType, purchaseOrderItemViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(purchaseOrderItemViewType, purchaseOrderItemViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"purchase\".\"purchase_order_item_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"purchase\".\"purchase_order_item_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "purchase: unable to insert into purchase_order_item_view")
	}

	if !cached {
		purchaseOrderItemViewInsertCacheMut.Lock()
		purchaseOrderItemViewInsertCache[key] = cache
		purchaseOrderItemViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PurchaseOrderItemView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("purchase: no purchase_order_item_view provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchaseOrderItemViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	purchaseOrderItemViewUpsertCacheMut.RLock()
	cache, cached := purchaseOrderItemViewUpsertCache[key]
	purchaseOrderItemViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			purchaseOrderItemViewAllColumns,
			purchaseOrderItemViewColumnsWithDefault,
			purchaseOrderItemViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			purchaseOrderItemViewAllColumns,
			purchaseOrderItemViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("purchase: unable to upsert purchase_order_item_view, could not build update column list")
		}

		ret := strmangle.SetComplement(purchaseOrderItemViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(purchaseOrderItemViewPrimaryKeyColumns) == 0 {
				return errors.New("purchase: unable to upsert purchase_order_item_view, could not build conflict column list")
			}

			conflict = make([]string, len(purchaseOrderItemViewPrimaryKeyColumns))
			copy(conflict, purchaseOrderItemViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"purchase\".\"purchase_order_item_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(purchaseOrderItemViewType, purchaseOrderItemViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(purchaseOrderItemViewType, purchaseOrderItemViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "purchase: unable to upsert purchase_order_item_view")
	}

	if !cached {
		purchaseOrderItemViewUpsertCacheMut.Lock()
		purchaseOrderItemViewUpsertCache[key] = cache
		purchaseOrderItemViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
