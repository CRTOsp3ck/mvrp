// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package purchase

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PurchaseOrder is an object representing the database table.
type PurchaseOrder struct {
	ID                  int                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentID      int                 `boil:"base_document_id" json:"base_document_id" toml:"base_document_id" yaml:"base_document_id"`
	PurchaseOrderNumber string              `boil:"purchase_order_number" json:"purchase_order_number" toml:"purchase_order_number" yaml:"purchase_order_number"`
	VendorID            null.Int            `boil:"vendor_id" json:"vendor_id,omitempty" toml:"vendor_id" yaml:"vendor_id,omitempty"`
	CustomerID          null.Int            `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	ShipToInformation   null.String         `boil:"ship_to_information" json:"ship_to_information,omitempty" toml:"ship_to_information" yaml:"ship_to_information,omitempty"`
	PaymentDueDate      null.Time           `boil:"payment_due_date" json:"payment_due_date,omitempty" toml:"payment_due_date" yaml:"payment_due_date,omitempty"`
	OrderStatus         PurchaseOrderStatus `boil:"order_status" json:"order_status" toml:"order_status" yaml:"order_status"`

	R *purchaseOrderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L purchaseOrderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PurchaseOrderColumns = struct {
	ID                  string
	BaseDocumentID      string
	PurchaseOrderNumber string
	VendorID            string
	CustomerID          string
	ShipToInformation   string
	PaymentDueDate      string
	OrderStatus         string
}{
	ID:                  "id",
	BaseDocumentID:      "base_document_id",
	PurchaseOrderNumber: "purchase_order_number",
	VendorID:            "vendor_id",
	CustomerID:          "customer_id",
	ShipToInformation:   "ship_to_information",
	PaymentDueDate:      "payment_due_date",
	OrderStatus:         "order_status",
}

var PurchaseOrderTableColumns = struct {
	ID                  string
	BaseDocumentID      string
	PurchaseOrderNumber string
	VendorID            string
	CustomerID          string
	ShipToInformation   string
	PaymentDueDate      string
	OrderStatus         string
}{
	ID:                  "purchase_order.id",
	BaseDocumentID:      "purchase_order.base_document_id",
	PurchaseOrderNumber: "purchase_order.purchase_order_number",
	VendorID:            "purchase_order.vendor_id",
	CustomerID:          "purchase_order.customer_id",
	ShipToInformation:   "purchase_order.ship_to_information",
	PaymentDueDate:      "purchase_order.payment_due_date",
	OrderStatus:         "purchase_order.order_status",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperPurchaseOrderStatus struct{ field string }

func (w whereHelperPurchaseOrderStatus) EQ(x PurchaseOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperPurchaseOrderStatus) NEQ(x PurchaseOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperPurchaseOrderStatus) LT(x PurchaseOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperPurchaseOrderStatus) LTE(x PurchaseOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperPurchaseOrderStatus) GT(x PurchaseOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperPurchaseOrderStatus) GTE(x PurchaseOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperPurchaseOrderStatus) IN(slice []PurchaseOrderStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperPurchaseOrderStatus) NIN(slice []PurchaseOrderStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PurchaseOrderWhere = struct {
	ID                  whereHelperint
	BaseDocumentID      whereHelperint
	PurchaseOrderNumber whereHelperstring
	VendorID            whereHelpernull_Int
	CustomerID          whereHelpernull_Int
	ShipToInformation   whereHelpernull_String
	PaymentDueDate      whereHelpernull_Time
	OrderStatus         whereHelperPurchaseOrderStatus
}{
	ID:                  whereHelperint{field: "\"purchase\".\"purchase_order\".\"id\""},
	BaseDocumentID:      whereHelperint{field: "\"purchase\".\"purchase_order\".\"base_document_id\""},
	PurchaseOrderNumber: whereHelperstring{field: "\"purchase\".\"purchase_order\".\"purchase_order_number\""},
	VendorID:            whereHelpernull_Int{field: "\"purchase\".\"purchase_order\".\"vendor_id\""},
	CustomerID:          whereHelpernull_Int{field: "\"purchase\".\"purchase_order\".\"customer_id\""},
	ShipToInformation:   whereHelpernull_String{field: "\"purchase\".\"purchase_order\".\"ship_to_information\""},
	PaymentDueDate:      whereHelpernull_Time{field: "\"purchase\".\"purchase_order\".\"payment_due_date\""},
	OrderStatus:         whereHelperPurchaseOrderStatus{field: "\"purchase\".\"purchase_order\".\"order_status\""},
}

// PurchaseOrderRels is where relationship names are stored.
var PurchaseOrderRels = struct {
	GoodsReceiptNotes  string
	PurchaseOrderItems string
}{
	GoodsReceiptNotes:  "GoodsReceiptNotes",
	PurchaseOrderItems: "PurchaseOrderItems",
}

// purchaseOrderR is where relationships are stored.
type purchaseOrderR struct {
	GoodsReceiptNotes  GoodsReceiptNoteSlice  `boil:"GoodsReceiptNotes" json:"GoodsReceiptNotes" toml:"GoodsReceiptNotes" yaml:"GoodsReceiptNotes"`
	PurchaseOrderItems PurchaseOrderItemSlice `boil:"PurchaseOrderItems" json:"PurchaseOrderItems" toml:"PurchaseOrderItems" yaml:"PurchaseOrderItems"`
}

// NewStruct creates a new relationship struct
func (*purchaseOrderR) NewStruct() *purchaseOrderR {
	return &purchaseOrderR{}
}

func (r *purchaseOrderR) GetGoodsReceiptNotes() GoodsReceiptNoteSlice {
	if r == nil {
		return nil
	}
	return r.GoodsReceiptNotes
}

func (r *purchaseOrderR) GetPurchaseOrderItems() PurchaseOrderItemSlice {
	if r == nil {
		return nil
	}
	return r.PurchaseOrderItems
}

// purchaseOrderL is where Load methods for each relationship are stored.
type purchaseOrderL struct{}

var (
	purchaseOrderAllColumns            = []string{"id", "base_document_id", "purchase_order_number", "vendor_id", "customer_id", "ship_to_information", "payment_due_date", "order_status"}
	purchaseOrderColumnsWithoutDefault = []string{"id", "base_document_id", "purchase_order_number", "order_status"}
	purchaseOrderColumnsWithDefault    = []string{"vendor_id", "customer_id", "ship_to_information", "payment_due_date"}
	purchaseOrderPrimaryKeyColumns     = []string{"id"}
	purchaseOrderGeneratedColumns      = []string{}
)

type (
	// PurchaseOrderSlice is an alias for a slice of pointers to PurchaseOrder.
	// This should almost always be used instead of []PurchaseOrder.
	PurchaseOrderSlice []*PurchaseOrder
	// PurchaseOrderHook is the signature for custom PurchaseOrder hook methods
	PurchaseOrderHook func(context.Context, boil.ContextExecutor, *PurchaseOrder) error

	purchaseOrderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	purchaseOrderType                 = reflect.TypeOf(&PurchaseOrder{})
	purchaseOrderMapping              = queries.MakeStructMapping(purchaseOrderType)
	purchaseOrderPrimaryKeyMapping, _ = queries.BindMapping(purchaseOrderType, purchaseOrderMapping, purchaseOrderPrimaryKeyColumns)
	purchaseOrderInsertCacheMut       sync.RWMutex
	purchaseOrderInsertCache          = make(map[string]insertCache)
	purchaseOrderUpdateCacheMut       sync.RWMutex
	purchaseOrderUpdateCache          = make(map[string]updateCache)
	purchaseOrderUpsertCacheMut       sync.RWMutex
	purchaseOrderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var purchaseOrderAfterSelectMu sync.Mutex
var purchaseOrderAfterSelectHooks []PurchaseOrderHook

var purchaseOrderBeforeInsertMu sync.Mutex
var purchaseOrderBeforeInsertHooks []PurchaseOrderHook
var purchaseOrderAfterInsertMu sync.Mutex
var purchaseOrderAfterInsertHooks []PurchaseOrderHook

var purchaseOrderBeforeUpdateMu sync.Mutex
var purchaseOrderBeforeUpdateHooks []PurchaseOrderHook
var purchaseOrderAfterUpdateMu sync.Mutex
var purchaseOrderAfterUpdateHooks []PurchaseOrderHook

var purchaseOrderBeforeDeleteMu sync.Mutex
var purchaseOrderBeforeDeleteHooks []PurchaseOrderHook
var purchaseOrderAfterDeleteMu sync.Mutex
var purchaseOrderAfterDeleteHooks []PurchaseOrderHook

var purchaseOrderBeforeUpsertMu sync.Mutex
var purchaseOrderBeforeUpsertHooks []PurchaseOrderHook
var purchaseOrderAfterUpsertMu sync.Mutex
var purchaseOrderAfterUpsertHooks []PurchaseOrderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PurchaseOrder) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PurchaseOrder) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PurchaseOrder) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PurchaseOrder) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PurchaseOrder) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PurchaseOrder) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PurchaseOrder) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PurchaseOrder) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PurchaseOrder) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPurchaseOrderHook registers your hook function for all future operations.
func AddPurchaseOrderHook(hookPoint boil.HookPoint, purchaseOrderHook PurchaseOrderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		purchaseOrderAfterSelectMu.Lock()
		purchaseOrderAfterSelectHooks = append(purchaseOrderAfterSelectHooks, purchaseOrderHook)
		purchaseOrderAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		purchaseOrderBeforeInsertMu.Lock()
		purchaseOrderBeforeInsertHooks = append(purchaseOrderBeforeInsertHooks, purchaseOrderHook)
		purchaseOrderBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		purchaseOrderAfterInsertMu.Lock()
		purchaseOrderAfterInsertHooks = append(purchaseOrderAfterInsertHooks, purchaseOrderHook)
		purchaseOrderAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		purchaseOrderBeforeUpdateMu.Lock()
		purchaseOrderBeforeUpdateHooks = append(purchaseOrderBeforeUpdateHooks, purchaseOrderHook)
		purchaseOrderBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		purchaseOrderAfterUpdateMu.Lock()
		purchaseOrderAfterUpdateHooks = append(purchaseOrderAfterUpdateHooks, purchaseOrderHook)
		purchaseOrderAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		purchaseOrderBeforeDeleteMu.Lock()
		purchaseOrderBeforeDeleteHooks = append(purchaseOrderBeforeDeleteHooks, purchaseOrderHook)
		purchaseOrderBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		purchaseOrderAfterDeleteMu.Lock()
		purchaseOrderAfterDeleteHooks = append(purchaseOrderAfterDeleteHooks, purchaseOrderHook)
		purchaseOrderAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		purchaseOrderBeforeUpsertMu.Lock()
		purchaseOrderBeforeUpsertHooks = append(purchaseOrderBeforeUpsertHooks, purchaseOrderHook)
		purchaseOrderBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		purchaseOrderAfterUpsertMu.Lock()
		purchaseOrderAfterUpsertHooks = append(purchaseOrderAfterUpsertHooks, purchaseOrderHook)
		purchaseOrderAfterUpsertMu.Unlock()
	}
}

// One returns a single purchaseOrder record from the query.
func (q purchaseOrderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PurchaseOrder, error) {
	o := &PurchaseOrder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: failed to execute a one query for purchase_order")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PurchaseOrder records from the query.
func (q purchaseOrderQuery) All(ctx context.Context, exec boil.ContextExecutor) (PurchaseOrderSlice, error) {
	var o []*PurchaseOrder

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "purchase: failed to assign all query results to PurchaseOrder slice")
	}

	if len(purchaseOrderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PurchaseOrder records in the query.
func (q purchaseOrderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to count purchase_order rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q purchaseOrderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "purchase: failed to check if purchase_order exists")
	}

	return count > 0, nil
}

// GoodsReceiptNotes retrieves all the goods_receipt_note's GoodsReceiptNotes with an executor.
func (o *PurchaseOrder) GoodsReceiptNotes(mods ...qm.QueryMod) goodsReceiptNoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"purchase\".\"goods_receipt_note\".\"purchase_order_id\"=?", o.ID),
	)

	return GoodsReceiptNotes(queryMods...)
}

// PurchaseOrderItems retrieves all the purchase_order_item's PurchaseOrderItems with an executor.
func (o *PurchaseOrder) PurchaseOrderItems(mods ...qm.QueryMod) purchaseOrderItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"purchase\".\"purchase_order_item\".\"purchase_order_id\"=?", o.ID),
	)

	return PurchaseOrderItems(queryMods...)
}

// LoadGoodsReceiptNotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (purchaseOrderL) LoadGoodsReceiptNotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybePurchaseOrder interface{}, mods queries.Applicator) error {
	var slice []*PurchaseOrder
	var object *PurchaseOrder

	if singular {
		var ok bool
		object, ok = maybePurchaseOrder.(*PurchaseOrder)
		if !ok {
			object = new(PurchaseOrder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePurchaseOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePurchaseOrder))
			}
		}
	} else {
		s, ok := maybePurchaseOrder.(*[]*PurchaseOrder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePurchaseOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePurchaseOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &purchaseOrderR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &purchaseOrderR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`purchase.goods_receipt_note`),
		qm.WhereIn(`purchase.goods_receipt_note.purchase_order_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load goods_receipt_note")
	}

	var resultSlice []*GoodsReceiptNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice goods_receipt_note")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on goods_receipt_note")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for goods_receipt_note")
	}

	if len(goodsReceiptNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GoodsReceiptNotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &goodsReceiptNoteR{}
			}
			foreign.R.PurchaseOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PurchaseOrderID {
				local.R.GoodsReceiptNotes = append(local.R.GoodsReceiptNotes, foreign)
				if foreign.R == nil {
					foreign.R = &goodsReceiptNoteR{}
				}
				foreign.R.PurchaseOrder = local
				break
			}
		}
	}

	return nil
}

// LoadPurchaseOrderItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (purchaseOrderL) LoadPurchaseOrderItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybePurchaseOrder interface{}, mods queries.Applicator) error {
	var slice []*PurchaseOrder
	var object *PurchaseOrder

	if singular {
		var ok bool
		object, ok = maybePurchaseOrder.(*PurchaseOrder)
		if !ok {
			object = new(PurchaseOrder)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePurchaseOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePurchaseOrder))
			}
		}
	} else {
		s, ok := maybePurchaseOrder.(*[]*PurchaseOrder)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePurchaseOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePurchaseOrder))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &purchaseOrderR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &purchaseOrderR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`purchase.purchase_order_item`),
		qm.WhereIn(`purchase.purchase_order_item.purchase_order_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load purchase_order_item")
	}

	var resultSlice []*PurchaseOrderItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice purchase_order_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on purchase_order_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for purchase_order_item")
	}

	if len(purchaseOrderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchaseOrderItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &purchaseOrderItemR{}
			}
			foreign.R.PurchaseOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PurchaseOrderID {
				local.R.PurchaseOrderItems = append(local.R.PurchaseOrderItems, foreign)
				if foreign.R == nil {
					foreign.R = &purchaseOrderItemR{}
				}
				foreign.R.PurchaseOrder = local
				break
			}
		}
	}

	return nil
}

// AddGoodsReceiptNotes adds the given related objects to the existing relationships
// of the purchase_order, optionally inserting them as new records.
// Appends related to o.R.GoodsReceiptNotes.
// Sets related.R.PurchaseOrder appropriately.
func (o *PurchaseOrder) AddGoodsReceiptNotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GoodsReceiptNote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PurchaseOrderID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"purchase\".\"goods_receipt_note\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"purchase_order_id"}),
				strmangle.WhereClause("\"", "\"", 2, goodsReceiptNotePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PurchaseOrderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &purchaseOrderR{
			GoodsReceiptNotes: related,
		}
	} else {
		o.R.GoodsReceiptNotes = append(o.R.GoodsReceiptNotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &goodsReceiptNoteR{
				PurchaseOrder: o,
			}
		} else {
			rel.R.PurchaseOrder = o
		}
	}
	return nil
}

// AddPurchaseOrderItems adds the given related objects to the existing relationships
// of the purchase_order, optionally inserting them as new records.
// Appends related to o.R.PurchaseOrderItems.
// Sets related.R.PurchaseOrder appropriately.
func (o *PurchaseOrder) AddPurchaseOrderItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PurchaseOrderItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PurchaseOrderID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"purchase\".\"purchase_order_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"purchase_order_id"}),
				strmangle.WhereClause("\"", "\"", 2, purchaseOrderItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PurchaseOrderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &purchaseOrderR{
			PurchaseOrderItems: related,
		}
	} else {
		o.R.PurchaseOrderItems = append(o.R.PurchaseOrderItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &purchaseOrderItemR{
				PurchaseOrder: o,
			}
		} else {
			rel.R.PurchaseOrder = o
		}
	}
	return nil
}

// PurchaseOrders retrieves all the records using an executor.
func PurchaseOrders(mods ...qm.QueryMod) purchaseOrderQuery {
	mods = append(mods, qm.From("\"purchase\".\"purchase_order\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"purchase\".\"purchase_order\".*"})
	}

	return purchaseOrderQuery{q}
}

// FindPurchaseOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPurchaseOrder(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PurchaseOrder, error) {
	purchaseOrderObj := &PurchaseOrder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"purchase\".\"purchase_order\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, purchaseOrderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: unable to select from purchase_order")
	}

	if err = purchaseOrderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return purchaseOrderObj, err
	}

	return purchaseOrderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PurchaseOrder) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("purchase: no purchase_order provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchaseOrderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	purchaseOrderInsertCacheMut.RLock()
	cache, cached := purchaseOrderInsertCache[key]
	purchaseOrderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			purchaseOrderAllColumns,
			purchaseOrderColumnsWithDefault,
			purchaseOrderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(purchaseOrderType, purchaseOrderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(purchaseOrderType, purchaseOrderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"purchase\".\"purchase_order\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"purchase\".\"purchase_order\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "purchase: unable to insert into purchase_order")
	}

	if !cached {
		purchaseOrderInsertCacheMut.Lock()
		purchaseOrderInsertCache[key] = cache
		purchaseOrderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PurchaseOrder.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PurchaseOrder) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	purchaseOrderUpdateCacheMut.RLock()
	cache, cached := purchaseOrderUpdateCache[key]
	purchaseOrderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			purchaseOrderAllColumns,
			purchaseOrderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("purchase: unable to update purchase_order, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"purchase\".\"purchase_order\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, purchaseOrderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(purchaseOrderType, purchaseOrderMapping, append(wl, purchaseOrderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update purchase_order row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by update for purchase_order")
	}

	if !cached {
		purchaseOrderUpdateCacheMut.Lock()
		purchaseOrderUpdateCache[key] = cache
		purchaseOrderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q purchaseOrderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update all for purchase_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to retrieve rows affected for purchase_order")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PurchaseOrderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("purchase: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchaseOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"purchase\".\"purchase_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, purchaseOrderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update all in purchaseOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to retrieve rows affected all in update all purchaseOrder")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PurchaseOrder) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("purchase: no purchase_order provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchaseOrderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	purchaseOrderUpsertCacheMut.RLock()
	cache, cached := purchaseOrderUpsertCache[key]
	purchaseOrderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			purchaseOrderAllColumns,
			purchaseOrderColumnsWithDefault,
			purchaseOrderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			purchaseOrderAllColumns,
			purchaseOrderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("purchase: unable to upsert purchase_order, could not build update column list")
		}

		ret := strmangle.SetComplement(purchaseOrderAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(purchaseOrderPrimaryKeyColumns) == 0 {
				return errors.New("purchase: unable to upsert purchase_order, could not build conflict column list")
			}

			conflict = make([]string, len(purchaseOrderPrimaryKeyColumns))
			copy(conflict, purchaseOrderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"purchase\".\"purchase_order\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(purchaseOrderType, purchaseOrderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(purchaseOrderType, purchaseOrderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "purchase: unable to upsert purchase_order")
	}

	if !cached {
		purchaseOrderUpsertCacheMut.Lock()
		purchaseOrderUpsertCache[key] = cache
		purchaseOrderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PurchaseOrder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PurchaseOrder) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("purchase: no PurchaseOrder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), purchaseOrderPrimaryKeyMapping)
	sql := "DELETE FROM \"purchase\".\"purchase_order\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete from purchase_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by delete for purchase_order")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q purchaseOrderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("purchase: no purchaseOrderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete all from purchase_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by deleteall for purchase_order")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PurchaseOrderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(purchaseOrderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchaseOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"purchase\".\"purchase_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, purchaseOrderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete all from purchaseOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by deleteall for purchase_order")
	}

	if len(purchaseOrderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PurchaseOrder) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPurchaseOrder(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PurchaseOrderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PurchaseOrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchaseOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"purchase\".\"purchase_order\".* FROM \"purchase\".\"purchase_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, purchaseOrderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "purchase: unable to reload all in PurchaseOrderSlice")
	}

	*o = slice

	return nil
}

// PurchaseOrderExists checks if the PurchaseOrder row exists.
func PurchaseOrderExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"purchase\".\"purchase_order\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "purchase: unable to check if purchase_order exists")
	}

	return exists, nil
}

// Exists checks if the PurchaseOrder row exists.
func (o *PurchaseOrder) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PurchaseOrderExists(ctx, exec, o.ID)
}
