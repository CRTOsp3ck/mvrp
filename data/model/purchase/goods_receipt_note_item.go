// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package purchase

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GoodsReceiptNoteItem is an object representing the database table.
type GoodsReceiptNoteItem struct {
	ID                 int `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseDocumentItemID int `boil:"base_document_item_id" json:"base_document_item_id" toml:"base_document_item_id" yaml:"base_document_item_id"`
	GoodsReceiptNoteID int `boil:"goods_receipt_note_id" json:"goods_receipt_note_id" toml:"goods_receipt_note_id" yaml:"goods_receipt_note_id"`

	R *goodsReceiptNoteItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L goodsReceiptNoteItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoodsReceiptNoteItemColumns = struct {
	ID                 string
	BaseDocumentItemID string
	GoodsReceiptNoteID string
}{
	ID:                 "id",
	BaseDocumentItemID: "base_document_item_id",
	GoodsReceiptNoteID: "goods_receipt_note_id",
}

var GoodsReceiptNoteItemTableColumns = struct {
	ID                 string
	BaseDocumentItemID string
	GoodsReceiptNoteID string
}{
	ID:                 "goods_receipt_note_item.id",
	BaseDocumentItemID: "goods_receipt_note_item.base_document_item_id",
	GoodsReceiptNoteID: "goods_receipt_note_item.goods_receipt_note_id",
}

// Generated where

var GoodsReceiptNoteItemWhere = struct {
	ID                 whereHelperint
	BaseDocumentItemID whereHelperint
	GoodsReceiptNoteID whereHelperint
}{
	ID:                 whereHelperint{field: "\"purchase\".\"goods_receipt_note_item\".\"id\""},
	BaseDocumentItemID: whereHelperint{field: "\"purchase\".\"goods_receipt_note_item\".\"base_document_item_id\""},
	GoodsReceiptNoteID: whereHelperint{field: "\"purchase\".\"goods_receipt_note_item\".\"goods_receipt_note_id\""},
}

// GoodsReceiptNoteItemRels is where relationship names are stored.
var GoodsReceiptNoteItemRels = struct {
	GoodsReceiptNote string
}{
	GoodsReceiptNote: "GoodsReceiptNote",
}

// goodsReceiptNoteItemR is where relationships are stored.
type goodsReceiptNoteItemR struct {
	GoodsReceiptNote *GoodsReceiptNote `boil:"GoodsReceiptNote" json:"GoodsReceiptNote" toml:"GoodsReceiptNote" yaml:"GoodsReceiptNote"`
}

// NewStruct creates a new relationship struct
func (*goodsReceiptNoteItemR) NewStruct() *goodsReceiptNoteItemR {
	return &goodsReceiptNoteItemR{}
}

func (r *goodsReceiptNoteItemR) GetGoodsReceiptNote() *GoodsReceiptNote {
	if r == nil {
		return nil
	}
	return r.GoodsReceiptNote
}

// goodsReceiptNoteItemL is where Load methods for each relationship are stored.
type goodsReceiptNoteItemL struct{}

var (
	goodsReceiptNoteItemAllColumns            = []string{"id", "base_document_item_id", "goods_receipt_note_id"}
	goodsReceiptNoteItemColumnsWithoutDefault = []string{"id", "base_document_item_id", "goods_receipt_note_id"}
	goodsReceiptNoteItemColumnsWithDefault    = []string{}
	goodsReceiptNoteItemPrimaryKeyColumns     = []string{"id"}
	goodsReceiptNoteItemGeneratedColumns      = []string{}
)

type (
	// GoodsReceiptNoteItemSlice is an alias for a slice of pointers to GoodsReceiptNoteItem.
	// This should almost always be used instead of []GoodsReceiptNoteItem.
	GoodsReceiptNoteItemSlice []*GoodsReceiptNoteItem
	// GoodsReceiptNoteItemHook is the signature for custom GoodsReceiptNoteItem hook methods
	GoodsReceiptNoteItemHook func(context.Context, boil.ContextExecutor, *GoodsReceiptNoteItem) error

	goodsReceiptNoteItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goodsReceiptNoteItemType                 = reflect.TypeOf(&GoodsReceiptNoteItem{})
	goodsReceiptNoteItemMapping              = queries.MakeStructMapping(goodsReceiptNoteItemType)
	goodsReceiptNoteItemPrimaryKeyMapping, _ = queries.BindMapping(goodsReceiptNoteItemType, goodsReceiptNoteItemMapping, goodsReceiptNoteItemPrimaryKeyColumns)
	goodsReceiptNoteItemInsertCacheMut       sync.RWMutex
	goodsReceiptNoteItemInsertCache          = make(map[string]insertCache)
	goodsReceiptNoteItemUpdateCacheMut       sync.RWMutex
	goodsReceiptNoteItemUpdateCache          = make(map[string]updateCache)
	goodsReceiptNoteItemUpsertCacheMut       sync.RWMutex
	goodsReceiptNoteItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var goodsReceiptNoteItemAfterSelectMu sync.Mutex
var goodsReceiptNoteItemAfterSelectHooks []GoodsReceiptNoteItemHook

var goodsReceiptNoteItemBeforeInsertMu sync.Mutex
var goodsReceiptNoteItemBeforeInsertHooks []GoodsReceiptNoteItemHook
var goodsReceiptNoteItemAfterInsertMu sync.Mutex
var goodsReceiptNoteItemAfterInsertHooks []GoodsReceiptNoteItemHook

var goodsReceiptNoteItemBeforeUpdateMu sync.Mutex
var goodsReceiptNoteItemBeforeUpdateHooks []GoodsReceiptNoteItemHook
var goodsReceiptNoteItemAfterUpdateMu sync.Mutex
var goodsReceiptNoteItemAfterUpdateHooks []GoodsReceiptNoteItemHook

var goodsReceiptNoteItemBeforeDeleteMu sync.Mutex
var goodsReceiptNoteItemBeforeDeleteHooks []GoodsReceiptNoteItemHook
var goodsReceiptNoteItemAfterDeleteMu sync.Mutex
var goodsReceiptNoteItemAfterDeleteHooks []GoodsReceiptNoteItemHook

var goodsReceiptNoteItemBeforeUpsertMu sync.Mutex
var goodsReceiptNoteItemBeforeUpsertHooks []GoodsReceiptNoteItemHook
var goodsReceiptNoteItemAfterUpsertMu sync.Mutex
var goodsReceiptNoteItemAfterUpsertHooks []GoodsReceiptNoteItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoodsReceiptNoteItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoodsReceiptNoteItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoodsReceiptNoteItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GoodsReceiptNoteItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GoodsReceiptNoteItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GoodsReceiptNoteItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GoodsReceiptNoteItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoodsReceiptNoteItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoodsReceiptNoteItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoodsReceiptNoteItemHook registers your hook function for all future operations.
func AddGoodsReceiptNoteItemHook(hookPoint boil.HookPoint, goodsReceiptNoteItemHook GoodsReceiptNoteItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goodsReceiptNoteItemAfterSelectMu.Lock()
		goodsReceiptNoteItemAfterSelectHooks = append(goodsReceiptNoteItemAfterSelectHooks, goodsReceiptNoteItemHook)
		goodsReceiptNoteItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goodsReceiptNoteItemBeforeInsertMu.Lock()
		goodsReceiptNoteItemBeforeInsertHooks = append(goodsReceiptNoteItemBeforeInsertHooks, goodsReceiptNoteItemHook)
		goodsReceiptNoteItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goodsReceiptNoteItemAfterInsertMu.Lock()
		goodsReceiptNoteItemAfterInsertHooks = append(goodsReceiptNoteItemAfterInsertHooks, goodsReceiptNoteItemHook)
		goodsReceiptNoteItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		goodsReceiptNoteItemBeforeUpdateMu.Lock()
		goodsReceiptNoteItemBeforeUpdateHooks = append(goodsReceiptNoteItemBeforeUpdateHooks, goodsReceiptNoteItemHook)
		goodsReceiptNoteItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		goodsReceiptNoteItemAfterUpdateMu.Lock()
		goodsReceiptNoteItemAfterUpdateHooks = append(goodsReceiptNoteItemAfterUpdateHooks, goodsReceiptNoteItemHook)
		goodsReceiptNoteItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		goodsReceiptNoteItemBeforeDeleteMu.Lock()
		goodsReceiptNoteItemBeforeDeleteHooks = append(goodsReceiptNoteItemBeforeDeleteHooks, goodsReceiptNoteItemHook)
		goodsReceiptNoteItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		goodsReceiptNoteItemAfterDeleteMu.Lock()
		goodsReceiptNoteItemAfterDeleteHooks = append(goodsReceiptNoteItemAfterDeleteHooks, goodsReceiptNoteItemHook)
		goodsReceiptNoteItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		goodsReceiptNoteItemBeforeUpsertMu.Lock()
		goodsReceiptNoteItemBeforeUpsertHooks = append(goodsReceiptNoteItemBeforeUpsertHooks, goodsReceiptNoteItemHook)
		goodsReceiptNoteItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goodsReceiptNoteItemAfterUpsertMu.Lock()
		goodsReceiptNoteItemAfterUpsertHooks = append(goodsReceiptNoteItemAfterUpsertHooks, goodsReceiptNoteItemHook)
		goodsReceiptNoteItemAfterUpsertMu.Unlock()
	}
}

// One returns a single goodsReceiptNoteItem record from the query.
func (q goodsReceiptNoteItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoodsReceiptNoteItem, error) {
	o := &GoodsReceiptNoteItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: failed to execute a one query for goods_receipt_note_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoodsReceiptNoteItem records from the query.
func (q goodsReceiptNoteItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoodsReceiptNoteItemSlice, error) {
	var o []*GoodsReceiptNoteItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "purchase: failed to assign all query results to GoodsReceiptNoteItem slice")
	}

	if len(goodsReceiptNoteItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoodsReceiptNoteItem records in the query.
func (q goodsReceiptNoteItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to count goods_receipt_note_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goodsReceiptNoteItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "purchase: failed to check if goods_receipt_note_item exists")
	}

	return count > 0, nil
}

// GoodsReceiptNote pointed to by the foreign key.
func (o *GoodsReceiptNoteItem) GoodsReceiptNote(mods ...qm.QueryMod) goodsReceiptNoteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GoodsReceiptNoteID),
	}

	queryMods = append(queryMods, mods...)

	return GoodsReceiptNotes(queryMods...)
}

// LoadGoodsReceiptNote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (goodsReceiptNoteItemL) LoadGoodsReceiptNote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoodsReceiptNoteItem interface{}, mods queries.Applicator) error {
	var slice []*GoodsReceiptNoteItem
	var object *GoodsReceiptNoteItem

	if singular {
		var ok bool
		object, ok = maybeGoodsReceiptNoteItem.(*GoodsReceiptNoteItem)
		if !ok {
			object = new(GoodsReceiptNoteItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGoodsReceiptNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGoodsReceiptNoteItem))
			}
		}
	} else {
		s, ok := maybeGoodsReceiptNoteItem.(*[]*GoodsReceiptNoteItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGoodsReceiptNoteItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGoodsReceiptNoteItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &goodsReceiptNoteItemR{}
		}
		args[object.GoodsReceiptNoteID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goodsReceiptNoteItemR{}
			}

			args[obj.GoodsReceiptNoteID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`purchase.goods_receipt_note`),
		qm.WhereIn(`purchase.goods_receipt_note.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GoodsReceiptNote")
	}

	var resultSlice []*GoodsReceiptNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GoodsReceiptNote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for goods_receipt_note")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for goods_receipt_note")
	}

	if len(goodsReceiptNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GoodsReceiptNote = foreign
		if foreign.R == nil {
			foreign.R = &goodsReceiptNoteR{}
		}
		foreign.R.GoodsReceiptNoteItems = append(foreign.R.GoodsReceiptNoteItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GoodsReceiptNoteID == foreign.ID {
				local.R.GoodsReceiptNote = foreign
				if foreign.R == nil {
					foreign.R = &goodsReceiptNoteR{}
				}
				foreign.R.GoodsReceiptNoteItems = append(foreign.R.GoodsReceiptNoteItems, local)
				break
			}
		}
	}

	return nil
}

// SetGoodsReceiptNote of the goodsReceiptNoteItem to the related item.
// Sets o.R.GoodsReceiptNote to related.
// Adds o to related.R.GoodsReceiptNoteItems.
func (o *GoodsReceiptNoteItem) SetGoodsReceiptNote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GoodsReceiptNote) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"purchase\".\"goods_receipt_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"goods_receipt_note_id"}),
		strmangle.WhereClause("\"", "\"", 2, goodsReceiptNoteItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GoodsReceiptNoteID = related.ID
	if o.R == nil {
		o.R = &goodsReceiptNoteItemR{
			GoodsReceiptNote: related,
		}
	} else {
		o.R.GoodsReceiptNote = related
	}

	if related.R == nil {
		related.R = &goodsReceiptNoteR{
			GoodsReceiptNoteItems: GoodsReceiptNoteItemSlice{o},
		}
	} else {
		related.R.GoodsReceiptNoteItems = append(related.R.GoodsReceiptNoteItems, o)
	}

	return nil
}

// GoodsReceiptNoteItems retrieves all the records using an executor.
func GoodsReceiptNoteItems(mods ...qm.QueryMod) goodsReceiptNoteItemQuery {
	mods = append(mods, qm.From("\"purchase\".\"goods_receipt_note_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"purchase\".\"goods_receipt_note_item\".*"})
	}

	return goodsReceiptNoteItemQuery{q}
}

// FindGoodsReceiptNoteItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoodsReceiptNoteItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*GoodsReceiptNoteItem, error) {
	goodsReceiptNoteItemObj := &GoodsReceiptNoteItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"purchase\".\"goods_receipt_note_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, goodsReceiptNoteItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: unable to select from goods_receipt_note_item")
	}

	if err = goodsReceiptNoteItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return goodsReceiptNoteItemObj, err
	}

	return goodsReceiptNoteItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoodsReceiptNoteItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("purchase: no goods_receipt_note_item provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReceiptNoteItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goodsReceiptNoteItemInsertCacheMut.RLock()
	cache, cached := goodsReceiptNoteItemInsertCache[key]
	goodsReceiptNoteItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goodsReceiptNoteItemAllColumns,
			goodsReceiptNoteItemColumnsWithDefault,
			goodsReceiptNoteItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goodsReceiptNoteItemType, goodsReceiptNoteItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goodsReceiptNoteItemType, goodsReceiptNoteItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"purchase\".\"goods_receipt_note_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"purchase\".\"goods_receipt_note_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "purchase: unable to insert into goods_receipt_note_item")
	}

	if !cached {
		goodsReceiptNoteItemInsertCacheMut.Lock()
		goodsReceiptNoteItemInsertCache[key] = cache
		goodsReceiptNoteItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GoodsReceiptNoteItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GoodsReceiptNoteItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	goodsReceiptNoteItemUpdateCacheMut.RLock()
	cache, cached := goodsReceiptNoteItemUpdateCache[key]
	goodsReceiptNoteItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			goodsReceiptNoteItemAllColumns,
			goodsReceiptNoteItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("purchase: unable to update goods_receipt_note_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"purchase\".\"goods_receipt_note_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, goodsReceiptNoteItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(goodsReceiptNoteItemType, goodsReceiptNoteItemMapping, append(wl, goodsReceiptNoteItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update goods_receipt_note_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by update for goods_receipt_note_item")
	}

	if !cached {
		goodsReceiptNoteItemUpdateCacheMut.Lock()
		goodsReceiptNoteItemUpdateCache[key] = cache
		goodsReceiptNoteItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q goodsReceiptNoteItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update all for goods_receipt_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to retrieve rows affected for goods_receipt_note_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoodsReceiptNoteItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("purchase: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsReceiptNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"purchase\".\"goods_receipt_note_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, goodsReceiptNoteItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to update all in goodsReceiptNoteItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to retrieve rows affected all in update all goodsReceiptNoteItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoodsReceiptNoteItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("purchase: no goods_receipt_note_item provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReceiptNoteItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goodsReceiptNoteItemUpsertCacheMut.RLock()
	cache, cached := goodsReceiptNoteItemUpsertCache[key]
	goodsReceiptNoteItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goodsReceiptNoteItemAllColumns,
			goodsReceiptNoteItemColumnsWithDefault,
			goodsReceiptNoteItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goodsReceiptNoteItemAllColumns,
			goodsReceiptNoteItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("purchase: unable to upsert goods_receipt_note_item, could not build update column list")
		}

		ret := strmangle.SetComplement(goodsReceiptNoteItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goodsReceiptNoteItemPrimaryKeyColumns) == 0 {
				return errors.New("purchase: unable to upsert goods_receipt_note_item, could not build conflict column list")
			}

			conflict = make([]string, len(goodsReceiptNoteItemPrimaryKeyColumns))
			copy(conflict, goodsReceiptNoteItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"purchase\".\"goods_receipt_note_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goodsReceiptNoteItemType, goodsReceiptNoteItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goodsReceiptNoteItemType, goodsReceiptNoteItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "purchase: unable to upsert goods_receipt_note_item")
	}

	if !cached {
		goodsReceiptNoteItemUpsertCacheMut.Lock()
		goodsReceiptNoteItemUpsertCache[key] = cache
		goodsReceiptNoteItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GoodsReceiptNoteItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GoodsReceiptNoteItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("purchase: no GoodsReceiptNoteItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), goodsReceiptNoteItemPrimaryKeyMapping)
	sql := "DELETE FROM \"purchase\".\"goods_receipt_note_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete from goods_receipt_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by delete for goods_receipt_note_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q goodsReceiptNoteItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("purchase: no goodsReceiptNoteItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete all from goods_receipt_note_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by deleteall for goods_receipt_note_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoodsReceiptNoteItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(goodsReceiptNoteItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsReceiptNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"purchase\".\"goods_receipt_note_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goodsReceiptNoteItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: unable to delete all from goodsReceiptNoteItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to get rows affected by deleteall for goods_receipt_note_item")
	}

	if len(goodsReceiptNoteItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GoodsReceiptNoteItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoodsReceiptNoteItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoodsReceiptNoteItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoodsReceiptNoteItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goodsReceiptNoteItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"purchase\".\"goods_receipt_note_item\".* FROM \"purchase\".\"goods_receipt_note_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goodsReceiptNoteItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "purchase: unable to reload all in GoodsReceiptNoteItemSlice")
	}

	*o = slice

	return nil
}

// GoodsReceiptNoteItemExists checks if the GoodsReceiptNoteItem row exists.
func GoodsReceiptNoteItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"purchase\".\"goods_receipt_note_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "purchase: unable to check if goods_receipt_note_item exists")
	}

	return exists, nil
}

// Exists checks if the GoodsReceiptNoteItem row exists.
func (o *GoodsReceiptNoteItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GoodsReceiptNoteItemExists(ctx, exec, o.ID)
}
