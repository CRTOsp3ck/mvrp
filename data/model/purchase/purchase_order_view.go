// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package purchase

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PurchaseOrderView is an object representing the database table.
type PurchaseOrderView struct {
	ID                  null.Int                `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	BaseDocumentID      null.Int                `boil:"base_document_id" json:"base_document_id,omitempty" toml:"base_document_id" yaml:"base_document_id,omitempty"`
	PurchaseOrderNumber null.String             `boil:"purchase_order_number" json:"purchase_order_number,omitempty" toml:"purchase_order_number" yaml:"purchase_order_number,omitempty"`
	VendorID            null.Int                `boil:"vendor_id" json:"vendor_id,omitempty" toml:"vendor_id" yaml:"vendor_id,omitempty"`
	CustomerID          null.Int                `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	ShipToInformation   null.String             `boil:"ship_to_information" json:"ship_to_information,omitempty" toml:"ship_to_information" yaml:"ship_to_information,omitempty"`
	PaymentDueDate      null.Time               `boil:"payment_due_date" json:"payment_due_date,omitempty" toml:"payment_due_date" yaml:"payment_due_date,omitempty"`
	OrderStatus         NullPurchaseOrderStatus `boil:"order_status" json:"order_status,omitempty" toml:"order_status" yaml:"order_status,omitempty"`
	BaseDocument        null.JSON               `boil:"base_document" json:"base_document,omitempty" toml:"base_document" yaml:"base_document,omitempty"`
	PurchaseOrderItems  null.JSON               `boil:"purchase_order_items" json:"purchase_order_items,omitempty" toml:"purchase_order_items" yaml:"purchase_order_items,omitempty"`
}

var PurchaseOrderViewColumns = struct {
	ID                  string
	BaseDocumentID      string
	PurchaseOrderNumber string
	VendorID            string
	CustomerID          string
	ShipToInformation   string
	PaymentDueDate      string
	OrderStatus         string
	BaseDocument        string
	PurchaseOrderItems  string
}{
	ID:                  "id",
	BaseDocumentID:      "base_document_id",
	PurchaseOrderNumber: "purchase_order_number",
	VendorID:            "vendor_id",
	CustomerID:          "customer_id",
	ShipToInformation:   "ship_to_information",
	PaymentDueDate:      "payment_due_date",
	OrderStatus:         "order_status",
	BaseDocument:        "base_document",
	PurchaseOrderItems:  "purchase_order_items",
}

var PurchaseOrderViewTableColumns = struct {
	ID                  string
	BaseDocumentID      string
	PurchaseOrderNumber string
	VendorID            string
	CustomerID          string
	ShipToInformation   string
	PaymentDueDate      string
	OrderStatus         string
	BaseDocument        string
	PurchaseOrderItems  string
}{
	ID:                  "purchase_order_view.id",
	BaseDocumentID:      "purchase_order_view.base_document_id",
	PurchaseOrderNumber: "purchase_order_view.purchase_order_number",
	VendorID:            "purchase_order_view.vendor_id",
	CustomerID:          "purchase_order_view.customer_id",
	ShipToInformation:   "purchase_order_view.ship_to_information",
	PaymentDueDate:      "purchase_order_view.payment_due_date",
	OrderStatus:         "purchase_order_view.order_status",
	BaseDocument:        "purchase_order_view.base_document",
	PurchaseOrderItems:  "purchase_order_view.purchase_order_items",
}

// Generated where

type whereHelperNullPurchaseOrderStatus struct{ field string }

func (w whereHelperNullPurchaseOrderStatus) EQ(x NullPurchaseOrderStatus) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullPurchaseOrderStatus) NEQ(x NullPurchaseOrderStatus) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullPurchaseOrderStatus) LT(x NullPurchaseOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullPurchaseOrderStatus) LTE(x NullPurchaseOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullPurchaseOrderStatus) GT(x NullPurchaseOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullPurchaseOrderStatus) GTE(x NullPurchaseOrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullPurchaseOrderStatus) IN(slice []NullPurchaseOrderStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullPurchaseOrderStatus) NIN(slice []NullPurchaseOrderStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullPurchaseOrderStatus) IsNull() qm.QueryMod {
	return qmhelper.WhereIsNull(w.field)
}
func (w whereHelperNullPurchaseOrderStatus) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var PurchaseOrderViewWhere = struct {
	ID                  whereHelpernull_Int
	BaseDocumentID      whereHelpernull_Int
	PurchaseOrderNumber whereHelpernull_String
	VendorID            whereHelpernull_Int
	CustomerID          whereHelpernull_Int
	ShipToInformation   whereHelpernull_String
	PaymentDueDate      whereHelpernull_Time
	OrderStatus         whereHelperNullPurchaseOrderStatus
	BaseDocument        whereHelpernull_JSON
	PurchaseOrderItems  whereHelpernull_JSON
}{
	ID:                  whereHelpernull_Int{field: "\"purchase\".\"purchase_order_view\".\"id\""},
	BaseDocumentID:      whereHelpernull_Int{field: "\"purchase\".\"purchase_order_view\".\"base_document_id\""},
	PurchaseOrderNumber: whereHelpernull_String{field: "\"purchase\".\"purchase_order_view\".\"purchase_order_number\""},
	VendorID:            whereHelpernull_Int{field: "\"purchase\".\"purchase_order_view\".\"vendor_id\""},
	CustomerID:          whereHelpernull_Int{field: "\"purchase\".\"purchase_order_view\".\"customer_id\""},
	ShipToInformation:   whereHelpernull_String{field: "\"purchase\".\"purchase_order_view\".\"ship_to_information\""},
	PaymentDueDate:      whereHelpernull_Time{field: "\"purchase\".\"purchase_order_view\".\"payment_due_date\""},
	OrderStatus:         whereHelperNullPurchaseOrderStatus{field: "\"purchase\".\"purchase_order_view\".\"order_status\""},
	BaseDocument:        whereHelpernull_JSON{field: "\"purchase\".\"purchase_order_view\".\"base_document\""},
	PurchaseOrderItems:  whereHelpernull_JSON{field: "\"purchase\".\"purchase_order_view\".\"purchase_order_items\""},
}

var (
	purchaseOrderViewAllColumns            = []string{"id", "base_document_id", "purchase_order_number", "vendor_id", "customer_id", "ship_to_information", "payment_due_date", "order_status", "base_document", "purchase_order_items"}
	purchaseOrderViewColumnsWithoutDefault = []string{}
	purchaseOrderViewColumnsWithDefault    = []string{"id", "base_document_id", "purchase_order_number", "vendor_id", "customer_id", "ship_to_information", "payment_due_date", "order_status", "base_document", "purchase_order_items"}
	purchaseOrderViewPrimaryKeyColumns     = []string{}
	purchaseOrderViewGeneratedColumns      = []string{}
)

type (
	// PurchaseOrderViewSlice is an alias for a slice of pointers to PurchaseOrderView.
	// This should almost always be used instead of []PurchaseOrderView.
	PurchaseOrderViewSlice []*PurchaseOrderView
	// PurchaseOrderViewHook is the signature for custom PurchaseOrderView hook methods
	PurchaseOrderViewHook func(context.Context, boil.ContextExecutor, *PurchaseOrderView) error

	purchaseOrderViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	purchaseOrderViewType           = reflect.TypeOf(&PurchaseOrderView{})
	purchaseOrderViewMapping        = queries.MakeStructMapping(purchaseOrderViewType)
	purchaseOrderViewInsertCacheMut sync.RWMutex
	purchaseOrderViewInsertCache    = make(map[string]insertCache)
	purchaseOrderViewUpdateCacheMut sync.RWMutex
	purchaseOrderViewUpdateCache    = make(map[string]updateCache)
	purchaseOrderViewUpsertCacheMut sync.RWMutex
	purchaseOrderViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var purchaseOrderViewAfterSelectMu sync.Mutex
var purchaseOrderViewAfterSelectHooks []PurchaseOrderViewHook

var purchaseOrderViewBeforeInsertMu sync.Mutex
var purchaseOrderViewBeforeInsertHooks []PurchaseOrderViewHook
var purchaseOrderViewAfterInsertMu sync.Mutex
var purchaseOrderViewAfterInsertHooks []PurchaseOrderViewHook

var purchaseOrderViewBeforeUpsertMu sync.Mutex
var purchaseOrderViewBeforeUpsertHooks []PurchaseOrderViewHook
var purchaseOrderViewAfterUpsertMu sync.Mutex
var purchaseOrderViewAfterUpsertHooks []PurchaseOrderViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PurchaseOrderView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PurchaseOrderView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PurchaseOrderView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PurchaseOrderView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PurchaseOrderView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseOrderViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPurchaseOrderViewHook registers your hook function for all future operations.
func AddPurchaseOrderViewHook(hookPoint boil.HookPoint, purchaseOrderViewHook PurchaseOrderViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		purchaseOrderViewAfterSelectMu.Lock()
		purchaseOrderViewAfterSelectHooks = append(purchaseOrderViewAfterSelectHooks, purchaseOrderViewHook)
		purchaseOrderViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		purchaseOrderViewBeforeInsertMu.Lock()
		purchaseOrderViewBeforeInsertHooks = append(purchaseOrderViewBeforeInsertHooks, purchaseOrderViewHook)
		purchaseOrderViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		purchaseOrderViewAfterInsertMu.Lock()
		purchaseOrderViewAfterInsertHooks = append(purchaseOrderViewAfterInsertHooks, purchaseOrderViewHook)
		purchaseOrderViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		purchaseOrderViewBeforeUpsertMu.Lock()
		purchaseOrderViewBeforeUpsertHooks = append(purchaseOrderViewBeforeUpsertHooks, purchaseOrderViewHook)
		purchaseOrderViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		purchaseOrderViewAfterUpsertMu.Lock()
		purchaseOrderViewAfterUpsertHooks = append(purchaseOrderViewAfterUpsertHooks, purchaseOrderViewHook)
		purchaseOrderViewAfterUpsertMu.Unlock()
	}
}

// One returns a single purchaseOrderView record from the query.
func (q purchaseOrderViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PurchaseOrderView, error) {
	o := &PurchaseOrderView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: failed to execute a one query for purchase_order_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PurchaseOrderView records from the query.
func (q purchaseOrderViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (PurchaseOrderViewSlice, error) {
	var o []*PurchaseOrderView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "purchase: failed to assign all query results to PurchaseOrderView slice")
	}

	if len(purchaseOrderViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PurchaseOrderView records in the query.
func (q purchaseOrderViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to count purchase_order_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q purchaseOrderViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "purchase: failed to check if purchase_order_view exists")
	}

	return count > 0, nil
}

// PurchaseOrderViews retrieves all the records using an executor.
func PurchaseOrderViews(mods ...qm.QueryMod) purchaseOrderViewQuery {
	mods = append(mods, qm.From("\"purchase\".\"purchase_order_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"purchase\".\"purchase_order_view\".*"})
	}

	return purchaseOrderViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PurchaseOrderView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("purchase: no purchase_order_view provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchaseOrderViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	purchaseOrderViewInsertCacheMut.RLock()
	cache, cached := purchaseOrderViewInsertCache[key]
	purchaseOrderViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			purchaseOrderViewAllColumns,
			purchaseOrderViewColumnsWithDefault,
			purchaseOrderViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(purchaseOrderViewType, purchaseOrderViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(purchaseOrderViewType, purchaseOrderViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"purchase\".\"purchase_order_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"purchase\".\"purchase_order_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "purchase: unable to insert into purchase_order_view")
	}

	if !cached {
		purchaseOrderViewInsertCacheMut.Lock()
		purchaseOrderViewInsertCache[key] = cache
		purchaseOrderViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PurchaseOrderView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("purchase: no purchase_order_view provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchaseOrderViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	purchaseOrderViewUpsertCacheMut.RLock()
	cache, cached := purchaseOrderViewUpsertCache[key]
	purchaseOrderViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			purchaseOrderViewAllColumns,
			purchaseOrderViewColumnsWithDefault,
			purchaseOrderViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			purchaseOrderViewAllColumns,
			purchaseOrderViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("purchase: unable to upsert purchase_order_view, could not build update column list")
		}

		ret := strmangle.SetComplement(purchaseOrderViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(purchaseOrderViewPrimaryKeyColumns) == 0 {
				return errors.New("purchase: unable to upsert purchase_order_view, could not build conflict column list")
			}

			conflict = make([]string, len(purchaseOrderViewPrimaryKeyColumns))
			copy(conflict, purchaseOrderViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"purchase\".\"purchase_order_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(purchaseOrderViewType, purchaseOrderViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(purchaseOrderViewType, purchaseOrderViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "purchase: unable to upsert purchase_order_view")
	}

	if !cached {
		purchaseOrderViewUpsertCacheMut.Lock()
		purchaseOrderViewUpsertCache[key] = cache
		purchaseOrderViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
