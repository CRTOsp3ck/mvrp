// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package purchase

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GoodsReceiptNoteView is an object representing the database table.
type GoodsReceiptNoteView struct {
	ID                            null.Int    `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	BaseDocumentID                null.Int    `boil:"base_document_id" json:"base_document_id,omitempty" toml:"base_document_id" yaml:"base_document_id,omitempty"`
	GoodsReceiptNoteNumber        null.String `boil:"goods_receipt_note_number" json:"goods_receipt_note_number,omitempty" toml:"goods_receipt_note_number" yaml:"goods_receipt_note_number,omitempty"`
	PurchaseOrderID               null.Int    `boil:"purchase_order_id" json:"purchase_order_id,omitempty" toml:"purchase_order_id" yaml:"purchase_order_id,omitempty"`
	ReceiptDate                   null.Time   `boil:"receipt_date" json:"receipt_date,omitempty" toml:"receipt_date" yaml:"receipt_date,omitempty"`
	VendorID                      null.Int    `boil:"vendor_id" json:"vendor_id,omitempty" toml:"vendor_id" yaml:"vendor_id,omitempty"`
	ShipFromInformation           null.String `boil:"ship_from_information" json:"ship_from_information,omitempty" toml:"ship_from_information" yaml:"ship_from_information,omitempty"`
	ShippingPersonnelInformation  null.String `boil:"shipping_personnel_information" json:"shipping_personnel_information,omitempty" toml:"shipping_personnel_information" yaml:"shipping_personnel_information,omitempty"`
	ReceivingLocationInformation  null.String `boil:"receiving_location_information" json:"receiving_location_information,omitempty" toml:"receiving_location_information" yaml:"receiving_location_information,omitempty"`
	ReceivingPersonnelInformation null.String `boil:"receiving_personnel_information" json:"receiving_personnel_information,omitempty" toml:"receiving_personnel_information" yaml:"receiving_personnel_information,omitempty"`
	GoodsReceivedCondition        null.String `boil:"goods_received_condition" json:"goods_received_condition,omitempty" toml:"goods_received_condition" yaml:"goods_received_condition,omitempty"`
	BaseDocument                  null.JSON   `boil:"base_document" json:"base_document,omitempty" toml:"base_document" yaml:"base_document,omitempty"`
	GoodsReceiptNoteItems         null.JSON   `boil:"goods_receipt_note_items" json:"goods_receipt_note_items,omitempty" toml:"goods_receipt_note_items" yaml:"goods_receipt_note_items,omitempty"`
}

var GoodsReceiptNoteViewColumns = struct {
	ID                            string
	BaseDocumentID                string
	GoodsReceiptNoteNumber        string
	PurchaseOrderID               string
	ReceiptDate                   string
	VendorID                      string
	ShipFromInformation           string
	ShippingPersonnelInformation  string
	ReceivingLocationInformation  string
	ReceivingPersonnelInformation string
	GoodsReceivedCondition        string
	BaseDocument                  string
	GoodsReceiptNoteItems         string
}{
	ID:                            "id",
	BaseDocumentID:                "base_document_id",
	GoodsReceiptNoteNumber:        "goods_receipt_note_number",
	PurchaseOrderID:               "purchase_order_id",
	ReceiptDate:                   "receipt_date",
	VendorID:                      "vendor_id",
	ShipFromInformation:           "ship_from_information",
	ShippingPersonnelInformation:  "shipping_personnel_information",
	ReceivingLocationInformation:  "receiving_location_information",
	ReceivingPersonnelInformation: "receiving_personnel_information",
	GoodsReceivedCondition:        "goods_received_condition",
	BaseDocument:                  "base_document",
	GoodsReceiptNoteItems:         "goods_receipt_note_items",
}

var GoodsReceiptNoteViewTableColumns = struct {
	ID                            string
	BaseDocumentID                string
	GoodsReceiptNoteNumber        string
	PurchaseOrderID               string
	ReceiptDate                   string
	VendorID                      string
	ShipFromInformation           string
	ShippingPersonnelInformation  string
	ReceivingLocationInformation  string
	ReceivingPersonnelInformation string
	GoodsReceivedCondition        string
	BaseDocument                  string
	GoodsReceiptNoteItems         string
}{
	ID:                            "goods_receipt_note_view.id",
	BaseDocumentID:                "goods_receipt_note_view.base_document_id",
	GoodsReceiptNoteNumber:        "goods_receipt_note_view.goods_receipt_note_number",
	PurchaseOrderID:               "goods_receipt_note_view.purchase_order_id",
	ReceiptDate:                   "goods_receipt_note_view.receipt_date",
	VendorID:                      "goods_receipt_note_view.vendor_id",
	ShipFromInformation:           "goods_receipt_note_view.ship_from_information",
	ShippingPersonnelInformation:  "goods_receipt_note_view.shipping_personnel_information",
	ReceivingLocationInformation:  "goods_receipt_note_view.receiving_location_information",
	ReceivingPersonnelInformation: "goods_receipt_note_view.receiving_personnel_information",
	GoodsReceivedCondition:        "goods_receipt_note_view.goods_received_condition",
	BaseDocument:                  "goods_receipt_note_view.base_document",
	GoodsReceiptNoteItems:         "goods_receipt_note_view.goods_receipt_note_items",
}

// Generated where

var GoodsReceiptNoteViewWhere = struct {
	ID                            whereHelpernull_Int
	BaseDocumentID                whereHelpernull_Int
	GoodsReceiptNoteNumber        whereHelpernull_String
	PurchaseOrderID               whereHelpernull_Int
	ReceiptDate                   whereHelpernull_Time
	VendorID                      whereHelpernull_Int
	ShipFromInformation           whereHelpernull_String
	ShippingPersonnelInformation  whereHelpernull_String
	ReceivingLocationInformation  whereHelpernull_String
	ReceivingPersonnelInformation whereHelpernull_String
	GoodsReceivedCondition        whereHelpernull_String
	BaseDocument                  whereHelpernull_JSON
	GoodsReceiptNoteItems         whereHelpernull_JSON
}{
	ID:                            whereHelpernull_Int{field: "\"purchase\".\"goods_receipt_note_view\".\"id\""},
	BaseDocumentID:                whereHelpernull_Int{field: "\"purchase\".\"goods_receipt_note_view\".\"base_document_id\""},
	GoodsReceiptNoteNumber:        whereHelpernull_String{field: "\"purchase\".\"goods_receipt_note_view\".\"goods_receipt_note_number\""},
	PurchaseOrderID:               whereHelpernull_Int{field: "\"purchase\".\"goods_receipt_note_view\".\"purchase_order_id\""},
	ReceiptDate:                   whereHelpernull_Time{field: "\"purchase\".\"goods_receipt_note_view\".\"receipt_date\""},
	VendorID:                      whereHelpernull_Int{field: "\"purchase\".\"goods_receipt_note_view\".\"vendor_id\""},
	ShipFromInformation:           whereHelpernull_String{field: "\"purchase\".\"goods_receipt_note_view\".\"ship_from_information\""},
	ShippingPersonnelInformation:  whereHelpernull_String{field: "\"purchase\".\"goods_receipt_note_view\".\"shipping_personnel_information\""},
	ReceivingLocationInformation:  whereHelpernull_String{field: "\"purchase\".\"goods_receipt_note_view\".\"receiving_location_information\""},
	ReceivingPersonnelInformation: whereHelpernull_String{field: "\"purchase\".\"goods_receipt_note_view\".\"receiving_personnel_information\""},
	GoodsReceivedCondition:        whereHelpernull_String{field: "\"purchase\".\"goods_receipt_note_view\".\"goods_received_condition\""},
	BaseDocument:                  whereHelpernull_JSON{field: "\"purchase\".\"goods_receipt_note_view\".\"base_document\""},
	GoodsReceiptNoteItems:         whereHelpernull_JSON{field: "\"purchase\".\"goods_receipt_note_view\".\"goods_receipt_note_items\""},
}

var (
	goodsReceiptNoteViewAllColumns            = []string{"id", "base_document_id", "goods_receipt_note_number", "purchase_order_id", "receipt_date", "vendor_id", "ship_from_information", "shipping_personnel_information", "receiving_location_information", "receiving_personnel_information", "goods_received_condition", "base_document", "goods_receipt_note_items"}
	goodsReceiptNoteViewColumnsWithoutDefault = []string{}
	goodsReceiptNoteViewColumnsWithDefault    = []string{"id", "base_document_id", "goods_receipt_note_number", "purchase_order_id", "receipt_date", "vendor_id", "ship_from_information", "shipping_personnel_information", "receiving_location_information", "receiving_personnel_information", "goods_received_condition", "base_document", "goods_receipt_note_items"}
	goodsReceiptNoteViewPrimaryKeyColumns     = []string{}
	goodsReceiptNoteViewGeneratedColumns      = []string{}
)

type (
	// GoodsReceiptNoteViewSlice is an alias for a slice of pointers to GoodsReceiptNoteView.
	// This should almost always be used instead of []GoodsReceiptNoteView.
	GoodsReceiptNoteViewSlice []*GoodsReceiptNoteView
	// GoodsReceiptNoteViewHook is the signature for custom GoodsReceiptNoteView hook methods
	GoodsReceiptNoteViewHook func(context.Context, boil.ContextExecutor, *GoodsReceiptNoteView) error

	goodsReceiptNoteViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goodsReceiptNoteViewType           = reflect.TypeOf(&GoodsReceiptNoteView{})
	goodsReceiptNoteViewMapping        = queries.MakeStructMapping(goodsReceiptNoteViewType)
	goodsReceiptNoteViewInsertCacheMut sync.RWMutex
	goodsReceiptNoteViewInsertCache    = make(map[string]insertCache)
	goodsReceiptNoteViewUpdateCacheMut sync.RWMutex
	goodsReceiptNoteViewUpdateCache    = make(map[string]updateCache)
	goodsReceiptNoteViewUpsertCacheMut sync.RWMutex
	goodsReceiptNoteViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var goodsReceiptNoteViewAfterSelectMu sync.Mutex
var goodsReceiptNoteViewAfterSelectHooks []GoodsReceiptNoteViewHook

var goodsReceiptNoteViewBeforeInsertMu sync.Mutex
var goodsReceiptNoteViewBeforeInsertHooks []GoodsReceiptNoteViewHook
var goodsReceiptNoteViewAfterInsertMu sync.Mutex
var goodsReceiptNoteViewAfterInsertHooks []GoodsReceiptNoteViewHook

var goodsReceiptNoteViewBeforeUpsertMu sync.Mutex
var goodsReceiptNoteViewBeforeUpsertHooks []GoodsReceiptNoteViewHook
var goodsReceiptNoteViewAfterUpsertMu sync.Mutex
var goodsReceiptNoteViewAfterUpsertHooks []GoodsReceiptNoteViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoodsReceiptNoteView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoodsReceiptNoteView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoodsReceiptNoteView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoodsReceiptNoteView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoodsReceiptNoteView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goodsReceiptNoteViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoodsReceiptNoteViewHook registers your hook function for all future operations.
func AddGoodsReceiptNoteViewHook(hookPoint boil.HookPoint, goodsReceiptNoteViewHook GoodsReceiptNoteViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goodsReceiptNoteViewAfterSelectMu.Lock()
		goodsReceiptNoteViewAfterSelectHooks = append(goodsReceiptNoteViewAfterSelectHooks, goodsReceiptNoteViewHook)
		goodsReceiptNoteViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goodsReceiptNoteViewBeforeInsertMu.Lock()
		goodsReceiptNoteViewBeforeInsertHooks = append(goodsReceiptNoteViewBeforeInsertHooks, goodsReceiptNoteViewHook)
		goodsReceiptNoteViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goodsReceiptNoteViewAfterInsertMu.Lock()
		goodsReceiptNoteViewAfterInsertHooks = append(goodsReceiptNoteViewAfterInsertHooks, goodsReceiptNoteViewHook)
		goodsReceiptNoteViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		goodsReceiptNoteViewBeforeUpsertMu.Lock()
		goodsReceiptNoteViewBeforeUpsertHooks = append(goodsReceiptNoteViewBeforeUpsertHooks, goodsReceiptNoteViewHook)
		goodsReceiptNoteViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goodsReceiptNoteViewAfterUpsertMu.Lock()
		goodsReceiptNoteViewAfterUpsertHooks = append(goodsReceiptNoteViewAfterUpsertHooks, goodsReceiptNoteViewHook)
		goodsReceiptNoteViewAfterUpsertMu.Unlock()
	}
}

// One returns a single goodsReceiptNoteView record from the query.
func (q goodsReceiptNoteViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoodsReceiptNoteView, error) {
	o := &GoodsReceiptNoteView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "purchase: failed to execute a one query for goods_receipt_note_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoodsReceiptNoteView records from the query.
func (q goodsReceiptNoteViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoodsReceiptNoteViewSlice, error) {
	var o []*GoodsReceiptNoteView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "purchase: failed to assign all query results to GoodsReceiptNoteView slice")
	}

	if len(goodsReceiptNoteViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoodsReceiptNoteView records in the query.
func (q goodsReceiptNoteViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "purchase: failed to count goods_receipt_note_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goodsReceiptNoteViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "purchase: failed to check if goods_receipt_note_view exists")
	}

	return count > 0, nil
}

// GoodsReceiptNoteViews retrieves all the records using an executor.
func GoodsReceiptNoteViews(mods ...qm.QueryMod) goodsReceiptNoteViewQuery {
	mods = append(mods, qm.From("\"purchase\".\"goods_receipt_note_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"purchase\".\"goods_receipt_note_view\".*"})
	}

	return goodsReceiptNoteViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoodsReceiptNoteView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("purchase: no goods_receipt_note_view provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReceiptNoteViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goodsReceiptNoteViewInsertCacheMut.RLock()
	cache, cached := goodsReceiptNoteViewInsertCache[key]
	goodsReceiptNoteViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goodsReceiptNoteViewAllColumns,
			goodsReceiptNoteViewColumnsWithDefault,
			goodsReceiptNoteViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goodsReceiptNoteViewType, goodsReceiptNoteViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goodsReceiptNoteViewType, goodsReceiptNoteViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"purchase\".\"goods_receipt_note_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"purchase\".\"goods_receipt_note_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "purchase: unable to insert into goods_receipt_note_view")
	}

	if !cached {
		goodsReceiptNoteViewInsertCacheMut.Lock()
		goodsReceiptNoteViewInsertCache[key] = cache
		goodsReceiptNoteViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoodsReceiptNoteView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("purchase: no goods_receipt_note_view provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goodsReceiptNoteViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goodsReceiptNoteViewUpsertCacheMut.RLock()
	cache, cached := goodsReceiptNoteViewUpsertCache[key]
	goodsReceiptNoteViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goodsReceiptNoteViewAllColumns,
			goodsReceiptNoteViewColumnsWithDefault,
			goodsReceiptNoteViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goodsReceiptNoteViewAllColumns,
			goodsReceiptNoteViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("purchase: unable to upsert goods_receipt_note_view, could not build update column list")
		}

		ret := strmangle.SetComplement(goodsReceiptNoteViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goodsReceiptNoteViewPrimaryKeyColumns) == 0 {
				return errors.New("purchase: unable to upsert goods_receipt_note_view, could not build conflict column list")
			}

			conflict = make([]string, len(goodsReceiptNoteViewPrimaryKeyColumns))
			copy(conflict, goodsReceiptNoteViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"purchase\".\"goods_receipt_note_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goodsReceiptNoteViewType, goodsReceiptNoteViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goodsReceiptNoteViewType, goodsReceiptNoteViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "purchase: unable to upsert goods_receipt_note_view")
	}

	if !cached {
		goodsReceiptNoteViewUpsertCacheMut.Lock()
		goodsReceiptNoteViewUpsertCache[key] = cache
		goodsReceiptNoteViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
