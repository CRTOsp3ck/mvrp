// Code generated by MVRP Codegen Util. DO NOT EDIT.

package {{ .Package }}

import (
	"context"
	"mvrp/data/model/{{ .Package }}"
	
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

func (r *{{ .Package | ToPascalCase }}Repository) ListAll{{ .PluralModelName }}(ctx context.Context, exec boil.ContextExecutor) ({{ .Package }}.{{ .ModelName }}Slice, error) {
	return {{ .Package }}.{{ .PluralModelName }}().All(ctx, exec)
}

func (r *{{ .Package | ToPascalCase }}Repository) Get{{ .ModelName }}ByID(ctx context.Context, exec boil.ContextExecutor, id int) (*{{ .Package }}.{{ .ModelName }}, error) {
	return {{ .Package }}.{{ .PluralModelName }}(qm.Where({{ .Package }}.{{ .ModelName }}Columns.ID+"=?", id)).One(ctx, exec)
}

func (r *{{ .Package | ToPascalCase }}Repository) {{ .ModelName }}Exists(ctx context.Context, exec boil.ContextExecutor, id int) (bool, error) {
	return {{ .Package }}.{{ .PluralModelName }}(qm.Where({{ .Package }}.{{.ModelName}}Columns.ID+"=?", id)).Exists(ctx, exec)
}

func (r *{{ .Package | ToPascalCase }}Repository) Get{{ .ModelName }}RowsCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := {{ .Package }}.{{ .PluralModelName }}().Count(ctx, exec)
	return int(count), err
}

func (r *{{ .Package | ToPascalCase }}Repository) GetMostRecent{{ .ModelName }}(ctx context.Context, exec boil.ContextExecutor) (*{{ .Package }}.{{ .ModelName }}, error) {
	return {{ .Package }}.{{ .PluralModelName }}(qm.OrderBy("created_at DESC")).One(ctx, exec)
}