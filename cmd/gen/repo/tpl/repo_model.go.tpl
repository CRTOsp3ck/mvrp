// Code generated by MVRP Codegen Util. DO NOT EDIT.

package {{ .Package }}

import (
	"context"
	"database/sql"
	"mvrp/data/model/{{ .Package }}"
	{{- if .HasSearchDTO }}
	"mvrp/domain/dto"
	{{- end }}
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

func (r *{{ .Package | ToPascalCase }}Repository) ListAll{{ .PluralModelName }}(ctx context.Context, exec boil.ContextExecutor) ({{ .Package }}.{{ .ModelName }}Slice, error) {
	return {{ .Package }}.{{ .PluralModelName }}().All(ctx, exec)
}

{{- if .HasSearchDTO }}
func (r *{{ .Package | ToPascalCase }}Repository) Search{{ .PluralModelName }}(ctx context.Context, exec boil.ContextExecutor, dto dto.Search{{ .ModelName }}DTO) ({{ .Package }}.{{ .ModelName }}Slice, error) {
	return {{ .Package }}.{{ .PluralModelName }}(
		{{- range .GroupQueryFields }}
		qm.Where("{{ .Name }} = ?", dto.{{ .Name | ToPascalCase }}),
		{{- end }}
		{{- if .SearchQueryStatement }}
        qm.{{.SearchQueryStatement}},
        {{- end }}
		qm.Limit(dto.ItemsPerPage),
		qm.Offset((dto.ItemsPerPage*dto.Page)-dto.ItemsPerPage),
		// qm.GroupBy("id"),
		qm.OrderBy(dto.OrderBy+" "+"ASC"),
	).All(ctx, exec)
}
{{- end }}

func (r *{{ .Package | ToPascalCase }}Repository) Get{{ .ModelName }}ByID(ctx context.Context, exec boil.ContextExecutor, id int) (*{{ .Package }}.{{ .ModelName }}, error) {
	return {{ .Package }}.Find{{ .ModelName }}(ctx, exec, id)
}

func (r *{{ .Package | ToPascalCase }}Repository) Create{{ .ModelName }}(ctx context.Context, exec boil.ContextExecutor, m *{{ .Package }}.{{ .ModelName }}) error {
	id, err := r.GetNextEntry{{ .ModelName }}ID(ctx, exec)
	if err != nil {
		return err
	}
	m.ID = id
	return m.Insert(ctx, exec, boil.Infer())
}

func (r *{{ .Package | ToPascalCase }}Repository) Update{{ .ModelName }}(ctx context.Context, exec boil.ContextExecutor, m *{{ .Package }}.{{ .ModelName }}) error {
	_, err := m.Update(ctx, exec, boil.Infer())
	return err
}

func (r *{{ .Package | ToPascalCase }}Repository) Upsert{{ .ModelName }}(ctx context.Context, exec boil.ContextExecutor, m *{{ .Package }}.{{ .ModelName }}) error {
	return m.Upsert(ctx, exec, true, nil, boil.Infer(), boil.Infer())
}

func (r *{{ .Package | ToPascalCase }}Repository) Delete{{ .ModelName }}(ctx context.Context, exec boil.ContextExecutor, m *{{ .Package }}.{{ .ModelName }}) error {
	_, err := m.Delete(ctx, exec)
	return err
}

func (r *{{ .Package | ToPascalCase }}Repository) {{ .ModelName }}Exists(ctx context.Context, exec boil.ContextExecutor, id int) (bool, error) {
	return {{ .Package }}.{{ .ModelName }}Exists(ctx, exec, id)
}

func (r *{{ .Package | ToPascalCase }}Repository) Get{{ .ModelName }}RowsCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := {{ .Package }}.{{ .PluralModelName }}().Count(ctx, exec)
	return int(count), err
}

func (r *{{ .Package | ToPascalCase }}Repository) GetMostRecent{{ .ModelName }}(ctx context.Context, exec boil.ContextExecutor) (*{{ .Package }}.{{ .ModelName }}, error) {
	return {{ .Package }}.{{ .PluralModelName }}(qm.OrderBy("created_at DESC")).One(ctx, exec)
}

func (r *{{ .Package | ToPascalCase }}Repository) GetNextEntry{{ .ModelName }}ID(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	currID, err := r.GetMostRecent{{ .ModelName }}(ctx, exec)
	if err != nil {
		if err == sql.ErrNoRows {
			return 1, nil
		}
		return 0, err
	}
	return currID.ID + 1, nil
}

func (r *{{ .Package | ToPascalCase }}Repository) Get{{ .ModelName }}TotalCount(ctx context.Context, exec boil.ContextExecutor) (int, error) {
	count, err := {{ .Package }}.{{ .PluralModelName }}().Count(ctx, exec)
	return int(count), err
}