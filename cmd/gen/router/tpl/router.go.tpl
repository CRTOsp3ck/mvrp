// Code generated by MVRP's Codegen Utility. DO NOT EDIT.

package router

import (
	"log"
	"mvrp/util"
	"net/http"
	"path/filepath"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"

	httpSwagger "github.com/swaggo/http-swagger"

	{{- range .Data }}
	"mvrp/http/handler/{{ .Package }}"
	{{- end }}
)

func Init() {
	r := chi.NewRouter()
	c := cors.Handler(cors.Options{
		AllowedOrigins:   []string{"https://*", "http://*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token", "Cache-Control"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300,
	})

	r.Use(c)
	r.Use(middleware.RequestID)
	r.Use(middleware.RealIP)
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Timeout(60 * time.Second))

	SetupRoutes(r)
	// SetupSwagger(r)

	http.ListenAndServe(":6900", r)
}

func SetupRoutes(r chi.Router) {
	r.Get("/", getHome)
	r.Route("/v1", func(r chi.Router) {
		r.Route("/main", getMainRoutes())
	})
}

func SetupSwagger(r chi.Router) {
	root, err := util.Util.FS.FindProjectRoot("go.mod")
	if err != nil {
		log.Fatalf("Error finding project root: %v\n", err)
	}
	filename := filepath.Join(root, "http", "router", "openapi.yaml")
	r.Get("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL("/swagger/openapi.yaml"),
	))
	r.Get("/openapi.yaml", func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, filename)
	})
}

func getMainRoutes() func(chi.Router) {
    return func(r chi.Router) {
        {{- range .Data }}
		{{- $package := .Package }}
		r.Route("/{{ .Package }}", func(r chi.Router) {
			{{- range .Handlers }}
			r.Route("/{{ .Name }}", func(r chi.Router) {
				r.Get("/", {{ $package }}.List{{ .Name | ToPascalCase }})
				r.Post("/", {{ $package }}.Create{{ .Name | ToPascalCase }})
				r.Post("/search", {{ $package }}.Search{{ .Name | ToPascalCase }})
				r.Route("/{id}", func(r chi.Router) {
					r.Use({{ $package }}.{{ .Name | ToPascalCase }}Context)
					r.Get("/", {{ $package }}.Get{{ .Name | ToPascalCase }})
					r.Put("/", {{ $package }}.Update{{ .Name | ToPascalCase }})
					r.Delete("/", {{ $package }}.Delete{{ .Name | ToPascalCase }})
				})
			})
			{{ end }}
		})
		{{ end }}
    }
}

func getHome(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("Welcome to MVRP API"))
}