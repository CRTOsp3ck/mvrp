// Code generated by MVRP Codegen Util. DO NOT EDIT.

package invoice

import (
	"context"
	"encoding/json"
	"fmt"
	"mvrp/domain/dto"
	"mvrp/domain/service/invoice"
	"mvrp/errors"
	"mvrp/htresp"
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
)

const CreditNoteKey contextKey = "CreditNote"

func CreditNoteContext(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var resp *invoice.GetCreditNoteResponse
		if idStr := chi.URLParam(r, "id"); idStr != "" {
			id, err := strconv.Atoi(idStr)
			if err != nil {
				htresp.RespondWithError(w, http.StatusBadRequest,
					errors.WrapError(errors.ErrTypeConversion, "ID must be an integer"),
					"Failed to convert ID to integer")
				return
			}
			svc := invoice.NewInvoiceService()
			req := svc.NewGetCreditNoteRequest(r.Context(), id)
			resp, err = svc.GetCreditNote(req)
			if err != nil {
				htresp.RespondWithError(w, http.StatusInternalServerError,
					errors.WrapError(errors.ErrTypeService, err.Error()),
					"Failed to get CreditNote")
				return
			}
		} else {
			htresp.RespondWithError(w, http.StatusBadRequest,
				errors.WrapError(errors.ErrTypeBadRequest, "ID is required"),
				"Failed to get CreditNote")
			return
		}
		ctx := context.WithValue(r.Context(), CreditNoteKey, resp)
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}


func ListCreditNote(w http.ResponseWriter, r *http.Request) {
	svc := invoice.NewInvoiceService()
	req := svc.NewListCreditNoteRequest(r.Context())
	resp, err := svc.ListCreditNote(req)
	if err != nil {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeService, err.Error()),
			"Failed to list CreditNote")
		return
	}
	htresp.RespondWithJSON(w, http.StatusOK, resp, "CreditNote listed successfully")
	
}

func CreateCreditNote(w http.ResponseWriter, r *http.Request) {
	var data *dto.CreateCreditNoteDTO
	err := json.NewDecoder(r.Body).Decode(&data)
	if err != nil {
		htresp.RespondWithError(w, http.StatusBadRequest,
			errors.WrapError(errors.ErrTypeDecoding, err.Error()),
			"Failed to decode request body")
		return
	}
	svc := invoice.NewInvoiceService()
	req := svc.NewCreateCreditNoteRequest(r.Context(), *data)
	resp, err := svc.CreateCreditNote(req)
	if err != nil {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeService, err.Error()),
			"Failed to create CreditNote")
		return
	}
	htresp.RespondWithJSON(w, http.StatusCreated, resp, "CreditNote created successfully")

	
}

func GetCreditNote(w http.ResponseWriter, r *http.Request) {
	value, ok := r.Context().Value(CreditNoteKey).(*invoice.GetCreditNoteResponse)
	if !ok {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeAssertion,
				fmt.Sprintf("Incorrect response format, should be %T", r.Context().Value(CreditNoteKey))),
			"Failed to get CreditNote")
		return
	}
	htresp.RespondWithJSON(w, http.StatusOK, value, "CreditNote retrieved successfully")

	
}

func UpdateCreditNote(w http.ResponseWriter, r *http.Request) {
	_, ok := r.Context().Value(CreditNoteKey).(*invoice.GetCreditNoteResponse)
	if !ok {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeAssertion,
				fmt.Sprintf("Incorrect response format, should be %T", r.Context().Value(CreditNoteKey))),
			"Failed to get CreditNote")
		return
	}
	var data *dto.UpdateCreditNoteDTO
	err := json.NewDecoder(r.Body).Decode(&data)
	if err != nil {
		htresp.RespondWithError(w, http.StatusBadRequest,
			errors.WrapError(errors.ErrTypeDecoding, err.Error()),
			"Failed to decode request body")
		return
	}
	svc := invoice.NewInvoiceService()
	req := svc.NewUpdateCreditNoteRequest(r.Context(), *data)
	resp, err := svc.UpdateCreditNote(req)
	if err != nil {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeService, err.Error()),
			"Failed to update CreditNote")
		return
	}
	htresp.RespondWithJSON(w, http.StatusOK, resp, "CreditNote updated successfully")

	
}

func DeleteCreditNote(w http.ResponseWriter, r *http.Request) {
	v, ok := r.Context().Value(CreditNoteKey).(*invoice.GetCreditNoteResponse)
	if !ok {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeAssertion,
				fmt.Sprintf("Incorrect response format, should be %T", r.Context().Value(CreditNoteKey))),
			"Failed to get CreditNote")
		return
	}
	svc := invoice.NewInvoiceService()
	req := svc.NewDeleteCreditNoteRequest(r.Context(), v.Payload.ID)
	resp, err := svc.DeleteCreditNote(req)
	if err != nil {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeService, err.Error()),
			"Failed to delete CreditNote")
		return
	}
	htresp.RespondWithJSON(w, http.StatusOK, resp, "CreditNote deleted successfully")

	
}

func SearchCreditNote(w http.ResponseWriter, r *http.Request) {
	var dto *dto.SearchCreditNoteDTO
	err := json.NewDecoder(r.Body).Decode(&dto)
	if err != nil {
		htresp.RespondWithError(w, http.StatusBadRequest, err, "Failed to decode request body")
		return
	}
	svc := invoice.NewInvoiceService()
	req := svc.NewSearchCreditNoteRequest(r.Context(), *dto)
	resp, err := svc.SearchCreditNote(req)
	if err != nil {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeService, err.Error()),
			"Failed to search CreditNote")
		return
	}
	htresp.RespondWithJSON(w, http.StatusOK, resp, "CreditNote search successful")

	
}

