// Code generated by MVRP Codegen Util. DO NOT EDIT.

package sale

import (
	"context"
	"encoding/json"
	"fmt"
	"mvrp/domain/dto"
	"mvrp/domain/service/sale"
	"mvrp/errors"
	"mvrp/htresp"
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
)

const GoodsReturnNoteKey contextKey = "GoodsReturnNote"

func GoodsReturnNoteContext(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var resp *sale.GetGoodsReturnNoteResponse
		if idStr := chi.URLParam(r, "id"); idStr != "" {
			id, err := strconv.Atoi(idStr)
			if err != nil {
				htresp.RespondWithError(w, http.StatusBadRequest,
					errors.WrapError(errors.ErrTypeConversion, "ID must be an integer"),
					"Failed to convert ID to integer")
				return
			}
			svc := sale.NewSaleService()
			req := svc.NewGetGoodsReturnNoteRequest(r.Context(), id)
			resp, err = svc.GetGoodsReturnNote(req)
			if err != nil {
				htresp.RespondWithError(w, http.StatusInternalServerError,
					errors.WrapError(errors.ErrTypeService, err.Error()),
					"Failed to get GoodsReturnNote")
				return
			}
		} else {
			htresp.RespondWithError(w, http.StatusBadRequest,
				errors.WrapError(errors.ErrTypeBadRequest, "ID is required"),
				"Failed to get GoodsReturnNote")
			return
		}
		ctx := context.WithValue(r.Context(), GoodsReturnNoteKey, resp)
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}



func ListGoodsReturnNote(w http.ResponseWriter, r *http.Request) {
	svc := sale.NewSaleService()
	req := svc.NewListGoodsReturnNoteRequest(r.Context())
	resp, err := svc.ListGoodsReturnNote(req)
	if err != nil {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeService, err.Error()),
			"Failed to list GoodsReturnNote")
		return
	}
	htresp.RespondWithJSON(w, http.StatusOK, resp, "GoodsReturnNote listed successfully")
	
}

func CreateGoodsReturnNote(w http.ResponseWriter, r *http.Request) {
	var data *dto.CreateGoodsReturnNoteDTO
	err := json.NewDecoder(r.Body).Decode(&data)
	if err != nil {
		htresp.RespondWithError(w, http.StatusBadRequest,
			errors.WrapError(errors.ErrTypeDecoding, err.Error()),
			"Failed to decode request body")
		return
	}
	svc := sale.NewSaleService()
	req := svc.NewCreateGoodsReturnNoteRequest(r.Context(), *data)
	resp, err := svc.CreateGoodsReturnNote(req)
	if err != nil {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeService, err.Error()),
			"Failed to create GoodsReturnNote")
		return
	}
	htresp.RespondWithJSON(w, http.StatusCreated, resp, "GoodsReturnNote created successfully")

	
}

func GetGoodsReturnNote(w http.ResponseWriter, r *http.Request) {
	value, ok := r.Context().Value(GoodsReturnNoteKey).(*sale.GetGoodsReturnNoteResponse)
	if !ok {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeAssertion,
				fmt.Sprintf("Incorrect response format, should be %T", r.Context().Value(GoodsReturnNoteKey))),
			"Failed to get GoodsReturnNote")
		return
	}
	htresp.RespondWithJSON(w, http.StatusOK, value, "GoodsReturnNote retrieved successfully")

	
}

func UpdateGoodsReturnNote(w http.ResponseWriter, r *http.Request) {
	_, ok := r.Context().Value(GoodsReturnNoteKey).(*sale.GetGoodsReturnNoteResponse)
	if !ok {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeAssertion,
				fmt.Sprintf("Incorrect response format, should be %T", r.Context().Value(GoodsReturnNoteKey))),
			"Failed to get GoodsReturnNote")
		return
	}
	var data *dto.UpdateGoodsReturnNoteDTO
	err := json.NewDecoder(r.Body).Decode(&data)
	if err != nil {
		htresp.RespondWithError(w, http.StatusBadRequest,
			errors.WrapError(errors.ErrTypeDecoding, err.Error()),
			"Failed to decode request body")
		return
	}
	svc := sale.NewSaleService()
	req := svc.NewUpdateGoodsReturnNoteRequest(r.Context(), *data)
	resp, err := svc.UpdateGoodsReturnNote(req)
	if err != nil {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeService, err.Error()),
			"Failed to update GoodsReturnNote")
		return
	}
	htresp.RespondWithJSON(w, http.StatusOK, resp, "GoodsReturnNote updated successfully")

	
}

func DeleteGoodsReturnNote(w http.ResponseWriter, r *http.Request) {
	v, ok := r.Context().Value(GoodsReturnNoteKey).(*sale.GetGoodsReturnNoteResponse)
	if !ok {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeAssertion,
				fmt.Sprintf("Incorrect response format, should be %T", r.Context().Value(GoodsReturnNoteKey))),
			"Failed to get GoodsReturnNote")
		return
	}
	svc := sale.NewSaleService()
	req := svc.NewDeleteGoodsReturnNoteRequest(r.Context(), v.Payload.ID)
	resp, err := svc.DeleteGoodsReturnNote(req)
	if err != nil {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeService, err.Error()),
			"Failed to delete GoodsReturnNote")
		return
	}
	htresp.RespondWithJSON(w, http.StatusOK, resp, "GoodsReturnNote deleted successfully")

	
}

func SearchGoodsReturnNote(w http.ResponseWriter, r *http.Request) {
	
	var dto *dto.SearchGoodsReturnNoteDTO
	err := json.NewDecoder(r.Body).Decode(&dto)
	if err != nil {
		htresp.RespondWithError(w, http.StatusBadRequest, err, "Failed to decode request body")
		return
	}
	svc := sale.NewSaleService()
	req := svc.NewSearchGoodsReturnNoteRequest(r.Context(), *dto)
	resp, err := svc.SearchGoodsReturnNote(req)
	if err != nil {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeService, err.Error()),
			"Failed to search GoodsReturnNote")
		return
	}
	htresp.RespondWithJSON(w, http.StatusOK, resp, "GoodsReturnNote search successful")

	
}

