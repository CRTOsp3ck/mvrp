// Code generated by MVRP Codegen Util. DO NOT EDIT.

package inventory

import (
	"context"
	"fmt"
	"mvrp/domain/service/inventory"
	"mvrp/errors"
	"mvrp/htresp"
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
)

const GoodsIssueNoteViewKey contextKey = "GoodsIssueNoteView"

func GoodsIssueNoteViewContext(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var resp *inventory.GetGoodsIssueNoteViewResponse
		if idStr := chi.URLParam(r, "id"); idStr != "" {
			id, err := strconv.Atoi(idStr)
			if err != nil {
				htresp.RespondWithError(w, http.StatusBadRequest,
					errors.WrapError(errors.ErrTypeConversion, "ID must be an integer"),
					"Failed to convert ID to integer")
				return
			}
			svc := inventory.NewInventoryService()
			req := svc.NewGetGoodsIssueNoteViewRequest(r.Context(), id)
			resp, err = svc.GetGoodsIssueNoteView(req)
			if err != nil {
				htresp.RespondWithError(w, http.StatusInternalServerError,
					errors.WrapError(errors.ErrTypeService, err.Error()),
					"Failed to get GoodsIssueNoteView")
				return
			}
		} else {
			htresp.RespondWithError(w, http.StatusBadRequest,
				errors.WrapError(errors.ErrTypeBadRequest, "ID is required"),
				"Failed to get GoodsIssueNoteView")
			return
		}
		ctx := context.WithValue(r.Context(), GoodsIssueNoteViewKey, resp)
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}


func ListGoodsIssueNoteView(w http.ResponseWriter, r *http.Request) {
	svc := inventory.NewInventoryService()
	req := svc.NewListGoodsIssueNoteViewRequest(r.Context())
	resp, err := svc.ListGoodsIssueNoteView(req)
	if err != nil {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeService, err.Error()),
			"Failed to list GoodsIssueNoteView")
		return
	}
	htresp.RespondWithJSON(w, http.StatusOK, resp, "GoodsIssueNoteView listed successfully")
	
}

func GetGoodsIssueNoteView(w http.ResponseWriter, r *http.Request) {
	value, ok := r.Context().Value(GoodsIssueNoteViewKey).(*inventory.GetGoodsIssueNoteViewResponse)
	if !ok {
		htresp.RespondWithError(w, http.StatusInternalServerError,
			errors.WrapError(errors.ErrTypeAssertion,
				fmt.Sprintf("Incorrect response format, should be %T", r.Context().Value(GoodsIssueNoteViewKey))),
			"Failed to get GoodsIssueNoteView")
		return
	}
	htresp.RespondWithJSON(w, http.StatusOK, value, "GoodsIssueNoteView retrieved successfully")

	
}

